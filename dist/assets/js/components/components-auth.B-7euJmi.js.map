{"version":3,"file":"components-auth.B-7euJmi.js","sources":["../../../../src/components/auth/LoginForm.tsx","../../../../src/components/auth/SignupForm.tsx","../../../../src/components/auth/ResetPasswordForm.tsx","../../../../src/components/auth/AuthModal.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertCircle } from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from 'react-i18next';\nimport HCaptcha from '@hcaptcha/react-hcaptcha';\n\ninterface LoginFormProps {\n  email: string;\n  setEmail: (email: string) => void;\n  password: string;\n  setPassword: (password: string) => void;\n  onForgotPassword: () => void;\n  onSuccess: () => void;\n  errorMessage: string;\n  setErrorMessage: (message: string) => void;\n}\n\nexport function LoginForm({\n  email,\n  setEmail,\n  password,\n  setPassword,\n  onForgotPassword,\n  onSuccess,\n  errorMessage,\n  setErrorMessage\n}: LoginFormProps) {\n  const { toast } = useToast();\n  const { t } = useTranslation('auth');\n  const [loading, setLoading] = useState(false);\n  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\n  const [showCaptcha, setShowCaptcha] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setErrorMessage('');\n\n    try {\n      if (showCaptcha && !captchaToken) {\n        setErrorMessage(t('validation.captchaRequired'));\n        setLoading(false);\n        return;\n      }\n      \n      const { error } = await supabase.auth.signInWithPassword({ \n        email, \n        password,\n        options: {\n          captchaToken: captchaToken || undefined\n        }\n      });\n      \n      if (error) {\n        console.error('Authentication error:', error.message);\n        \n        if (error.message.includes('captcha')) {\n          setShowCaptcha(true);\n          setErrorMessage(t('errors.captchaFailed'));\n          return;\n        }\n        \n        if (error.message.includes('Invalid login credentials')) {\n          setErrorMessage(t('errors.invalidCredentials'));\n        } else {\n          setErrorMessage(error.message);\n        }\n        return;\n      }\n      \n      onSuccess();\n    } catch (error: any) {\n      console.error('Authentication error:', error);\n      toast({\n        title: t('errors.default'),\n        description: errorMessage || error.message || t('errors.default'),\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCaptchaChange = (token: string) => {\n    setCaptchaToken(token);\n  };\n\n  return (\n    <form onSubmit={handleLogin} className=\"space-y-4\">\n      {errorMessage && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center text-red-700\">\n          <AlertCircle className=\"h-5 w-5 mr-2 flex-shrink-0\" />\n          <div className=\"text-sm\">\n            <p>{errorMessage}</p>\n            {errorMessage === t('errors.invalidCredentials') && (\n              <p className=\"mt-1\">\n                <button \n                  type=\"button\" \n                  onClick={onForgotPassword} \n                  className=\"text-blue-600 hover:underline\"\n                >\n                  {t('signIn.forgotPassword')}\n                </button>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      \n      <div className=\"space-y-2\">\n        <Label htmlFor=\"email\">{t('signIn.email')}</Label>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          name=\"username\"\n          autoComplete=\"username\"\n          placeholder={t('signIn.emailPlaceholder')}\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"password\">{t('signIn.password')}</Label>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          name=\"current-password\"\n          autoComplete=\"current-password\"\n          placeholder={t('signIn.passwordPlaceholder')}\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n      </div>\n      \n      {showCaptcha && (\n        <div className=\"flex justify-center my-4\">\n          <div className=\"captcha-container\">\n            <HCaptcha\n              sitekey=\"17f0e2fe-5b64-45c0-8950-8856adb63412\"\n              onVerify={handleCaptchaChange}\n              onExpire={() => setCaptchaToken(null)}\n            />\n          </div>\n        </div>\n      )}\n      \n      <div className=\"text-right\">\n        <button\n          type=\"button\"\n          onClick={onForgotPassword}\n          className=\"text-sm text-blue-600 hover:underline\"\n        >\n          {t('signIn.forgotPassword')}\n        </button>\n      </div>\n      \n      <Button \n        type=\"submit\" \n        className=\"w-full relative px-6 py-2 bg-gradient-to-r from-[#10B981] to-[#059669] text-white border-none hover:from-[#059669] hover:to-[#047857] hover:scale-105 transition-all duration-300 shadow-lg rounded-full font-medium tracking-wide\"\n        disabled={loading}\n        variant=\"default\"\n      >\n        {loading ? t('loading') : t('signIn.button')}\n      </Button>\n    </form>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AlertCircle, CheckCircle } from 'lucide-react';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from 'react-i18next';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { LocationSearch } from \"@/components/trips/LocationSearch\";\nimport { FunctionsHttpError } from '@supabase/supabase-js';\n\ninterface SignupFormProps {\n  email: string;\n  setEmail: (email: string) => void;\n  password: string;\n  setPassword: (password: string) => void;\n  errorMessage: string;\n  setErrorMessage: (message: string) => void;\n  onSuccess?: () => void;\n}\n\nexport function SignupForm({\n  email,\n  setEmail,\n  password,\n  setPassword,\n  errorMessage,\n  setErrorMessage,\n  onSuccess\n}: SignupFormProps) {\n  const { toast } = useToast();\n  const { t } = useTranslation('auth');\n  const [loading, setLoading] = useState(false);\n  const [emailSent, setEmailSent] = useState(false);\n  const [subscribeNewsletter, setSubscribeNewsletter] = useState(true);\n  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\n  const [showCaptcha, setShowCaptcha] = useState(false);\n  \n  // New form fields\n  const [step, setStep] = useState(1);\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [confirmEmail, setConfirmEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [location, setLocation] = useState('');\n  const [locationCoordinates, setLocationCoordinates] = useState<[number, number]>([0, 0]);\n  const [language, setLanguage] = useState('');\n  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});\n  const [touchedFields, setTouchedFields] = useState<{[key: string]: boolean}>({});\n\n  // Ensure reCAPTCHA is clickable in modal context\n  useEffect(() => {\n    const handleRecaptchaClick = (e: MouseEvent) => {\n      const target = e.target as HTMLElement;\n      \n      // Check if click is on reCAPTCHA element\n      if (target.closest('iframe[src*=\"recaptcha\"]') || \n          target.closest('div[style*=\"z-index: 2000000000\"]')) {\n        e.stopPropagation();\n      }\n    };\n\n    // Add capturing phase listener to intercept clicks before they bubble\n    document.addEventListener('click', handleRecaptchaClick, true);\n\n    return () => {\n      document.removeEventListener('click', handleRecaptchaClick, true);\n    };\n  }, []);\n\n  const markFieldAsTouched = (fieldName: string) => {\n    setTouchedFields(prev => ({ ...prev, [fieldName]: true }));\n  };\n\n  const shouldShowError = (fieldName: string) => {\n    return touchedFields[fieldName] && formErrors[fieldName];\n  };\n\n  const validateStep = (currentStep: number) => {\n    const errors: {[key: string]: string} = {};\n    \n    if (currentStep === 1) {\n      if (!email) errors.email = t('validation.emailRequired');\n      else if (!/\\S+@\\S+\\.\\S+/.test(email)) errors.email = t('validation.emailInvalid');\n      \n      if (!confirmEmail) errors.confirmEmail = t('validation.emailRequired');\n      else if (confirmEmail !== email) errors.confirmEmail = t('validation.emailMatch');\n      \n      if (!password) errors.password = t('validation.passwordRequired');\n      else if (password.length < 8) errors.password = t('validation.passwordMinLength');\n      \n      if (!confirmPassword) errors.confirmPassword = t('validation.passwordRequired');\n      else if (confirmPassword !== password) errors.confirmPassword = t('validation.passwordMatch');\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleNext = () => {\n    // Mark all fields in current step as touched\n    if (step === 1) {\n      setTouchedFields(prev => ({\n        ...prev,\n        email: true,\n        confirmEmail: true,\n        password: true,\n        confirmPassword: true\n      }));\n    }\n\n    if (validateStep(step)) {\n      setFormErrors({});\n      setTouchedFields({}); // Reset touched fields when moving to next step\n      setStep(step + 1);\n    }\n  };\n\n  const handleBack = () => {\n    setFormErrors({});\n    setTouchedFields({}); // Reset touched fields when moving back\n    setStep(step - 1);\n  };\n\n  const verifyRecaptcha = async (token: string): Promise<boolean> => {\n    try {\n      console.log('Verifying reCAPTCHA token...');\n      const response = await supabase.functions.invoke('verify-recaptcha', {\n        body: { token }\n      });\n\n      if (response.error) {\n        console.error('reCAPTCHA verification error:', response.error);\n        return false;\n      }\n\n      const { data } = response;\n      console.log('reCAPTCHA verification response:', data);\n\n      if (!data.success) {\n        console.error('reCAPTCHA verification failed:', data.message, data.errors);\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error verifying reCAPTCHA:', error);\n      return false;\n    }\n  };\n\n  const handleSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Mark all fields as touched when submitting\n    setTouchedFields({\n      email: true,\n      password: true,\n      confirmPassword: true,\n      fullName: true,\n      location: true,\n      language: true\n    });\n\n    // Validate all fields before submission\n    const errors: {[key: string]: string} = {};\n    \n    // Validate step 1 fields\n    if (!email) errors.email = t('validation.emailRequired');\n    else if (!/\\S+@\\S+\\.\\S+/.test(email)) errors.email = t('validation.emailInvalid');\n    \n    if (!password) errors.password = t('validation.passwordRequired');\n    else if (password.length < 8) errors.password = t('validation.passwordMinLength');\n    \n    if (!confirmPassword) errors.confirmPassword = t('validation.passwordRequired');\n    else if (confirmPassword !== password) errors.confirmPassword = t('validation.passwordMatch');\n    \n    // Validate step 2 fields\n    if (!firstName) errors.firstName = t('validation.firstNameRequired');\n    if (!lastName) errors.lastName = t('validation.lastNameRequired');\n    if (!location) errors.location = t('validation.locationRequired');\n    if (!language) errors.language = t('validation.languageRequired');\n    if (!captchaToken) errors.captcha = t('validation.captchaRequired');\n    \n    setFormErrors(errors);\n    if (Object.keys(errors).length > 0) {\n      if (errors.email || errors.password || errors.confirmPassword) {\n        setStep(1);\n      }\n      return;\n    }\n    \n    setLoading(true);\n    setErrorMessage('');\n    setEmailSent(false);\n\n    try {\n      // Call the server-side signup function\n      console.log('Sending signup request with data:', {\n        email,\n        password: '***',\n        first_name: firstName,\n        last_name: lastName,\n        location,\n        language,\n        newsletter_subscribed: subscribeNewsletter,\n        captchaToken: captchaToken ? '***' : null\n      });\n\n      const response = await supabase.functions.invoke('signup', {\n        body: {\n          email,\n          password,\n          first_name: firstName,\n          last_name: lastName,\n          location,\n          language,\n          newsletter_subscribed: subscribeNewsletter,\n          captchaToken\n        }\n      });\n\n      console.log('Signup response:', response);\n\n      if (response.error) {\n        // Throw to be caught by catch block for proper error parsing\n        throw response.error;\n      }\n\n      // Automatically sign in the user\n      const { error: signInError } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (signInError) {\n        console.error('Auto-login error:', signInError);\n        toast({\n          title: t('success.signUp'),\n          description: t('signUp.loginManually')\n        });\n        return;\n      }\n\n      // Show success message and call onSuccess\n      toast({\n        title: t('success.signUp'),\n        description: t('signUp.welcome')\n      });\n\n      if (onSuccess) {\n        onSuccess();\n      }\n\n    } catch (error: any) {\n      // Robust error handling for Supabase Edge Functions\n      if (error instanceof FunctionsHttpError) {\n        try {\n          const errorBody = await error.context.json();\n          if (errorBody.error && errorBody.error.includes('captcha')) {\n            setShowCaptcha(true);\n            setErrorMessage(t('errors.captchaFailed'));\n            setCaptchaToken(null);\n          } else if (errorBody.error && errorBody.error.includes('already exists')) {\n            setErrorMessage(t('errors.emailExists'));\n          } else {\n            setErrorMessage(errorBody.error || t('errors.default'));\n          }\n        } catch (parseErr) {\n          setErrorMessage(t('errors.default'));\n        }\n      } else {\n        setErrorMessage(error.message || t('errors.default'));\n      }\n      console.error('Signup error:', error);\n      if (!errorMessage) {\n        toast({\n          title: t('errors.default'),\n          description: error.message || t('errors.default'),\n          variant: \"destructive\"\n        });\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCaptchaChange = (token: string | null) => {\n    setCaptchaToken(token);\n    if (!token) {\n      setFormErrors(prev => ({ ...prev, captcha: t('validation.captchaRequired') }));\n    } else {\n      setFormErrors(prev => {\n        const { captcha, ...rest } = prev;\n        return rest;\n      });\n    }\n  };\n\n  const handleLocationChange = (newLocation: string, coordinates: [number, number]) => {\n    setLocation(newLocation);\n    setLocationCoordinates(coordinates);\n    markFieldAsTouched('location');\n  };\n\n  const renderStep = () => {\n    const slideAnimation = {\n      initial: { x: 20, opacity: 0 },\n      animate: { x: 0, opacity: 1 },\n      exit: { x: -20, opacity: 0 },\n      transition: { duration: 0.3 }\n    };\n\n    return (\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={step}\n          {...slideAnimation}\n        >\n          {step === 1 && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">{t('signUp.email')}</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"username\"\n                  autoComplete=\"username\"\n                  placeholder={t('signUp.emailPlaceholder')}\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  onBlur={() => markFieldAsTouched('email')}\n                  required\n                  className={shouldShowError('email') ? 'border-red-500' : ''}\n                />\n                {shouldShowError('email') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.email}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmEmail\">{t('signUp.confirmEmail')}</Label>\n                <Input\n                  id=\"confirmEmail\"\n                  type=\"email\"\n                  name=\"confirm-email\"\n                  placeholder={t('signUp.confirmEmailPlaceholder')}\n                  value={confirmEmail}\n                  onChange={(e) => setConfirmEmail(e.target.value)}\n                  onBlur={() => markFieldAsTouched('confirmEmail')}\n                  required\n                  className={shouldShowError('confirmEmail') ? 'border-red-500' : ''}\n                />\n                {shouldShowError('confirmEmail') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.confirmEmail}</p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">{t('signUp.password')}</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  name=\"new-password\"\n                  autoComplete=\"new-password\"\n                  placeholder={t('signUp.passwordPlaceholder')}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  onBlur={() => markFieldAsTouched('password')}\n                  required\n                  className={shouldShowError('password') ? 'border-red-500' : ''}\n                />\n                {shouldShowError('password') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.password}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">{t('signUp.confirmPassword')}</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  name=\"confirm-password\"\n                  autoComplete=\"new-password\"\n                  placeholder={t('signUp.confirmPasswordPlaceholder')}\n                  value={confirmPassword}\n                  onChange={(e) => setConfirmPassword(e.target.value)}\n                  onBlur={() => markFieldAsTouched('confirmPassword')}\n                  required\n                  className={shouldShowError('confirmPassword') ? 'border-red-500' : ''}\n                />\n                {shouldShowError('confirmPassword') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.confirmPassword}</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">{t('signUp.firstName')}</Label>\n                  <Input\n                    id=\"firstName\"\n                    type=\"text\"\n                    placeholder={t('signUp.firstNamePlaceholder')}\n                    value={firstName}\n                    onChange={(e) => setFirstName(e.target.value)}\n                    onBlur={() => markFieldAsTouched('firstName')}\n                    required\n                    className={shouldShowError('firstName') ? 'border-red-500' : ''}\n                  />\n                  {shouldShowError('firstName') && (\n                    <p className=\"text-sm text-red-500\">{formErrors.firstName}</p>\n                  )}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">{t('signUp.lastName')}</Label>\n                  <Input\n                    id=\"lastName\"\n                    type=\"text\"\n                    placeholder={t('signUp.lastNamePlaceholder')}\n                    value={lastName}\n                    onChange={(e) => setLastName(e.target.value)}\n                    onBlur={() => markFieldAsTouched('lastName')}\n                    required\n                    className={shouldShowError('lastName') ? 'border-red-500' : ''}\n                  />\n                  {shouldShowError('lastName') && (\n                    <p className=\"text-sm text-red-500\">{formErrors.lastName}</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"location\">{t('signUp.location')}</Label>\n                <LocationSearch\n                  value={location}\n                  onChange={handleLocationChange}\n                  className={shouldShowError('location') ? 'border-red-500' : ''}\n                />\n                {shouldShowError('location') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.location}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"language\">{t('signUp.language')}</Label>\n                <Select\n                  value={language}\n                  onValueChange={(value) => {\n                    setLanguage(value);\n                    markFieldAsTouched('language');\n                  }}\n                >\n                  <SelectTrigger\n                    id=\"language\"\n                    className={shouldShowError('language') ? 'border-red-500' : ''}\n                  >\n                    <SelectValue placeholder={t('signUp.languagePlaceholder')} />\n                  </SelectTrigger>\n                  <SelectContent className=\"z-[200]\">\n                    <SelectItem value=\"en\">English</SelectItem>\n                    <SelectItem value=\"fr\">Français</SelectItem>\n                    <SelectItem value=\"es\">Español</SelectItem>\n                  </SelectContent>\n                </Select>\n                {shouldShowError('language') && (\n                  <p className=\"text-sm text-red-500\">{formErrors.language}</p>\n                )}\n              </div>\n\n              {/* Newsletter subscription checkbox hidden - automatically set to true on profile creation */}\n              {/* <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"newsletter\"\n                  checked={subscribeNewsletter}\n                  onCheckedChange={(checked) => setSubscribeNewsletter(checked as boolean)}\n                />\n                <label\n                  htmlFor=\"newsletter\"\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n                >\n                  {t('signUp.subscribeNewsletter')}\n                </label>\n              </div> */}\n\n              <div className=\"flex justify-center my-4\">\n                <div className=\"relative z-[9999]\">\n                  <ReCAPTCHA\n                    sitekey=\"6LelQh0rAAAAAMLk0Mf99W7DKHkPhSDue0yghdF7\"\n                    onChange={handleCaptchaChange}\n                    className=\"transform scale-100\"\n                  />\n                </div>\n              </div>\n              {formErrors.captcha && (\n                <p className=\"text-sm text-red-500 text-center\">{formErrors.captcha}</p>\n              )}\n            </div>\n          )}\n\n          {step === 3 && (\n            <div className=\"text-center space-y-6 py-8\">\n              <div className=\"flex justify-center\">\n                <img \n                  src=\"https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExY2N4dm16MHV5NWh0emF0NDJpNHEwYWU2OGRucXlyamdpMjNjbDI0cSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3orieOSehVQs29STDi/giphy.gif\"\n                  alt=\"Success animation\"\n                  className=\"w-48 h-48 rounded-full shadow-lg mb-4\"\n                />\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-center\">\n                  <div className=\"bg-green-100 text-green-700 rounded-full p-3\">\n                    <CheckCircle className=\"h-12 w-12\" />\n                  </div>\n                </div>\n                <h3 className=\"text-2xl font-bold text-gray-900\">\n                  {t('signUp.thankYouTitle')}\n                </h3>\n                <p className=\"text-gray-600 max-w-sm mx-auto\">\n                  {t('signUp.thankYouMessage')}\n                </p>\n                <div className=\"bg-blue-50 border border-blue-100 rounded-lg p-4 mt-6 text-sm text-blue-700\">\n                  {t('signUp.checkEmailMessage')}\n                </div>\n              </div>\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSignup} className=\"space-y-4\">\n      {errorMessage && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-md flex items-center text-red-700\">\n          <AlertCircle className=\"h-5 w-5 mr-2 flex-shrink-0\" />\n          <div className=\"text-sm\">\n            <p>{errorMessage}</p>\n            {errorMessage === t('errors.emailExists') && (\n              <p className=\"mt-1\">\n                {t('signUp.hasAccount')} <a href=\"#\" \n                  onClick={(e) => {\n                    e.preventDefault();\n                    document.getElementById('signin-tab')?.click();\n                  }}\n                  className=\"text-blue-600 hover:underline\"\n                >\n                  {t('signUp.signIn')}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {emailSent && (\n        <div className=\"mb-4 p-3 bg-green-50 border border-green-200 rounded-md flex items-center text-green-700\">\n          <div className=\"text-sm\">\n            <p>{t('signUp.checkEmail')}</p>\n          </div>\n        </div>\n      )}\n\n      {renderStep()}\n      \n      <div className=\"flex justify-between gap-4 mt-6\">\n        {step > 1 && step < 3 && (\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handleBack}\n            disabled={loading}\n          >\n            {t('common.back')}\n          </Button>\n        )}\n        \n        {step < 2 ? (\n          <Button\n            type=\"button\"\n            className=\"w-full relative px-6 py-2 bg-gradient-to-r from-[#10B981] to-[#059669] text-white border-none hover:from-[#059669] hover:to-[#047857] hover:scale-105 transition-all duration-300 shadow-lg rounded-full font-medium tracking-wide\"\n            onClick={handleNext}\n            disabled={loading}\n          >\n            {t('common.next')}\n          </Button>\n        ) : step === 2 ? (\n          <Button \n            type=\"submit\" \n            className=\"w-full relative px-6 py-2 bg-gradient-to-r from-[#10B981] to-[#059669] text-white border-none hover:from-[#059669] hover:to-[#047857] hover:scale-105 transition-all duration-300 shadow-lg rounded-full font-medium tracking-wide\"\n            disabled={loading}\n            variant=\"default\"\n          >\n            {loading ? t('loading') : t('signUp.button')}\n          </Button>\n        ) : null}\n      </div>\n    </form>\n  );\n}\n","import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { DialogClose } from \"@/components/ui/dialog\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from 'react-i18next';\nimport HCaptcha from '@hcaptcha/react-hcaptcha';\n\ninterface ResetPasswordFormProps {\n  onSuccess: () => void;\n}\n\nexport function ResetPasswordForm({ onSuccess }: ResetPasswordFormProps) {\n  const { toast } = useToast();\n  const { t, i18n } = useTranslation('auth');\n  const [resetEmail, setResetEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [captchaToken, setCaptchaToken] = useState<string | null>(null);\n  const [showCaptcha, setShowCaptcha] = useState(false);\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    \n    try {\n      if (!captchaToken && showCaptcha) {\n        toast({\n          title: t('errors.default'),\n          description: t('validation.captchaRequired'),\n          variant: \"destructive\",\n        });\n        setLoading(false);\n        return;\n      }\n      \n      const baseUrl = 'https://zaparound.com';\n      const redirectTo = `${baseUrl}/${i18n.language}/reset-password`;\n      \n      const { error } = await supabase.auth.resetPasswordForEmail(resetEmail, {\n        redirectTo,\n        captchaToken: captchaToken || undefined,\n      });\n      \n      if (error) {\n        if (error.message.includes('captcha')) {\n          setShowCaptcha(true);\n          throw new Error(t('errors.captchaFailed'));\n        }\n        throw error;\n      }\n      \n      toast({\n        title: t('success.resetPassword'),\n        description: t('resetPassword.subtitle')\n      });\n      \n      onSuccess();\n    } catch (error: any) {\n      console.error('Reset password error:', error);\n      \n      toast({\n        title: t('errors.default'),\n        description: error.message || t('resetPassword.generalMessage'),\n        variant: \"destructive\",\n      });\n      \n      if (!error.message.includes('captcha')) {\n        onSuccess();\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCaptchaChange = (token: string) => {\n    setCaptchaToken(token);\n  };\n\n  return (\n    <form onSubmit={handleResetPassword} className=\"space-y-4 mt-2\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"reset-email\">{t('resetPassword.email')}</Label>\n        <Input\n          id=\"reset-email\"\n          type=\"email\"\n          value={resetEmail}\n          onChange={(e) => setResetEmail(e.target.value)}\n          placeholder={t('resetPassword.emailPlaceholder')}\n          required\n        />\n      </div>\n      \n      {showCaptcha && (\n        <div className=\"flex justify-center my-4\">\n          <div className=\"captcha-container\">\n            <HCaptcha\n              sitekey=\"17f0e2fe-5b64-45c0-8950-8856adb63412\"\n              onVerify={handleCaptchaChange}\n              onExpire={() => setCaptchaToken(null)}\n            />\n          </div>\n        </div>\n      )}\n      \n      <div className=\"flex justify-end gap-2\">\n        <DialogClose asChild>\n          <Button type=\"button\" variant=\"outline\">\n            {t('resetPassword.cancel')}\n          </Button>\n        </DialogClose>\n        <Button type=\"submit\" disabled={loading}>\n          {loading ? t('loading') : t('resetPassword.button')}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogOverlay } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { LoginForm } from './LoginForm';\nimport { SignupForm } from './SignupForm';\nimport { useTranslation } from 'react-i18next';\nimport { ResetPasswordForm } from './ResetPasswordForm';\nimport { Users, Heart, Sparkles, Globe2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  title?: string;\n  description?: string;\n  defaultTab?: 'signin' | 'signup';\n}\n\nexport function AuthModal({\n  isOpen,\n  onClose,\n  onSuccess,\n  title,\n  description,\n  defaultTab = 'signin'\n}: AuthModalProps) {\n  const { t } = useTranslation('auth');\n  const [activeTab, setActiveTab] = useState<string>(defaultTab);\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  \n  // Form state\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleAuthSuccess = () => {\n    // Reset form state\n    setEmail('');\n    setPassword('');\n    setErrorMessage('');\n    setShowForgotPassword(false);\n    \n    // Call the onSuccess callback\n    onSuccess();\n    \n    // Close the modal\n    onClose();\n  };\n  \n  const handleForgotPassword = () => {\n    setShowForgotPassword(true);\n  };\n  \n  const handleBackToLogin = () => {\n    setShowForgotPassword(false);\n  };\n\n  // Reset state when modal closes\n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      setEmail('');\n      setPassword('');\n      setErrorMessage('');\n      setShowForgotPassword(false);\n      onClose();\n    }\n  };\n\n  const fadeAnimation = {\n    initial: { opacity: 0, y: 20 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: -20 },\n    transition: { duration: 0.3 }\n  };\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogOverlay className=\"bg-black/50 backdrop-blur-sm\" />\n      <DialogContent \n        className=\"z-[110] sm:max-w-[425px] bg-white max-h-[90vh] overflow-y-auto\"\n        onInteractOutside={(e) => {\n          // Allow interactions with reCAPTCHA elements\n          const target = e.target as HTMLElement;\n          const isRecaptchaClick = \n            target.closest('iframe[src*=\"recaptcha\"]') ||\n            target.closest('div[style*=\"z-index: 2000000000\"]') ||\n            target.closest('.grecaptcha-badge') ||\n            target.closest('[title*=\"recaptcha\"]');\n          \n          if (!isRecaptchaClick) {\n            e.preventDefault();\n          }\n        }}\n      >\n        <DialogHeader className=\"space-y-4\">\n          <DialogTitle className=\"sr-only\">\n            {activeTab === 'signup' ? t('signUp.title') : t('signIn.title')}\n          </DialogTitle>\n          {activeTab === 'signup' && !showForgotPassword && (\n            <motion.div \n              className=\"flex flex-col items-center text-center space-y-3\"\n              {...fadeAnimation}\n            >\n              <div className=\"relative w-16 h-16\">\n                <div className=\"absolute inset-0 bg-[#61936f]/10 rounded-full animate-pulse\" />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <Users className=\"w-8 h-8 text-[#61936f]\" />\n                </div>\n              </div>\n              <h2 className=\"text-2xl font-bold text-[#1d1d1e] flex items-center gap-2\">\n                {title || t('signUp.title')}\n                <Heart className=\"w-5 h-5 text-[#61936f] animate-bounce\" />\n              </h2>\n              <p className=\"text-[#62626a] max-w-sm\">\n                {description || t('signUp.subtitle')}\n              </p>\n              <div className=\"flex items-center gap-3 text-sm text-[#62626a]\">\n                <div className=\"flex items-center gap-1\">\n                  <Globe2 className=\"w-4 h-4\" />\n                  <span>{t('signUp.features.globalCommunity')}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Sparkles className=\"w-4 h-4\" />\n                  <span>{t('signUp.features.amazingAdventures')}</span>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </DialogHeader>\n        \n        {showForgotPassword ? (\n          <ResetPasswordForm \n            onSuccess={handleAuthSuccess}\n          />\n        ) : (\n          <Tabs defaultValue={defaultTab} value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 z-[111]\">\n              <TabsTrigger \n                id=\"signin-tab\" \n                value=\"signin\"\n                className=\"data-[state=active]:bg-white data-[state=active]:text-[#1d1d1e]\"\n              >\n                {t('signIn.title')}\n              </TabsTrigger>\n              <TabsTrigger \n                id=\"signup-tab\" \n                value=\"signup\"\n                className=\"data-[state=active]:bg-white data-[state=active]:text-[#1d1d1e]\"\n              >\n                {t('signUp.title')}\n              </TabsTrigger>\n            </TabsList>\n            \n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={activeTab}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                transition={{ duration: 0.15 }}\n                className=\"z-[112]\"\n              >\n                <TabsContent value=\"signin\" className=\"mt-4\">\n                  <LoginForm\n                    email={email}\n                    setEmail={setEmail}\n                    password={password}\n                    setPassword={setPassword}\n                    onForgotPassword={handleForgotPassword}\n                    onSuccess={handleAuthSuccess}\n                    errorMessage={errorMessage}\n                    setErrorMessage={setErrorMessage}\n                  />\n                </TabsContent>\n                \n                <TabsContent value=\"signup\" className=\"mt-4\">\n                  <SignupForm\n                    email={email}\n                    setEmail={setEmail}\n                    password={password}\n                    setPassword={setPassword}\n                    errorMessage={errorMessage}\n                    setErrorMessage={setErrorMessage}\n                    onSuccess={handleAuthSuccess}\n                  />\n                </TabsContent>\n              </motion.div>\n            </AnimatePresence>\n          </Tabs>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n} "],"names":["LoginForm","email","setEmail","password","setPassword","onForgotPassword","onSuccess","errorMessage","setErrorMessage","toast","useToast","t","useTranslation","loading","setLoading","useState","captchaToken","setCaptchaToken","showCaptcha","setShowCaptcha","jsxs","onSubmit","async","e","preventDefault","error","supabase","auth","signInWithPassword","options","message","includes","title","description","variant","className","children","jsx","AlertCircle","type","onClick","Label","htmlFor","Input","id","name","autoComplete","placeholder","value","onChange","target","required","HCaptcha","sitekey","onVerify","token","onExpire","Button","disabled","SignupForm","emailSent","setEmailSent","subscribeNewsletter","setSubscribeNewsletter","step","setStep","confirmPassword","setConfirmPassword","confirmEmail","setConfirmEmail","firstName","setFirstName","lastName","setLastName","location","setLocation","locationCoordinates","setLocationCoordinates","language","setLanguage","formErrors","setFormErrors","touchedFields","setTouchedFields","useEffect","handleRecaptchaClick","closest","stopPropagation","document","addEventListener","removeEventListener","markFieldAsTouched","fieldName","prev","shouldShowError","handleCaptchaChange","captcha","rest","handleLocationChange","newLocation","coordinates","fullName","errors","test","length","Object","keys","response","functions","invoke","body","first_name","last_name","newsletter_subscribed","signInError","FunctionsHttpError","errorBody","context","json","parseErr","href","getElementById","click","AnimatePresence","mode","motion","div","initial","x","opacity","animate","exit","transition","duration","onBlur","LocationSearch","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","ReCAPTCHA","src","alt","CheckCircle","currentStep","validateStep","ResetPasswordForm","i18n","resetEmail","setResetEmail","redirectTo","resetPasswordForEmail","Error","DialogClose","asChild","AuthModal","isOpen","onClose","defaultTab","activeTab","setActiveTab","showForgotPassword","setShowForgotPassword","handleAuthSuccess","Dialog","open","onOpenChange","DialogOverlay","DialogContent","onInteractOutside","DialogHeader","DialogTitle","y","Users","Heart","Globe2","Sparkles","Tabs","defaultValue","TabsList","TabsTrigger","TabsContent"],"mappings":"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"}