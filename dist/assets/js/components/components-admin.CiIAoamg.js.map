{"version":3,"file":"components-admin.CiIAoamg.js","sources":["../../../../src/integrations/supabase/client.ts","../../../../src/components/admin/UserSearchBar.tsx","../../../../src/components/admin/UserTable.tsx","../../../../src/components/admin/BlogForm.tsx","../../../../src/components/admin/EventForm.tsx"],"sourcesContent":["// This file is automatically generated. Do not edit it directly.\nimport { createClient } from '@supabase/supabase-js';\nimport type { Database } from './types';\n\nconst SUPABASE_URL = \"https://ynvnzmkpifwteyuxondc.supabase.co\";\nconst SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inludm56bWtwaWZ3dGV5dXhvbmRjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA0MzM0ODksImV4cCI6MjA1NjAwOTQ4OX0.-7uEZS3Ra22P3KqWgVn1JVgzWlTOxgKnYnjiykgWpms\";\n\n// Import the supabase client like this:\n// import { supabase } from \"@/integrations/supabase/client\";\n\nexport const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);","import { Search } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { useTranslation } from 'react-i18next';\n\ninterface UserSearchBarProps {\n  searchTerm: string;\n  setSearchTerm: (term: string) => void;\n  onRefresh?: () => void;\n  isLoading?: boolean;\n}\n\nexport function UserSearchBar({ \n  searchTerm, \n  setSearchTerm, \n  onRefresh = () => {}, \n  isLoading = false \n}: UserSearchBarProps) {\n  const { t } = useTranslation(['admin', 'common']);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\n      <div className=\"flex items-center gap-2 mb-4\">\n        <Search className=\"h-5 w-5 text-gray-400\" />\n        <Input\n          type=\"text\"\n          placeholder={t('common:search')}\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"w-full\"\n        />\n        {onRefresh && (\n          <Button \n            onClick={onRefresh}\n            variant=\"outline\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <svg className=\"h-4 w-4 animate-spin mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n            ) : null}\n            {t('common:refresh')}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Loader2, MoreHorizontal, Trash2 } from \"lucide-react\";\nimport { Database } from \"@/integrations/supabase/types\";\n\n// Define role type based on the database enum\ntype UserRole = Database[\"public\"][\"Enums\"][\"user_role\"];\n\ninterface User {\n  id: string;\n  email: string;\n  role: UserRole;\n  full_name?: string | null;\n  username?: string;\n  zap_trip_count: number;\n  zap_out_count: number;\n  zap_road_count: number;\n  post_count?: number;\n  created_at?: string;\n}\n\ninterface UserTableProps {\n  users: User[];\n  onRoleUpdated: () => void;\n  onDeleteUser: (userId: string) => void;\n}\n\nexport function UserTable({ users, onRoleUpdated, onDeleteUser }: UserTableProps) {\n  const { t } = useTranslation(['admin', 'common']);\n  const { toast } = useToast();\n  const [updatingUserId, setUpdatingUserId] = useState<string | null>(null);\n  const [deletingUserId, setDeletingUserId] = useState<string | null>(null);\n\n  const handleRoleChange = async (userId: string, newRole: UserRole) => {\n    try {\n      setUpdatingUserId(userId);\n      \n      const { error } = await supabase\n        .from('user_roles')\n        .upsert({ \n          user_id: userId, \n          role: newRole \n        }, { \n          onConflict: 'user_id' \n        });\n      \n      if (error) throw error;\n      \n      toast({\n        title: t('common:success'),\n        description: t('admin:roleUpdated')\n      });\n      \n      onRoleUpdated();\n    } catch (error) {\n      console.error('Error updating role:', error);\n      toast({\n        title: t('common:error'),\n        description: t('admin:failedToUpdateRole'),\n        variant: \"destructive\"\n      });\n    } finally {\n      setUpdatingUserId(null);\n    }\n  };\n\n  // Format date to a more readable format\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString(undefined, { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div>\n      <p className=\"text-sm text-muted-foreground mb-4\">\n        {t('admin:displayingUsers', { count: users.length })}\n      </p>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Email</TableHead>\n              <TableHead>{t('admin:role')}</TableHead>\n              <TableHead>{t('admin:zapTrips')}</TableHead>\n              <TableHead>{t('admin:zapOuts')}</TableHead>\n              <TableHead>{t('admin:zapRoads')}</TableHead>\n              <TableHead>{t('admin:createdAt')}</TableHead>\n              <TableHead className=\"text-right\">{t('admin:actions')}</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {users.map((user) => (\n              <TableRow key={user.id}>\n                <TableCell className=\"font-medium\">{user.email}</TableCell>\n                <TableCell>\n                  <span className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium\n                    ${user.role === 'admin' ? 'bg-purple-100 text-purple-800' : \n                      user.role === 'tier4' ? 'bg-indigo-100 text-indigo-800' :\n                      user.role === 'tier3' ? 'bg-green-100 text-green-800' : \n                      user.role === 'tier2' ? 'bg-blue-100 text-blue-800' : \n                      user.role === 'tier1' ? 'bg-yellow-100 text-yellow-800' : \n                      'bg-gray-100 text-gray-800'}`\n                  }>\n                    {user.role}\n                  </span>\n                </TableCell>\n                <TableCell>{user.zap_trip_count || 0}</TableCell>\n                <TableCell>{user.zap_out_count || 0}</TableCell>\n                <TableCell>{user.zap_road_count || 0}</TableCell>\n                <TableCell>{formatDate(user.created_at)}</TableCell>\n                <TableCell className=\"text-right\">\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                        <span className=\"sr-only\">{t('admin:openMenu')}</span>\n                        <MoreHorizontal className=\"h-4 w-4\" />\n                      </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                      <DropdownMenuLabel>{t('admin:actions')}</DropdownMenuLabel>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'nosubs')}\n                      >\n                        {updatingUserId === user.id && user.role === 'nosubs' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsNoSubscription')}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'tier1')}\n                      >\n                        {updatingUserId === user.id && user.role === 'tier1' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsTier1')}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'tier2')}\n                      >\n                        {updatingUserId === user.id && user.role === 'tier2' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsTier2')}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'tier3')}\n                      >\n                        {updatingUserId === user.id && user.role === 'tier3' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsTier3')}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'tier4')}\n                      >\n                        {updatingUserId === user.id && user.role === 'tier4' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsTier4')}\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        disabled={updatingUserId === user.id}\n                        onClick={() => handleRoleChange(user.id, 'admin')}\n                      >\n                        {updatingUserId === user.id && user.role === 'admin' ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : null}\n                        {t('admin:setAsAdmin')}\n                      </DropdownMenuItem>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem\n                        className=\"text-red-600\"\n                        onClick={() => onDeleteUser(user.id)}\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        {t('admin:deleteUser')}\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { Loader2, Image as ImageIcon, AlertCircle, Wand2, Languages } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst formSchema = z.object({\n  title_en: z.string().min(1, 'Title is required'),\n  content_en: z.string().min(1, 'Content is required'),\n  title_fr: z.string().optional(),\n  content_fr: z.string().optional(),\n  title_es: z.string().optional(),\n  content_es: z.string().optional(),\n  excerpt_en: z.string().optional(),\n  excerpt_fr: z.string().optional(),\n  excerpt_es: z.string().optional(),\n  image_url: z.string().url('Must be a valid URL').optional(),\n  category: z.string().optional(),\n  is_featured: z.boolean().optional(),\n  is_published: z.boolean().default(true),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport function BlogForm() {\n  const { t } = useTranslation('admin');\n  const { toast } = useToast();\n  const navigate = useNavigate();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [useAIProcessing, setUseAIProcessing] = useState(false);\n  const [selectedLanguage, setSelectedLanguage] = useState<string>('en');\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      title_en: '',\n      content_en: '',\n      title_fr: '',\n      content_fr: '',\n      title_es: '',\n      content_es: '',\n      excerpt_en: '',\n      excerpt_fr: '',\n      excerpt_es: '',\n      image_url: '',\n      category: '',\n      is_featured: false,\n      is_published: true,\n    },\n  });\n\n  const onSubmit = async (values: FormValues) => {\n    try {\n      setIsSubmitting(true);\n      setError(null);\n\n      // Get user session\n      const { data: sessionData } = await supabase.auth.getSession();\n      const user = sessionData.session?.user;\n\n      if (!user) {\n        throw new Error('You must be logged in to create a blog post');\n      }\n\n      // Check if user has admin privileges\n      const { data: userRole, error: userRoleError } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', user.id)\n        .single();\n      \n      if (userRoleError) {\n        console.error('Error fetching user role:', userRoleError);\n        throw new Error('Could not verify admin permissions. Please try again.');\n      }\n      \n      // Only allow admin users to create blogs\n      if (!userRole?.role || userRole.role !== 'admin') {\n        throw new Error('You need admin permissions to create blog posts');\n      }\n\n      // Prepare blog data\n      const blogData = {\n        title_en: values.title_en,\n        content_en: useAIProcessing ? undefined : values.content_en,\n        title_fr: useAIProcessing ? undefined : values.title_fr || null,\n        content_fr: useAIProcessing ? undefined : values.content_fr || null,\n        title_es: useAIProcessing ? undefined : values.title_es || null,\n        content_es: useAIProcessing ? undefined : values.content_es || null,\n        excerpt_en: values.excerpt_en || null,\n        excerpt_fr: useAIProcessing ? undefined : values.excerpt_fr || null,\n        excerpt_es: useAIProcessing ? undefined : values.excerpt_es || null,\n        image_url: values.image_url || null,\n        category: values.category || null,\n        author_id: user.id,\n        is_featured: values.is_featured || false,\n        is_published: values.is_published,\n        published_at: values.is_published ? new Date().toISOString() : null,\n      };\n\n      // Insert blog post and get the created blog data with its ID\n      const { data: createdBlog, error: insertError } = await supabase\n        .from('blogs')\n        .insert(blogData)\n        .select('*')\n        .single();\n\n      if (insertError) {\n        throw insertError;\n      }\n\n      toast({\n        title: t('blogPostCreated'),\n        description: t('blogPostCreatedDescription'),\n      });\n\n      // Navigate to the blog edit page\n      navigate(`/admin/blog/${createdBlog.id}`);\n    } catch (err) {\n      console.error('Error creating blog post:', err);\n      setError(err instanceof Error ? err.message : 'An error occurred while creating the blog post');\n      toast({\n        title: t('error'),\n        description: err instanceof Error ? err.message : 'An error occurred while creating the blog post',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>{t('createBlogPost')}</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>{t('error')}</AlertTitle>\n            <AlertDescription>\n              {error}\n              <p className=\"mt-2\">{t('tryAgainOrContactAdmin')}</p>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"flex items-center justify-between pb-4 border-b\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch\n                  checked={useAIProcessing}\n                  onCheckedChange={setUseAIProcessing}\n                  id=\"ai-processing\"\n                />\n                <label\n                  htmlFor=\"ai-processing\"\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex items-center gap-2\"\n                >\n                  <Wand2 className=\"h-4 w-4\" />\n                  Use AI Processing\n                </label>\n              </div>\n\n              {!useAIProcessing && (\n                <div className=\"flex items-center space-x-2\">\n                  <Languages className=\"h-4 w-4\" />\n                  <Select\n                    value={selectedLanguage}\n                    onValueChange={setSelectedLanguage}\n                  >\n                    <SelectTrigger className=\"w-[180px]\">\n                      <SelectValue placeholder=\"Select Language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"en\">English</SelectItem>\n                      <SelectItem value=\"fr\">French</SelectItem>\n                      <SelectItem value=\"es\">Spanish</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n            </div>\n\n            {/* English Fields - Always visible */}\n            <div className={selectedLanguage === 'en' || useAIProcessing ? 'block' : 'hidden'}>\n              <FormField\n                control={form.control}\n                name=\"title_en\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title (English)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter title in English\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"content_en\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Content (English)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Write your blog content in English\"\n                        className=\"min-h-[200px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"excerpt_en\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Excerpt (English)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Write a short excerpt in English\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* French Fields */}\n            {!useAIProcessing && selectedLanguage === 'fr' && (\n              <div>\n                <FormField\n                  control={form.control}\n                  name=\"title_fr\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title (French)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter title in French\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"content_fr\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Content (French)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Write your blog content in French\"\n                          className=\"min-h-[200px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"excerpt_fr\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Excerpt (French)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Write a short excerpt in French\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Spanish Fields */}\n            {!useAIProcessing && selectedLanguage === 'es' && (\n              <div>\n                <FormField\n                  control={form.control}\n                  name=\"title_es\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title (Spanish)</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter title in Spanish\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"content_es\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Content (Spanish)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Write your blog content in Spanish\"\n                          className=\"min-h-[200px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"excerpt_es\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Excerpt (Spanish)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Write a short excerpt in Spanish\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Common Fields */}\n            <FormField\n              control={form.control}\n              name=\"image_url\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Image URL</FormLabel>\n                  <FormControl>\n                    <div className=\"flex gap-2\">\n                      <Input placeholder=\"Enter image URL\" {...field} />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => {/* Add image upload handler */}}\n                      >\n                        <ImageIcon className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Travel, Food, Technology\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center\">\n              <FormField\n                control={form.control}\n                name=\"is_featured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                    <FormControl>\n                      <input\n                        type=\"checkbox\"\n                        checked={field.value}\n                        onChange={field.onChange}\n                        className=\"w-4 h-4\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">{t('featuredPost')}</FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"is_published\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2 space-y-0\">\n                    <FormControl>\n                      <input\n                        type=\"checkbox\"\n                        checked={field.value}\n                        onChange={field.onChange}\n                        className=\"w-4 h-4\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"font-normal\">{t('publishImmediately')}</FormLabel>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isSubmitting}\n            >\n              {isSubmitting ? (\n                <>\n                  {useAIProcessing ? t('creatingAndProcessing') : t('creatingBlogPost')}\n                  <Loader2 className=\"ml-2 h-4 w-4 animate-spin\" />\n                </>\n              ) : (\n                useAIProcessing ? t('createWithAIProcessing') : t('createBlogPost')\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n} ","import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { toast } from 'sonner';\nimport { useAdminAuth } from '@/hooks/useAdminAuth';\nimport { useNavigate } from 'react-router-dom';\n\ntype EventType = 'hotel' | 'restaurant' | 'bar' | 'event' | 'activity' | 'other';\n\ninterface EventSuggestion {\n  id: string;\n  title: string;\n  content: string;\n  type: EventType;\n  location: string;\n  business_name: string;\n  url_link?: string | null;\n  url_placeholder_image: string;\n  priority: number;\n  expiration_date?: string | null;\n}\n\n// Define the required fields for creating/updating an event\ntype EventFormData = Omit<EventSuggestion, 'id'>;\n\ninterface EventFormProps {\n  event?: EventSuggestion;\n  onSuccess?: () => void;\n}\n\nexport function EventForm({ event, onSuccess }: EventFormProps) {\n  const { t } = useTranslation(['admin', 'common']);\n  const { isAdmin } = useAdminAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState<EventFormData>({\n    title: event?.title || '',\n    content: event?.content || '',\n    type: (event?.type as EventType) || 'restaurant',\n    location: event?.location || '',\n    business_name: event?.business_name || '',\n    url_link: event?.url_link || '',\n    url_placeholder_image: event?.url_placeholder_image || '',\n    priority: event?.priority || 1,\n    expiration_date: event?.expiration_date || null,\n  });\n\n  useEffect(() => {\n    // Redirect non-admin users\n    if (!isAdmin) {\n      toast.error(t('common.accessDenied'));\n      navigate('/admin');\n    }\n  }, [isAdmin, navigate, t]);\n\n  const eventTypes: { value: EventType; label: string }[] = [\n    { value: 'hotel', label: 'Hotel' },\n    { value: 'restaurant', label: 'Restaurant' },\n    { value: 'bar', label: 'Bar' },\n    { value: 'event', label: 'Event' },\n    { value: 'activity', label: 'Activity' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const { name, value } = e.target;\n    let processedValue: string | number = value;\n    \n    // Handle number inputs\n    if (name === 'priority') {\n      processedValue = value === '' ? 1 : parseInt(value, 10);\n    }\n\n    setFormData((prev) => ({ ...prev, [name]: processedValue }));\n  };\n\n  const handleSelectChange = (name: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!isAdmin) {\n      toast.error(t('common.accessDenied'));\n      return;\n    }\n\n    // Validate image URL\n    if (formData.url_placeholder_image) {\n      try {\n        new URL(formData.url_placeholder_image);\n      } catch (error) {\n        toast.error(t('admin.invalidImageUrl'));\n        return;\n      }\n    }\n\n    setLoading(true);\n\n    try {\n      // Prepare the data\n      const dataToSend = {\n        ...formData,\n        url_link: formData.url_link || null, // Convert empty string to null\n        priority: Number(formData.priority), // Ensure priority is a number\n      };\n\n      if (event?.id) {\n        // Update existing event\n        const { data, error } = await supabase\n          .from('event_suggestion')\n          .update(dataToSend)\n          .eq('id', event.id)\n          .select();\n\n        if (error) {\n          throw error;\n        }\n        \n        toast.success(t('admin.eventUpdated'));\n      } else {\n        // Create new event\n        const { data, error } = await supabase\n          .from('event_suggestion')\n          .insert([dataToSend])\n          .select();\n\n        if (error) {\n          throw error;\n        }\n\n        toast.success(t('admin.eventCreated'));\n      }\n\n      onSuccess?.();\n      if (!event?.id) {\n        // Reset form for new events\n        setFormData({\n          title: '',\n          content: '',\n          type: 'restaurant',\n          location: '',\n          business_name: '',\n          url_link: '',\n          url_placeholder_image: '',\n          priority: 1,\n          expiration_date: null,\n        });\n      }\n    } catch (error: any) {\n      toast.error(\n        error.message || error.details || error.hint || t('admin.failedToSaveEvent')\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isAdmin) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {event?.id ? t('admin.editEvent') : t('admin.createEvent')}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {/* Title */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">{t('admin.eventTitle')} *</Label>\n              <Input\n                id=\"title\"\n                name=\"title\"\n                value={formData.title}\n                onChange={handleChange}\n                required\n                placeholder={t('admin.enterEventTitle')}\n              />\n            </div>\n\n            {/* Business Name */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"business_name\">{t('admin.businessName')} *</Label>\n              <Input\n                id=\"business_name\"\n                name=\"business_name\"\n                value={formData.business_name}\n                onChange={handleChange}\n                required\n                placeholder={t('admin.enterBusinessName')}\n              />\n            </div>\n\n            {/* Type */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">{t('admin.eventType')} *</Label>\n              <Select\n                value={formData.type}\n                onValueChange={(value) => handleSelectChange('type', value)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder={t('admin.selectType')} />\n                </SelectTrigger>\n                <SelectContent>\n                  {eventTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {t(`admin.eventTypes.${type.value}`)}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Location */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"location\">{t('admin.location')} *</Label>\n              <Input\n                id=\"location\"\n                name=\"location\"\n                value={formData.location}\n                onChange={handleChange}\n                required\n                placeholder={t('admin.enterLocation')}\n              />\n            </div>\n\n            {/* Priority */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">{t('admin.priority')}</Label>\n              <Input\n                id=\"priority\"\n                name=\"priority\"\n                type=\"number\"\n                min=\"1\"\n                max=\"10\"\n                value={formData.priority}\n                onChange={handleChange}\n                placeholder={t('admin.enterPriority')}\n              />\n            </div>\n\n            {/* Expiration Date */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"expiration_date\">{t('admin.expirationDate')}</Label>\n              <Input\n                id=\"expiration_date\"\n                name=\"expiration_date\"\n                type=\"datetime-local\"\n                value={formData.expiration_date ? formData.expiration_date.slice(0, 16) : ''}\n                onChange={handleChange}\n                min={new Date().toISOString().slice(0, 16)}\n                placeholder={t('admin.selectExpirationDate')}\n              />\n              <p className=\"text-sm text-gray-500\">{t('admin.expirationDateHelp')}</p>\n            </div>\n\n            {/* URL Link */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"url_link\">{t('admin.urlLink')}</Label>\n              <Input\n                id=\"url_link\"\n                name=\"url_link\"\n                value={formData.url_link || ''}\n                onChange={handleChange}\n                placeholder={t('admin.enterUrlLink')}\n              />\n            </div>\n\n            {/* Image URL */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"url_placeholder_image\">{t('admin.imageUrl')} *</Label>\n              <Input\n                id=\"url_placeholder_image\"\n                name=\"url_placeholder_image\"\n                value={formData.url_placeholder_image}\n                onChange={handleChange}\n                required\n                placeholder={t('admin.enterImageUrl')}\n              />\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">{t('admin.content')} *</Label>\n            <Textarea\n              id=\"content\"\n              name=\"content\"\n              value={formData.content}\n              onChange={handleChange}\n              required\n              placeholder={t('admin.enterContent')}\n              className=\"min-h-[100px]\"\n            />\n          </div>\n\n          {/* Preview Image */}\n          {formData.url_placeholder_image && (\n            <div className=\"space-y-2\">\n              <Label>{t('admin.imagePreview')}</Label>\n              <div className=\"relative aspect-[16/10] overflow-hidden rounded-lg\">\n                <img\n                  src={formData.url_placeholder_image}\n                  alt={formData.title}\n                  className=\"w-full h-full object-cover\"\n                  onError={(e) => {\n                    const img = e.target as HTMLImageElement;\n                    img.src = '/placeholder-image.jpg';\n                  }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full md:w-auto\"\n            disabled={loading}\n          >\n            {loading ? (\n              <>\n                <span className=\"mr-2\">{t('common.loading')}</span>\n                <span className=\"animate-spin\">⏳</span>\n              </>\n            ) : event?.id ? (\n              t('admin.updateEvent')\n            ) : (\n              t('admin.createEvent')\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n} "],"names":["supabase","createClient","UserSearchBar","searchTerm","setSearchTerm","onRefresh","isLoading","t","useTranslation","className","children","jsxs","jsx","Search","Input","type","placeholder","value","onChange","e","target","Button","onClick","variant","disabled","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","UserTable","users","onRoleUpdated","onDeleteUser","toast","useToast","updatingUserId","setUpdatingUserId","useState","deletingUserId","setDeletingUserId","handleRoleChange","async","userId","newRole","error","from","upsert","user_id","role","onConflict","title","description","formatDate","dateString","Date","toLocaleDateString","year","month","day","hour","minute","count","length","Table","TableHeader","TableRow","TableHead","TableBody","map","user","TableCell","email","zap_trip_count","zap_out_count","zap_road_count","created_at","DropdownMenu","DropdownMenuTrigger","asChild","MoreHorizontal","DropdownMenuContent","align","DropdownMenuLabel","DropdownMenuSeparator","DropdownMenuItem","id","Loader2","Trash2","formSchema","z.object","title_en","z.string","min","content_en","title_fr","optional","content_fr","title_es","content_es","excerpt_en","excerpt_fr","excerpt_es","image_url","url","category","is_featured","z.boolean","is_published","default","BlogForm","navigate","useNavigate","isSubmitting","setIsSubmitting","setError","useAIProcessing","setUseAIProcessing","selectedLanguage","setSelectedLanguage","form","useForm","resolver","zodResolver","defaultValues","Card","CardHeader","CardTitle","CardContent","Alert","AlertCircle","AlertTitle","AlertDescription","Form","onSubmit","handleSubmit","values","data","sessionData","auth","getSession","session","Error","userRole","userRoleError","select","eq","single","blogData","author_id","published_at","toISOString","createdBlog","insertError","insert","err","message","Switch","checked","onCheckedChange","htmlFor","Wand2","Languages","Select","onValueChange","SelectTrigger","SelectValue","SelectContent","SelectItem","FormField","control","name","render","field","FormItem","FormLabel","FormControl","FormMessage","Textarea","size","ImageIcon","Fragment","EventForm","event","onSuccess","isAdmin","useAdminAuth","loading","setLoading","formData","setFormData","content","location","business_name","url_link","url_placeholder_image","priority","expiration_date","useEffect","handleChange","processedValue","parseInt","prev","preventDefault","URL","dataToSend","Number","update","success","details","hint","Label","required","handleSelectChange","label","max","slice","src","alt","onError"],"mappings":"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"}