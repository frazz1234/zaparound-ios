{"version":3,"file":"components-languagerouter.tsx.CHVsY7fH.js","sources":["../../../../src/i18n.ts","../../../../src/components/LanguageRouter.tsx"],"sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\n\n// Supported languages\nexport const SUPPORTED_LANGUAGES = ['en', 'fr', 'es'];\nconst DEFAULT_LANGUAGE = 'en';\n\n// Custom language detector for URL-based language detection\nconst urlLanguageDetector = {\n  name: 'url',\n  lookup: () => {\n    const pathSegments = window.location.pathname.split('/').filter(Boolean);\n    const firstSegment = pathSegments[0];\n    return SUPPORTED_LANGUAGES.includes(firstSegment) ? firstSegment : undefined;\n  },\n  cacheUserLanguage: () => {},\n};\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    backend: {\n      loadPath: '/locales/{{lng}}/{{ns}}.json',\n    },\n    fallbackLng: DEFAULT_LANGUAGE,\n    supportedLngs: SUPPORTED_LANGUAGES,\n    ns: [\n      'navigation',\n      'trip',\n      'home',\n      'pricing',\n      'about',\n      'auth',\n      'common',\n      'footer',\n      'profile',\n      'languageSelector',\n      'notFound',\n      'contact',\n      'blog',\n      'admin',\n      'community',\n      'legal',\n      'cookies',\n      'dashboard',\n      'faq',\n      'currency',\n      'survey',\n      'zapbooking',\n      'travelFlight',\n      'unsubscribe'\n    ],\n    defaultNS: 'common',\n    detection: {\n      order: ['url', 'localStorage', 'navigator'],\n      caches: ['localStorage'],\n      lookupFromPathIndex: 0,\n    },\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n; ","import { useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { SUPPORTED_LANGUAGES } from '@/i18n';\n\ninterface LanguageRouterProps {\n  children: React.ReactNode;\n}\n\n// Paths that should not be redirected with language prefix\nconst EXCLUDED_PATHS = [\n  '/sitemap.xml',\n  '/sitemap-news.xml',\n  '/sitemap-pages.xml',\n  '/sitemap-posts.xml',\n  '/sitemap-index.xml',\n  '/robots.txt',\n  '/manifest.json',\n  '/favicon.ico',\n  '/api/',\n];\n\n// File extensions that should not be redirected\nconst EXCLUDED_EXTENSIONS = [\n  '.xml',\n  '.txt',\n  '.json',\n  '.ico',\n  '.png',\n  '.webp',\n  '.jpg',\n  '.jpeg',\n  '.gif',\n  '.svg',\n  '.css',\n  '.js',\n];\n\nexport function LanguageRouter({ children }: LanguageRouterProps) {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { i18n } = useTranslation();\n\n  useEffect(() => {\n    // Check if the current path should be excluded from language redirection\n    const shouldExcludePath = EXCLUDED_PATHS.some(path => \n      location.pathname === path || location.pathname.startsWith(path)\n    );\n\n    // Check if the path ends with any excluded extension\n    const hasExcludedExtension = EXCLUDED_EXTENSIONS.some(ext => \n      location.pathname.toLowerCase().endsWith(ext)\n    );\n\n    if (shouldExcludePath || hasExcludedExtension) {\n      return;\n    }\n\n    const pathSegments = location.pathname.split('/').filter(Boolean);\n    const firstSegment = pathSegments[0];\n\n    // If the first segment is a valid language code\n    if (SUPPORTED_LANGUAGES.includes(firstSegment)) {\n      // Update i18n language if it's different\n      if (i18n.language !== firstSegment) {\n        i18n.changeLanguage(firstSegment);\n      }\n    } else {\n      // If no language in URL, redirect to default language\n      // Preserve the hash parameters\n      const newPath = `/${i18n.language}${location.pathname}${location.hash}`;\n      navigate(newPath, { replace: true });\n    }\n  }, [location.pathname, location.hash, i18n, navigate]);\n\n  return <>{children}</>;\n} "],"names":["SUPPORTED_LANGUAGES","i18n","use","Backend","LanguageDetector","initReactI18next","init","backend","loadPath","fallbackLng","supportedLngs","ns","defaultNS","detection","order","caches","lookupFromPathIndex","interpolation","escapeValue","EXCLUDED_PATHS","EXCLUDED_EXTENSIONS","LanguageRouter","children","location","useLocation","navigate","useNavigate","useTranslation","useEffect","shouldExcludePath","some","pathname","path","startsWith","hasExcludedExtension","toLowerCase","endsWith","ext","firstSegment","split","filter","Boolean","includes","language","changeLanguage","newPath","hash","replace"],"mappings":"oaAMO,MAAMA,EAAsB,CAAC,KAAM,KAAM,MAchDC,EACGC,IAAIC,GACJD,IAAIE,GACJF,IAAIG,GACJC,KAAK,CACJC,QAAS,CACPC,SAAU,gCAEZC,YArBqB,KAsBrBC,cAAeV,EACfW,GAAI,CACF,aACA,OACA,OACA,UACA,QACA,OACA,SACA,SACA,UACA,mBACA,WACA,UACA,OACA,QACA,YACA,QACA,UACA,YACA,MACA,WACA,SACA,aACA,eACA,eAEFC,UAAW,SACXC,UAAW,CACTC,MAAO,CAAC,MAAO,eAAgB,aAC/BC,OAAQ,CAAC,gBACTC,oBAAqB,GAEvBC,cAAe,CACbC,aAAa,KCrDnB,MAAMC,EAAiB,CACrB,eACA,oBACA,qBACA,qBACA,qBACA,cACA,iBACA,eACA,SAIIC,EAAsB,CAC1B,OACA,OACA,QACA,OACA,OACA,QACA,OACA,QACA,OACA,OACA,OACA,OAGc,SAAAC,GAAeC,SAAEA,IAC/B,MAAMC,EAAWC,IACXC,EAAWC,KACXzB,KAAEA,GAAS0B,IAkCjB,OAhCAC,EAAAA,WAAU,KAER,MAAMC,EAAoBV,EAAeW,SACvCP,EAASQ,WAAaC,GAAQT,EAASQ,SAASE,WAAWD,KAIvDE,EAAuBd,EAAoBU,SAC/CP,EAASQ,SAASI,cAAcC,SAASC,KAG3C,GAAIR,GAAqBK,EACvB,OAGF,MACMI,EADef,EAASQ,SAASQ,MAAM,KAAKC,OAAOC,SACvB,GAG9B,GAAAzC,EAAoB0C,SAASJ,GAE3BrC,EAAK0C,WAAaL,GACpBrC,EAAK2C,eAAeN,OAEjB,CAGC,MAAAO,EAAU,IAAI5C,EAAK0C,WAAWpB,EAASQ,WAAWR,EAASuB,OACjErB,EAASoB,EAAS,CAAEE,SAAS,GAAM,IAEpC,CAACxB,EAASQ,SAAUR,EAASuB,KAAM7C,EAAMwB,sBAElCH,YACZ"}