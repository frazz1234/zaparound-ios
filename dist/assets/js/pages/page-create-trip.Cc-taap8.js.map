{"version":3,"file":"page-create-trip.Cc-taap8.js","sources":["../../../../src/pages/create-trip.tsx"],"sourcesContent":["import React, { useState, useCallback, memo, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCreateTrip } from \"@/hooks/useCreateTrip\";\nimport { AnimatePresence } from 'framer-motion';\nimport type { DateRange } from \"react-day-picker\";\nimport { LocationDetails, HeroProps } from '@/components/subtrip/subtrip-types';\n\ninterface CreateTripProps extends HeroProps {\n  embedded?: boolean;\n}\n\nimport { supabase } from \"@/integrations/supabase/client\";\n\n// Import section components\nimport ActivitySelection from '@/components/subtrip/subtrip-sections/ActivitySelection';\nimport CalendarSelection from '@/components/subtrip/subtrip-sections/CalendarSelection';\nimport LocationPicker from '@/components/subtrip/subtrip-sections/LocationPicker';\nimport ZapAnimation from '@/components/subtrip/subtrip-sections/ZapAnimation';\nimport TripInterests from '@/components/subtrip/subtrip-sections/TripInterests';\nimport TinderOptions from '@/components/subtrip/subtrip-sections/TinderOptions';\nimport TinderLocationBudget from '@/components/subtrip/subtrip-sections/TinderLocationBudget';\nimport TravelLogistics from '@/components/subtrip/subtrip-sections/TravelLogistics';\nimport AccommodationSelector from '@/components/subtrip/subtrip-sections/AccommodationSelector';\nimport PeopleBudget from '@/components/subtrip/subtrip-sections/PeopleBudget';\nimport RoadTripVehicle from '@/components/subtrip/subtrip-sections/RoadTripVehicle';\nimport RoadTripLocations from '@/components/subtrip/subtrip-sections/RoadTripLocations';\nimport RoadTripDetails from '@/components/subtrip/subtrip-sections/RoadTripDetails';\nimport RoadTripInterests from '@/components/subtrip/subtrip-sections/RoadTripInterests';\nimport PetQuestion from '@/components/subtrip/subtrip-sections/PetQuestion';\nimport ActivityTimeSelector from '@/components/subtrip/subtrip-sections/ActivityTimeSelector';\nimport StepIndicator from '@/components/subtrip/subtrip-sections/StepIndicator';\n\n// Import dialog components\nimport { AuthModal } from \"@/components/auth/AuthModal\";\nimport { UpgradeModal } from \"@/components/UpgradeModal\";\nimport CustomActivityDialog from '@/components/subtrip/subtrip-dialogs/CustomActivityDialog';\nimport LoadingDialog from '@/components/subtrip/subtrip-dialogs/LoadingDialog';\nimport { FreeTripDialog } from '@/components/subtrip/subtrip-dialogs/FreeTripDialog';\nimport ProfileCreationDialog from '@/components/subtrip/subtrip-dialogs/ProfileCreationDialog';\n\n// Import helper functions\nimport { countryCurrencyMap } from '@/components/subtrip/subtrip-utils/helpers';\nimport useTranslatedData from '@/components/subtrip/subtrip-utils/data';\nimport { validateFreeTrip, recordFreeTrip, getTripTypeFromActivity } from '@/components/subtrip/subtrip-utils/freeTripValidation';\n\n// Add new imports\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from 'framer-motion';\nimport { PencilLine, ChevronLeft } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from \"@/components/ui/card\";\n\nconst pageVariants = {\n  initial: { opacity: 0, y: 20 },\n  animate: { opacity: 1, y: 0 },\n  exit: { opacity: 0, y: -20 }\n};\n\nconst CreateTrip = memo(({ session, onTripCreated, embedded = false }: CreateTripProps): JSX.Element => {\n    const { t } = useTranslation('home');\n    const { currencies } = useTranslatedData();\n    const { toast } = useToast();\n    const { createTrip, isLoading: isCreatingTripFromHook } = useCreateTrip();\n    const navigate = useNavigate();\n    const { lang } = useParams();\n    const MAX_SELECTIONS = 3;\n    const MAX_TRIP_INTERESTS = 15; // Maximum number of interests that can be selected\n    \n    // Ref for focusing on step content\n    const stepContentRef = useRef<HTMLDivElement>(null);\n  \n    // Utility function to scroll to top\n    const scrollToTop = () => {\n      if (embedded) {\n        // When embedded, dispatch a custom event to notify the parent component\n        window.dispatchEvent(new CustomEvent('trip-step-changed', { \n          detail: { step: currentStep } \n        }));\n      } else {\n        // When not embedded, scroll to top of page\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    };\n\n    // Function to focus on step content\n    const focusOnStepContent = () => {\n      if (stepContentRef.current) {\n        // Focus on the step content container\n        stepContentRef.current.focus();\n        // Scroll the step content into view if needed\n        stepContentRef.current.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n      }\n    };\n  \n    // State variables\n    const [location, setLocation] = useState<string>(\"\");\n    const [coordinates, setCoordinates] = useState<[number, number]>([0, 0]);\n    const [isMobile, setIsMobile] = useState(false);\n    const [currentStep, setCurrentStep] = useState<'activity' | 'location-picker' | 'tinder-options' | 'calendar' | 'trip-interests' | 'travel-logistics' | 'accommodation' | 'travel-details' | 'road-trip-locations' | 'road-trip-vehicle' | 'road-trip-interests' | 'tinder-location-budget' | 'people-budget' | 'road-trip-details' | 'pet-question' | 'title-description' | 'activity-time'>('activity');\n    const [selectedActivity, setSelectedActivity] = useState<'plan-trip' | 'tinder-date' | 'friends' | 'roadtrip' | null>(null);\n    const [selectedTinderOptions, setSelectedTinderOptions] = useState<string[]>([]);\n    const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined);\n    const [dateRange, setDateRange] = useState<DateRange | undefined>();\n    const [customActivityDialogOpen, setCustomActivityDialogOpen] = useState(false);\n    const [customActivity, setCustomActivity] = useState(\"\");\n    const [customActivities, setCustomActivities] = useState<string[]>([]);\n    const [selectedTripInterests, setSelectedTripInterests] = useState<string[]>([]);\n    const [departureLocation, setDepartureLocation] = useState<string>(\"\");\n    const [departureCoordinates, setDepartureCoordinates] = useState<[number, number]>([0, 0]);\n    const [transportMode, setTransportMode] = useState<string | null>(null);\n    const [isElectricCar, setIsElectricCar] = useState<boolean>(false);\n    const [isCarpool, setIsCarpool] = useState<boolean>(false);\n    const [isLocating, setIsLocating] = useState(false);\n    const [accommodation, setAccommodation] = useState<string | null>(null);\n    const [adultCount, setAdultCount] = useState<number>(1);\n    const [childCount, setChildCount] = useState<number>(0);\n    const [maxBudget, setMaxBudget] = useState<string>(\"\");\n    const [isCreatingTrip, setIsCreatingTrip] = useState(false);\n    const [showZapAnimation, setShowZapAnimation] = useState(false);\n    const [zapAnimationType, setZapAnimationType] = useState<'ZAPTRIP' | 'ZAPOUT' | 'ZAPROAD'>('ZAPTRIP');\n      const [showAuthModal, setShowAuthModal] = useState(false);\n  const [showProfileCreationDialog, setShowProfileCreationDialog] = useState(false);\n  const [showUpgradeModal, setShowUpgradeModal] = useState(false);\n    const [tinderLocation, setTinderLocation] = useState<string>(\"\");\n    const [tinderCoordinates, setTinderCoordinates] = useState<[number, number]>([0, 0]);\n    const [minBudget, setMinBudget] = useState<string>(\"\");\n    const [isTinderLocating, setIsTinderLocating] = useState(false);\n    const [isCreatingTinderDate, setIsCreatingTinderDate] = useState(false);\n    const [selectedCurrency, setSelectedCurrency] = useState<string>(\"USD\");\n    const [currencySymbol, setCurrencySymbol] = useState<string>(\"$\");\n    const [isCreatingFriendActivity, setIsCreatingFriendActivity] = useState(false);\n    const [startLocation, setStartLocation] = useState<string>(\"\");\n    const [startCoordinates, setStartCoordinates] = useState<[number, number]>([0, 0]);\n    const [intermediateLocations, setIntermediateLocations] = useState<Array<{name: string, coordinates: [number, number]}>>([]);\n    const [endLocation, setEndLocation] = useState<string>(\"\");\n    const [endCoordinates, setEndCoordinates] = useState<[number, number]>([0, 0]);\n    const [isStartLocating, setIsStartLocating] = useState(false);\n    const [isEndLocating, setIsEndLocating] = useState(false);\n    const [roadTripVehicleType, setRoadTripVehicleType] = useState<'car' | 'electric-car' | 'bike' | 'bicycle' | 'rv' | null>(null);\n    const [roadTripAdults, setRoadTripAdults] = useState<number>(1);\n    const [roadTripKids, setRoadTripKids] = useState<number>(0);\n    const [hasPets, setHasPets] = useState<boolean | null>(null);\n    const [expandedCategory, setExpandedCategory] = useState<string | null>(null);\n    const [selectedRoadTripInterests, setSelectedRoadTripInterests] = useState<string[]>([]);\n  \n    // Background image state\n    const [backgroundImage, setBackgroundImage] = useState<string>(\"\");\n  \n    // Add new state for title and description\n    const [title, setTitle] = useState<string>(\"\");\n    const [personalDescription, setPersonalDescription] = useState<string>(\"\");\n  \n    // Add new state for activity times\n    const [selectedActivityTimes, setSelectedActivityTimes] = useState<string[]>([]);\n  \n    // Add new state for showBudget\n    const [showBudget, setShowBudget] = useState<boolean>(false);\n  \n    // Add new state for free trip validation\n    const [showFreeTripDialog, setShowFreeTripDialog] = useState(false);\n    const [freeTripStatus, setFreeTripStatus] = useState<{\n      can_use: boolean;\n      remaining: number | null;\n      next_reset: string | null;\n      message: string;\n    } | null>(null);\n  \n    // Select background image on mount\n    useEffect(() => {\n      const desktopImages = ['/zaparound-uploads/create-trip1.webp', '/zaparound-uploads/create-trip1.webp'];\n      const mobileImages = ['/zaparound-uploads/create-trip2.webp', '/zaparound-uploads/create-trip2.webp'];\n      \n      const randomIndex = Math.floor(Math.random() * (isMobile ? mobileImages.length : desktopImages.length));\n      const selectedImage = isMobile ? mobileImages[randomIndex] : desktopImages[randomIndex];\n      \n      setBackgroundImage(selectedImage);\n    }, [isMobile]);\n    // Detect mobile device once on mount\n    useEffect(() => {\n      const checkMobile = () => {\n        const mobile = window.innerWidth < 768;\n        setIsMobile(mobile);\n        return mobile;\n      };\n      \n      const isMobileDevice = checkMobile();\n      \n      let resizeTimer: number;\n      const handleResize = () => {\n        clearTimeout(resizeTimer);\n        resizeTimer = window.setTimeout(() => {\n          checkMobile();\n        }, 100);\n      };\n      \n      window.addEventListener('resize', handleResize);\n      return () => {\n        window.removeEventListener('resize', handleResize);\n        clearTimeout(resizeTimer);\n      };\n    }, []);\n\n    // Effect to focus on step content when step changes\n    useEffect(() => {\n      if (embedded) {\n        // Small delay to ensure the new step content is rendered\n        const timer = setTimeout(focusOnStepContent, 150);\n        return () => clearTimeout(timer);\n      }\n    }, [currentStep, embedded]);\n  \n    const handleSearch = () => {\n      if (location && coordinates) {\n        setCurrentStep('activity');\n      }\n    };\n  \n    const handleLocationChange = (newLocation: string, newCoordinates: [number, number]) => {\n      setLocation(newLocation);\n      setCoordinates(newCoordinates);\n    };\n  \n    const handleLocationSelect = (newLocation: string, newCoordinates: [number, number]) => {\n      setLocation(newLocation);\n      setCoordinates(newCoordinates);\n    };\n  \n    const handleActivitySelect = (activity: 'plan-trip' | 'tinder-date' | 'friends' | 'roadtrip') => {\n      setSelectedActivity(activity);\n    };\n  \n    const handleTripInterestSelect = (interestId: string) => {\n      setSelectedTripInterests(prev => {\n        // If already selected, remove it\n        if (prev.includes(interestId)) {\n          return prev.filter(id => id !== interestId);\n        }\n        \n        // If at max selections, show toast and don't add\n        if (prev.length >= MAX_TRIP_INTERESTS) {\n          toast({\n            title: t('interests.maxSelectionsReached'),\n            description: t('interests.maxSelectionsDescription', { max: MAX_TRIP_INTERESTS }),\n            variant: \"destructive\"\n          });\n          return prev;\n        }\n        \n        // Add new selection\n        return [...prev, interestId];\n      });\n    };\n  \n    const handleRoadTripInterestSelect = (interestId: string) => {\n      setSelectedRoadTripInterests(prev => {\n        if (prev.includes(interestId)) {\n          return prev.filter(id => id !== interestId);\n        }\n        return [...prev, interestId];\n      });\n    };\n  \n    const handleTinderOptionSelect = (optionId: string) => {\n      setSelectedTinderOptions(prev => {\n        if (prev.includes(optionId)) {\n          // Remove if already selected\n          return prev.filter(id => id !== optionId);\n        } else if (prev.length < MAX_SELECTIONS) {\n          // Add if under the limit\n          return [...prev, optionId];\n        }\n        return prev;\n      });\n    };\n  \n    const handleActivityTimeSelect = (timeId: string) => {\n      setSelectedActivityTimes(prev => {\n        if (prev.includes(timeId)) {\n          return prev.filter(id => id !== timeId);\n        }\n        return [...prev, timeId];\n      });\n    };\n  \n    const handleDateSelect = useCallback((value: Date | DateRange | undefined) => {\n      if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n        // For tinder date and friends activity, we expect a single date\n        setSelectedDate(value as Date);\n      } else {\n        // For trip planning, we expect a date range\n        setDateRange(value as DateRange);\n      }\n    }, [selectedActivity]);\n  \n    const handleNext = (activityId?: 'plan-trip' | 'tinder-date' | 'friends' | 'roadtrip') => {\n      console.log('handleNext called with activityId:', activityId);\n      scrollToTop();\n      \n      // Use the passed activityId or fall back to selectedActivity state\n      const currentActivity = activityId || selectedActivity;\n      \n      if (currentActivity === 'plan-trip') {\n        console.log('ZAPTRIP');\n        setZapAnimationType('ZAPTRIP');\n        setShowZapAnimation(true);\n        setTimeout(() => {\n          setShowZapAnimation(false);\n          setCurrentStep('title-description');\n        }, 1500);\n      } else if (currentActivity === 'tinder-date' || currentActivity === 'friends') {\n        setZapAnimationType('ZAPOUT');\n        setShowZapAnimation(true);\n        setTimeout(() => {\n          setShowZapAnimation(false);\n          setCurrentStep('title-description');\n        }, 1500);\n      } else if (currentActivity === 'roadtrip') {\n        setZapAnimationType('ZAPROAD');\n        setShowZapAnimation(true);\n        setTimeout(() => {\n          setShowZapAnimation(false);\n          setCurrentStep('title-description');\n        }, 1500);\n      }\n    };\n  \n    // Update handleTitleDescriptionContinue function\n    const handleTitleDescriptionContinue = () => {\n      if (!title.trim()) {\n        toast({\n          title: t('form.titleDescription.titleRequired'),\n          description: t('form.titleDescription.titleRequired'),\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Navigate to appropriate next step based on activity type\n      if (selectedActivity === 'plan-trip' || selectedActivity === 'roadtrip') {\n        setCurrentStep('pet-question');\n      } else if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n        // For ZapOut, go to pet question first\n        setCurrentStep('pet-question');\n      }\n    };\n\n    // Update PetQuestion component navigation\n    const handlePetQuestionContinue = (value: boolean) => {\n      setHasPets(value);\n      if (selectedActivity === 'plan-trip') {\n        setCurrentStep('location-picker');\n      } else if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n        setCurrentStep('tinder-options');\n      } else if (selectedActivity === 'roadtrip') {\n        setCurrentStep('calendar');\n      }\n    };\n\n    // Update TinderOptions navigation\n    const handleTinderOptionsContinue = () => {\n      scrollToTop();\n      setCurrentStep('calendar');\n    };\n\n    // Update CalendarSelection navigation for ZapOut\n    const handleCalendarContinue = () => {\n      scrollToTop();\n      if (selectedActivity === 'roadtrip') {\n        setCurrentStep('road-trip-vehicle');\n      } else if (selectedActivity === 'plan-trip') {\n        setCurrentStep('trip-interests');\n      } else if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n        setCurrentStep('activity-time');\n      }\n    };\n\n    // Update ActivityTimeSelector navigation\n    const handleActivityTimeContinue = () => {\n      scrollToTop();\n      setCurrentStep('tinder-location-budget');\n    };\n  \n    const handleContinue = async () => {\n      // Scroll to top\n      scrollToTop();\n  \n      // Check if user is logged in\n      if (!session) {\n        // Show auth modal if not logged in\n        setShowAuthModal(true);\n        return;\n      }\n\n      try {\n        // Check if user has a subscription\n        const { data: userRole } = await supabase\n          .from('user_roles')\n          .select('role')\n          .eq('user_id', session.user.id)\n          .single();\n\n        // If user has no subscription, validate free trip usage\n        if (userRole?.role === 'nosubs') {\n          const tripType = getTripTypeFromActivity(selectedActivity!);\n          if (!tripType) {\n            throw new Error('Invalid activity type');\n          }\n\n          const validationResult = await validateFreeTrip(tripType);\n          setFreeTripStatus(validationResult);\n\n          if (validationResult.remaining === 0) {\n            setShowFreeTripDialog(true);\n            return;\n          }\n        }\n\n        // User is logged in and can proceed with trip creation\n        setIsCreatingTrip(true);\n        \n        // Prepare trip data\n        const tripData: any = {\n          title: title || `Trip to ${location}`,\n          description: personalDescription || \"Edit your description\",\n          location: location,\n          coordinates: coordinates,\n          startDate: selectedActivity === 'tinder-date' || selectedActivity === 'friends' \n            ? selectedDate \n            : dateRange?.from,\n          endDate: selectedActivity === 'tinder-date' || selectedActivity === 'friends' \n            ? selectedDate \n            : dateRange?.to,\n          tripType: selectedActivity === 'plan-trip' \n            ? 'ZapTrip' \n            : selectedActivity === 'roadtrip' \n              ? 'ZapRoad' \n              : 'ZapOut',\n          adults: selectedActivity === 'roadtrip' ? roadTripAdults : adultCount,\n          kids: selectedActivity === 'roadtrip' ? roadTripKids : childCount,\n          transportationMode: transportMode || undefined,\n          accommodationType: accommodation || undefined,\n          budget: maxBudget || \"0\",\n          currency: selectedCurrency || \"USD\",\n          activityTimes: selectedActivityTimes\n        };\n        \n        // Add appropriate additional fields based on trip type\n        if (selectedActivity === 'plan-trip') {\n          // For ZapTrip\n          tripData.interests = selectedTripInterests;\n          tripData.hasPets = hasPets;\n          tripData.departureLocation = departureLocation;\n          tripData.departureCoordinates = departureCoordinates;\n        } else if (selectedActivity === 'roadtrip') {\n          // For ZapRoad\n          tripData.startingCity = startLocation;\n          tripData.startingCityCoordinates = startCoordinates;\n          tripData.endCity = endLocation;\n          tripData.endCityCoordinates = endCoordinates;\n          tripData.stopoverCities = intermediateLocations;\n          tripData.car_type = roadTripVehicleType || '';\n          tripData.has_electric_car = (roadTripVehicleType === 'electric-car') || (roadTripVehicleType === 'car' && isElectricCar === true);\n          tripData.has_pets = hasPets === true;\n          tripData.specialRequirements = \"\";\n          tripData.interests = selectedRoadTripInterests;\n        } else if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n          // For ZapOut\n          tripData.location = tinderLocation || location;\n          tripData.coordinates = tinderCoordinates.length ? tinderCoordinates : coordinates;\n          tripData.activityTypes = [...selectedTinderOptions, ...customActivities];\n          tripData.activityTimes = selectedActivityTimes;\n          tripData.minBudget = minBudget || \"0\";\n          tripData.maxBudget = maxBudget || \"100\";\n          tripData.currency = selectedCurrency;\n          tripData.currency_symbol = currencySymbol;\n          tripData.additionalNeeds = \"\";\n        }\n  \n        // Create the trip\n        const result = await createTrip(tripData);\n        \n        if (result && result[0] && result[0].id) {\n          // If user has no subscription, record the free trip usage\n          if (userRole?.role === 'nosubs') {\n            const tripType = getTripTypeFromActivity(selectedActivity!);\n            if (tripType) {\n              await recordFreeTrip(tripType, result[0].id);\n            }\n          }\n          \n          // Call onTripCreated callback if provided\n          onTripCreated?.();\n          \n          // Navigate to dashboard with language parameter\n          const currentLang = lang || 'en';\n          navigate(`/${currentLang}/dashboard`);\n        }\n      } catch (error) {\n        console.error('Error creating trip:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to create trip. Please try again.\"\n        });\n      } finally {\n        setIsCreatingTrip(false);\n      }\n    };\n  \n    // Function that runs when auth is successful\n    const handleAuthSuccess = () => {\n      // Scroll to top\n      scrollToTop();\n      \n      // Show profile creation dialog instead of directly continuing\n      setShowProfileCreationDialog(true);\n    };\n\n    // Function that runs when profile creation is complete\n    const handleProfileCreated = () => {\n      // Close the profile creation dialog\n      setShowProfileCreationDialog(false);\n      \n      // Add a quick 0.3 second delay for smooth transition\n      // This prevents the popups from overlapping and creates a smooth flow\n      setTimeout(() => {\n        // After profile creation, try continue again\n        handleContinue();\n      }, 300);\n    };\n  \n    const handleAddCustomActivity = () => {\n      if (customActivity.trim()) {\n        setCustomActivities(prev => [...prev, customActivity.trim()]);\n        setCustomActivity(\"\");\n        setCustomActivityDialogOpen(false);\n      }\n    };\n  \n    const handleTinderLocationChange = async (newLocation: string, newCoordinates: [number, number]) => {\n      setTinderLocation(newLocation);\n      setTinderCoordinates(newCoordinates);\n      \n      // Get country from coordinates using reverse geocoding\n      try {\n        const response = await fetch(\n          `https://api.mapbox.com/geocoding/v5/mapbox.places/${newCoordinates[1]},${newCoordinates[0]}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=country`\n        );\n        const data = await response.json();\n        \n        if (data.features && data.features[0]) {\n          const countryCode = data.features[0].properties.short_code?.toUpperCase();\n  \n          if (countryCode && countryCurrencyMap[countryCode]) {\n            setSelectedCurrency(countryCurrencyMap[countryCode].code);\n            setCurrencySymbol(countryCurrencyMap[countryCode].symbol);\n          }\n        }\n      } catch (error) {\n        console.error('Error getting country currency:', error);\n      }\n    };\n  \n    const handleCurrencyChange = (currency: string) => {\n      setSelectedCurrency(currency);\n      const selectedCurrencyData = currencies.find(c => c.value === currency);\n      if (selectedCurrencyData) {\n        setCurrencySymbol(selectedCurrencyData.symbol);\n      }\n    };\n  \n    // Add the tinder locate me function\n    const handleTinderLocateMe = () => {\n      setIsTinderLocating(true);\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords;\n            \n            // Use reverse geocoding to get location name\n            fetch(\n              `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=place`\n            )\n              .then((response) => response.json())\n              .then((data) => {\n                if (data.features && data.features[0]) {\n                  const placeName = data.features[0].place_name;\n                  setTinderLocation(placeName);\n                  setTinderCoordinates([longitude, latitude]);\n                }\n                \n                // Get country for currency - separate call with country type\n                fetch(\n                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=country`\n                )\n                  .then((response) => response.json())\n                  .then((data) => {\n                    if (data.features && data.features[0]) {\n                      const countryCode = data.features[0].properties.short_code?.toUpperCase();\n                      \n                      if (countryCode && countryCurrencyMap[countryCode]) {\n                        setSelectedCurrency(countryCurrencyMap[countryCode].code);\n                        setCurrencySymbol(countryCurrencyMap[countryCode].symbol);\n                      }\n                    }\n                  })\n                  .catch((error) => {\n                    console.error(\"Error getting country currency:\", error);\n                  });\n              })\n              .catch((error) => {\n                console.error(\"Error getting location:\", error);\n              })\n              .finally(() => {\n                setIsTinderLocating(false);\n              });\n          },\n          (error) => {\n            console.error(\"Error getting location:\", error);\n            setIsTinderLocating(false);\n          }\n        );\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        setIsTinderLocating(false);\n      }\n    };\n  \n    // Update PeopleBudget navigation\n    const handlePeopleBudgetContinue = () => {\n      scrollToTop();\n      setCurrentStep('title-description');\n    };\n  \n    // Update TinderLocationBudget navigation\n    const handleTinderLocationBudgetContinue = () => {\n      scrollToTop();\n      setCurrentStep('title-description');\n    };\n  \n    // Update RoadTripDetails navigation\n    const handleRoadTripDetailsContinue = () => {\n      scrollToTop();\n      setCurrentStep('title-description');\n    };\n  \n    return (\n      <div \n        className={cn(\n          \"relative w-full\",\n          embedded ? \"\" : \"min-h-screen\",\n          \"flex flex-col\",\n          // Conditional background based on embedded prop\n          embedded ? \"bg-transparent\" : \"bg-white\",\n          // Safe area insets\n          \"safe-top safe-bottom\"\n        )}\n        style={embedded ? undefined : { backgroundImage: `url(${backgroundImage})` }}\n      >\n        {!embedded && (\n          <div\n            className={cn(\n              \"absolute inset-0\",\n              \"bg-black/50 backdrop-blur-[2px]\",\n              \"z-1\"\n            )}\n          />\n        )}\n        \n        {/* Content container with higher z-index */}\n        <div className=\"relative z-10 flex-1 flex flex-col\">\n          <ZapAnimation \n            show={showZapAnimation} \n            type={zapAnimationType} \n          />\n          \n          <div className={cn(\n            \"container mx-auto flex-1\",\n            \"flex flex-col\",\n            \"px-2 sm:px-4 md:px-6\",\n            // Adjust padding based on screen size\n            \"pt-2 sm:pt-4\",\n            // Ensure content is centered\n            \"items-center justify-start\",\n            // Handle very small screens\n            \"min-h-[60vh]\",\n            // Safe area insets\n            \"safe-left safe-right\",\n            // Remove any potential margins\n            \"m-0\"\n          )}>\n            <div className={cn(\n              \"w-full max-w-5xl mx-auto\",\n              \"text-center z-10\",\n              \"flex flex-col flex-1\"\n            )}>\n              <AnimatePresence mode=\"popLayout\">\n                <div \n                  ref={stepContentRef}\n                  tabIndex={-1}\n                  className={cn(\n                    \"flex-1\",\n                    \"flex flex-col\",\n                    // Ensure content is centered\n                    \"items-center justify-center\",\n                    // Add some spacing\n                    \"gap-4\",\n                    // Handle overflow\n                    \"overflow-y-auto\",\n                    // Smooth scrolling\n                    \"scroll-smooth\",\n                    // Hide scrollbar but keep functionality\n                    \"scrollbar-none\",\n                    // Focus styles for accessibility\n                    \"focus:outline-none\"\n                  )}\n                >\n                  {currentStep === 'activity' && (\n                    <div className={cn(\n                      \"hero-card w-full\",\n                      \"bg-black/30 backdrop-blur-sm\",\n                      \"p-4 sm:p-6 rounded-xl\",\n                      \"my-2 sm:my-4\",\n                      \"min-h-[300px]\",\n                      \"flex flex-col items-center justify-center gap-4\"\n                    )}>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <ActivitySelection \n                        selectedActivity={selectedActivity}\n                        onSelectActivity={handleActivitySelect}\n                        onNext={handleNext}\n                        embedded={embedded}\n                      />\n                    </div>\n                  )}\n\n                  {currentStep === 'pet-question' && (\n                    <div className={cn(\n                      \"hero-card w-full\",\n                      \"bg-black/30 backdrop-blur-sm\",\n                      \"p-4 sm:p-6 rounded-xl\",\n                      \"my-2 sm:my-4\",\n                      \"flex flex-col items-center justify-center gap-4\"\n                    )}>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <PetQuestion\n                        selectedActivity={selectedActivity}\n                        onSetHasPets={handlePetQuestionContinue}\n                        onBack={() => {\n                          setCurrentStep('title-description');\n                          setHasPets(null);\n                        }}\n                      />\n                    </div>\n                  )}\n\n                  {currentStep === 'location-picker' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <LocationPicker\n                        location={location}\n                        isLoadingImage={false}\n                        locationImage={null}\n                        locationDetails={null}\n                        onLocationChange={handleLocationChange}\n                        onLocationSelect={handleLocationSelect}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('pet-question');\n                        }}\n                        onContinue={() => {\n                          scrollToTop();\n                          setCurrentStep('calendar');\n                        }}\n                        onCurrencyChange={handleCurrencyChange}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'tinder-options' && (\n                    <div className={cn(\n                      \"hero-card w-full\",\n                      \"bg-black/30 backdrop-blur-sm\",\n                      \"p-4 sm:p-6 rounded-xl\",\n                      \"my-2 sm:my-4\",\n                      \"flex flex-col items-center justify-center gap-4\"\n                    )}>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <TinderOptions\n                        selectedActivity={selectedActivity}\n                        selectedTinderOptions={selectedTinderOptions}\n                        onSelectOption={handleTinderOptionSelect}\n                        onOpenCustomActivityDialog={() => setCustomActivityDialogOpen(true)}\n                        customActivities={customActivities}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('pet-question');\n                        }}\n                        onContinue={handleTinderOptionsContinue}\n                      />\n                    </div>\n                  )}\n\n                  {currentStep === 'activity-time' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <ActivityTimeSelector\n                        selectedTimes={selectedActivityTimes}\n                        onSelectTime={handleActivityTimeSelect}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('calendar');\n                        }}\n                        onContinue={handleActivityTimeContinue}\n                        isHomepage={embedded}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'tinder-location-budget' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <TinderLocationBudget\n                        selectedActivity={selectedActivity === 'tinder-date' || selectedActivity === 'friends' ? selectedActivity : null}\n                        tinderLocation={tinderLocation}\n                        tinderCoordinates={tinderCoordinates}\n                        minBudget={minBudget}\n                        maxBudget={maxBudget}\n                        selectedCurrency={selectedCurrency}\n                        currencySymbol={currencySymbol}\n                        isTinderLocating={isTinderLocating}\n                        adultCount={adultCount}\n                        childCount={childCount}\n                        onTinderLocationChange={handleTinderLocationChange}\n                        onTinderLocateMe={handleTinderLocateMe}\n                        onMinBudgetChange={setMinBudget}\n                        onMaxBudgetChange={setMaxBudget}\n                        onCurrencyChange={handleCurrencyChange}\n                        onAdultCountChange={setAdultCount}\n                        onChildCountChange={setChildCount}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('activity-time');\n                        }}\n                        onContinue={handleContinue}\n                        showBudget={showBudget}\n                        setShowBudget={setShowBudget}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'calendar' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <CalendarSelection \n                        selectedActivity={selectedActivity}\n                        selectedDate={selectedDate}\n                        setSelectedDate={setSelectedDate}\n                        dateRange={dateRange}\n                        setDateRange={setDateRange}\n                        onContinue={handleCalendarContinue}\n                        onBack={() => {\n                          scrollToTop();\n                          if (selectedActivity === 'tinder-date' || selectedActivity === 'friends') {\n                            setCurrentStep('tinder-options');\n                          } else if (selectedActivity === 'plan-trip') {\n                            setCurrentStep('location-picker');\n                          } else {\n                            setCurrentStep('pet-question');\n                          }\n                        }}\n                        isFinalStep={false}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'trip-interests' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <div className=\"w-full max-w-4xl mx-auto\">\n                        <TripInterests\n                          selectedTripInterests={selectedTripInterests}\n                          onSelectInterest={handleTripInterestSelect}\n                          expandedCategory={expandedCategory}\n                          onToggleCategory={(category) => setExpandedCategory(prev => prev === category ? null : category)}\n                          maxSelections={MAX_TRIP_INTERESTS}\n                          onBack={() => {\n                            scrollToTop();\n                            setCurrentStep('calendar');\n                          }}\n                          onContinue={() => {\n                            if (selectedTripInterests.length === 0) {\n                              toast({\n                                title: t('interests.noSelections'),\n                                description: t('interests.selectAtLeastOne'),\n                                variant: \"destructive\"\n                              });\n                              return;\n                            }\n                            scrollToTop();\n                            setCurrentStep('travel-logistics');\n                          }}\n                        />\n                      </div>\n                    </>\n                  )}\n\n                  {currentStep === 'travel-logistics' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <TravelLogistics\n                        departureLocation={departureLocation}\n                        isLocating={isLocating}\n                        transportMode={transportMode}\n                        isElectricCar={isElectricCar}\n                        isCarpool={isCarpool}\n                        onDepartureLocationChange={(loc, coords) => {\n                          setDepartureLocation(loc);\n                          setDepartureCoordinates(coords);\n                        }}\n                        onLocateMe={() => {\n                          setIsLocating(true);\n                          if (navigator.geolocation) {\n                            navigator.geolocation.getCurrentPosition(\n                              (position) => {\n                                const { latitude, longitude } = position.coords;\n                                \n                                // Use reverse geocoding to get location name\n                                fetch(\n                                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=place`\n                                )\n                                  .then((response) => response.json())\n                                  .then((data) => {\n                                    if (data.features && data.features[0]) {\n                                      const placeName = data.features[0].place_name;\n                                      setDepartureLocation(placeName);\n                                      setDepartureCoordinates([longitude, latitude]);\n                                    }\n                                  })\n                                  .catch((error) => {\n                                    console.error(\"Error getting location:\", error);\n                                  })\n                                  .finally(() => {\n                                    setIsLocating(false);\n                                  });\n                              },\n                              (error) => {\n                                console.error(\"Error getting location:\", error);\n                                setIsLocating(false);\n                              }\n                            );\n                          } else {\n                            console.error(\"Geolocation is not supported by this browser.\");\n                            setIsLocating(false);\n                          }\n                        }}\n                        onTransportModeChange={setTransportMode}\n                        onElectricCarChange={setIsElectricCar}\n                        onCarpoolChange={setIsCarpool}\n                        onCurrencyChange={(currency) => {\n                          setSelectedCurrency(currency);\n                          const selectedCurrencyData = currencies.find(c => c.value === currency);\n                          if (selectedCurrencyData) {\n                            setCurrencySymbol(selectedCurrencyData.symbol);\n                          }\n                        }}\n                        onBack={() => setCurrentStep('trip-interests')}\n                        onContinue={() => setCurrentStep('accommodation')}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'accommodation' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <AccommodationSelector\n                        accommodation={accommodation}\n                        onAccommodationChange={setAccommodation}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('travel-logistics');\n                        }}\n                        onContinue={() => {\n                          scrollToTop();\n                          setCurrentStep('people-budget');\n                        }}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'people-budget' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <PeopleBudget\n                        adultCount={adultCount}\n                        childCount={childCount}\n                        maxBudget={maxBudget}\n                        selectedCurrency={selectedCurrency}\n                        currencySymbol={currencySymbol}\n                        onAdultCountChange={setAdultCount}\n                        onChildCountChange={setChildCount}\n                        onMaxBudgetChange={setMaxBudget}\n                        onCurrencyChange={handleCurrencyChange}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('accommodation');\n                        }}\n                        onContinue={handleContinue}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'road-trip-vehicle' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <RoadTripVehicle\n                        vehicleType={roadTripVehicleType}\n                        isElectricCar={isElectricCar}\n                        onVehicleTypeChange={(type) => {\n                          setRoadTripVehicleType(type);\n                          // Reset electric car if not a car\n                          if (type !== 'car') {\n                            setIsElectricCar(false);\n                          }\n                        }}\n                        onElectricCarChange={setIsElectricCar}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('calendar');\n                        }}\n                        onContinue={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-locations');\n                        }}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'road-trip-locations' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <RoadTripLocations\n                        startLocation={startLocation}\n                        startCoordinates={startCoordinates}\n                        intermediateLocations={intermediateLocations}\n                        endLocation={endLocation}\n                        endCoordinates={endCoordinates}\n                        isStartLocating={isStartLocating}\n                        isEndLocating={isEndLocating}\n                        onStartLocationChange={(loc, coords) => {\n                          setStartLocation(loc);\n                          setStartCoordinates(coords);\n                        }}\n                        onEndLocationChange={(loc, coords) => {\n                          setEndLocation(loc);\n                          setEndCoordinates(coords);\n                        }}\n                        onAddIntermediateLocation={(loc, coords) => {\n                          setIntermediateLocations([...intermediateLocations, { name: loc, coordinates: coords }]);\n                        }}\n                        onRemoveIntermediateLocation={(index) => {\n                          setIntermediateLocations(intermediateLocations.filter((_, i) => i !== index));\n                        }}\n                        onStartLocateMe={() => {\n                          setIsStartLocating(true);\n                          if (navigator.geolocation) {\n                            navigator.geolocation.getCurrentPosition(\n                              (position) => {\n                                const { latitude, longitude } = position.coords;\n                                \n                                // Use reverse geocoding to get location name\n                                fetch(\n                                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=place`\n                                )\n                                  .then((response) => response.json())\n                                  .then((data) => {\n                                    if (data.features && data.features[0]) {\n                                      const placeName = data.features[0].place_name;\n                                      setStartLocation(placeName);\n                                      setStartCoordinates([longitude, latitude]);\n                                    }\n                                  })\n                                  .catch((error) => {\n                                    console.error(\"Error getting location:\", error);\n                                  })\n                                  .finally(() => {\n                                    setIsStartLocating(false);\n                                  });\n                              },\n                              (error) => {\n                                console.error(\"Error getting location:\", error);\n                                setIsStartLocating(false);\n                              }\n                            );\n                          } else {\n                            console.error(\"Geolocation is not supported by this browser.\");\n                            setIsStartLocating(false);\n                          }\n                        }}\n                        onEndLocateMe={() => {\n                          setIsEndLocating(true);\n                          if (navigator.geolocation) {\n                            navigator.geolocation.getCurrentPosition(\n                              (position) => {\n                                const { latitude, longitude } = position.coords;\n                                \n                                // Use reverse geocoding to get location name\n                                fetch(\n                                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${longitude},${latitude}.json?access_token=pk.eyJ1IjoibWlzdGVyZnJhenoiLCJhIjoiY203M2ZnM3BoMDhpMTJqcTNiYWpkamIzNyJ9.2SlcuEPIL2yCJw5TIPunVQ&types=place`\n                                )\n                                  .then((response) => response.json())\n                                  .then((data) => {\n                                    if (data.features && data.features[0]) {\n                                      const placeName = data.features[0].place_name;\n                                      setEndLocation(placeName);\n                                      setEndCoordinates([longitude, latitude]);\n                                    }\n                                  })\n                                  .catch((error) => {\n                                    console.error(\"Error getting location:\", error);\n                                  })\n                                  .finally(() => {\n                                    setIsEndLocating(false);\n                                  });\n                              },\n                              (error) => {\n                                console.error(\"Error getting location:\", error);\n                                setIsEndLocating(false);\n                              }\n                            );\n                          } else {\n                            console.error(\"Geolocation is not supported by this browser.\");\n                            setIsEndLocating(false);\n                          }\n                        }}\n                        onCurrencyChange={(currency) => {\n                          setSelectedCurrency(currency);\n                          const selectedCurrencyData = currencies.find(c => c.value === currency);\n                          if (selectedCurrencyData) {\n                            setCurrencySymbol(selectedCurrencyData.symbol);\n                          }\n                        }}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-vehicle');\n                        }}\n                        onContinue={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-interests');\n                        }}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'road-trip-interests' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <RoadTripInterests\n                        selectedRoadTripInterests={selectedRoadTripInterests}\n                        onSelectInterest={handleRoadTripInterestSelect}\n                        expandedCategory={expandedCategory}\n                        onToggleCategory={(category) => setExpandedCategory(prev => prev === category ? null : category)}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-locations');\n                        }}\n                        onContinue={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-details');\n                        }}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'road-trip-details' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <RoadTripDetails\n                        adultCount={roadTripAdults}\n                        childCount={roadTripKids}\n                        maxBudget={maxBudget}\n                        selectedCurrency={selectedCurrency}\n                        currencySymbol={currencySymbol}\n                        onAdultCountChange={setRoadTripAdults}\n                        onChildCountChange={setRoadTripKids}\n                        onMaxBudgetChange={setMaxBudget}\n                        onCurrencyChange={handleCurrencyChange}\n                        onBack={() => {\n                          scrollToTop();\n                          setCurrentStep('road-trip-locations');\n                        }}\n                        onContinue={handleContinue}\n                      />\n                    </>\n                  )}\n\n                  {currentStep === 'title-description' && (\n                    <>\n                      <StepIndicator currentStep={currentStep} selectedActivity={selectedActivity} />\n                      <Card\n                        className={cn(\n                          \"w-full mx-auto\",\n                          isMobile ? \"max-w-xs p-2 my-2\" : \"max-w-2xl p-6 my-6\",\n                          \"border-2\",\n                          \"border-[#61936f] bg-black/20 shadow-xl backdrop-blur-md\",\n                          \"rounded-2xl flex flex-col items-center justify-center\"\n                        )}\n                        style={{ boxShadow: '0 4px 32px 0 rgba(97,147,111,0.10)' }}\n                      >\n                        <CardHeader\n                          className={cn(\n                            \"w-full flex flex-col items-center justify-center gap-2\",\n                            isMobile ? \"p-2 pb-0\" : \"p-6 pb-0\"\n                          )}\n                        >\n                          <div className={cn(\n                            \"flex items-center justify-center rounded-full\",\n                            isMobile ? \"bg-white/15 p-2 w-8 h-8 mb-1\" : \"bg-[#61936f]/10 p-3 w-12 h-12 mb-2\"\n                          )}>\n                            <PencilLine className={cn(\"text-white\", isMobile ? \"h-5 w-5\" : \"h-7 w-7\")} />\n                          </div>\n                          <CardTitle className={cn(\n                            isMobile ? \"text-xl font-bold\" : \"text-3xl font-bold\",\n                            \"text-white text-center\"\n                          )}>\n                            {t('form.titleDescription.title')}\n                          </CardTitle>\n                          <CardDescription className={cn(\n                            isMobile ? \"text-sm\" : \"text-lg\",\n                            \"text-white/80 text-center\"\n                          )}>\n                            {t('form.titleDescription.subtitle')}\n                          </CardDescription>\n                        </CardHeader>\n                        <CardContent className={cn(\n                          \"w-full flex flex-col items-center justify-center\",\n                          isMobile ? \"gap-3 p-2\" : \"gap-6 p-6\"\n                        )}>\n                          <div className={cn(\"w-full\", isMobile ? \"space-y-1\" : \"space-y-2\")}>  \n                            <Label htmlFor=\"title\" className={cn(\n                              \"block text-white\",\n                              isMobile ? \"text-base text-left\" : \"text-lg text-center\"\n                            )}>\n                              {t('form.titleDescription.titleLabel')}\n                            </Label>\n                            <Input\n                              id=\"title\"\n                              value={title}\n                              onChange={(e) => setTitle(e.target.value)}\n                              placeholder={t('form.titleDescription.titlePlaceholder')}\n                              className={cn(\n                                \"w-full border-2 bg-white/95 backdrop-blur-sm\",\n                                isMobile ? \"py-2 px-2 text-base\" : \"py-4 px-4 text-lg\",\n                                \"rounded-lg focus:ring-[#61936f] focus:border-[#61936f]\",\n                                title.trim() ? \"border-[#61936f]\" : \"border-[#e0e0e0]\",\n                                \"transition-all duration-300 placeholder:text-gray-400\"\n                              )}\n                            />\n                          </div>\n                          <div className={cn(\"w-full\", isMobile ? \"space-y-1\" : \"space-y-2\")}>  \n                            <Label htmlFor=\"description\" className={cn(\n                              \"block text-white\",\n                              isMobile ? \"text-base text-left\" : \"text-lg text-center\"\n                            )}>\n                              {t('form.titleDescription.descriptionLabel')}\n                            </Label>\n                            <Textarea\n                              id=\"description\"\n                              value={personalDescription}\n                              onChange={(e) => setPersonalDescription(e.target.value)}\n                              placeholder={t('form.titleDescription.descriptionPlaceholder')}\n                              className={cn(\n                                \"w-full min-h-[80px] border-2 bg-white/95 backdrop-blur-sm\",\n                                isMobile ? \"py-2 px-2 text-base\" : \"py-4 px-4\",\n                                \"rounded-lg focus:ring-[#61936f] focus:border-[#61936f]\",\n                                personalDescription.trim() ? \"border-[#61936f]\" : \"border-[#e0e0e0]\",\n                                \"transition-all duration-300 placeholder:text-gray-400\"\n                              )}\n                            />\n                          </div>\n                        </CardContent>\n                        <CardFooter className={cn(\n                          \"w-full flex justify-center items-center\",\n                          isMobile ? \"gap-2 p-2 flex-col mt-2\" : \"gap-4 p-6 flex-row mt-4\"\n                        )}>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            onClick={() => setCurrentStep('activity')}\n                            className={cn(\n                              \"text-[#61936f] hover:text-white hover:bg-[#61936f]/80 border border-[#61936f]\",\n                              \"transition-all duration-200\"\n                            )}\n                          >\n                            <ChevronLeft className=\"w-4 h-4 mr-2\" />\n                            {t('form.back')}\n                          </Button>\n                          <Button\n                            type=\"button\"\n                            onClick={handleTitleDescriptionContinue}\n                            disabled={!title.trim()}\n                            className={cn(\n                              isMobile ? \"px-4 py-3 rounded-lg text-base min-w-[120px]\" : \"px-8 py-4 rounded-xl text-lg min-w-[200px]\",\n                              \"font-medium bg-[#61936f] hover:bg-[#4a7256] text-white\",\n                              \"shadow-lg shadow-[#61936f]/20 hover:shadow-xl hover:shadow-[#61936f]/30\",\n                              \"transform transition-all duration-300 hover:scale-[1.02]\",\n                              !title.trim() && \"opacity-50 cursor-not-allowed\"\n                            )}\n                          >\n                            {t('form.next')}\n                          </Button>\n                        </CardFooter>\n                      </Card>\n                    </>\n                  )}\n                </div>\n              </AnimatePresence>\n            </div>\n          </div>\n\n          {/* Modals */}\n          <CustomActivityDialog \n            isOpen={customActivityDialogOpen}\n            onOpenChange={setCustomActivityDialogOpen}\n            customActivity={customActivity}\n            onCustomActivityChange={setCustomActivity}\n            onAddCustomActivity={handleAddCustomActivity}\n          />\n\n          <LoadingDialog\n            isOpen={isCreatingTrip}\n            onOpenChange={setIsCreatingTrip}\n            type=\"trip\"\n          />\n\n          <LoadingDialog\n            isOpen={isCreatingTinderDate}\n            onOpenChange={setIsCreatingTinderDate}\n            type=\"date\"\n          />\n\n          <LoadingDialog\n            isOpen={isCreatingFriendActivity}\n            onOpenChange={setIsCreatingFriendActivity}\n            type=\"groupActivity\"\n          />\n\n          <AuthModal \n            isOpen={showAuthModal}\n            onClose={() => setShowAuthModal(false)}\n            onSuccess={handleAuthSuccess}\n            title={t('authModal.createTitle')}\n            description={t('authModal.createDescription')}\n            defaultTab=\"signup\"\n          />\n\n          <ProfileCreationDialog\n            isOpen={showProfileCreationDialog}\n            onOpenChange={setShowProfileCreationDialog}\n            onProfileCreated={handleProfileCreated}\n          />\n          \n          <UpgradeModal\n            isOpen={showUpgradeModal}\n            onClose={() => setShowUpgradeModal(false)}\n          />\n\n          <FreeTripDialog\n            isOpen={showFreeTripDialog}\n            onClose={() => setShowFreeTripDialog(false)}\n            onUpgrade={() => {\n              setShowFreeTripDialog(false);\n              setShowUpgradeModal(true);\n            }}\n            remaining={freeTripStatus?.remaining ?? null}\n            nextReset={freeTripStatus?.next_reset ?? null}\n            tripType={getTripTypeFromActivity(selectedActivity!) ?? 'zaptrip'}\n          />\n        </div>\n      </div>\n    );\n  });\n\nCreateTrip.displayName = 'CreateTrip';\n\nexport default CreateTrip; "],"names":["CreateTrip","memo","session","onTripCreated","embedded","t","useTranslation","currencies","useTranslatedData","toast","useToast","createTrip","useCreateTrip","navigate","useNavigate","lang","useParams","stepContentRef","useRef","scrollToTop","window","dispatchEvent","CustomEvent","detail","step","currentStep","scrollTo","top","behavior","focusOnStepContent","current","focus","scrollIntoView","block","inline","location","setLocation","useState","coordinates","setCoordinates","isMobile","setIsMobile","setCurrentStep","selectedActivity","setSelectedActivity","selectedTinderOptions","setSelectedTinderOptions","selectedDate","setSelectedDate","dateRange","setDateRange","customActivityDialogOpen","setCustomActivityDialogOpen","customActivity","setCustomActivity","customActivities","setCustomActivities","selectedTripInterests","setSelectedTripInterests","departureLocation","setDepartureLocation","departureCoordinates","setDepartureCoordinates","transportMode","setTransportMode","isElectricCar","setIsElectricCar","isCarpool","setIsCarpool","isLocating","setIsLocating","accommodation","setAccommodation","adultCount","setAdultCount","childCount","setChildCount","maxBudget","setMaxBudget","isCreatingTrip","setIsCreatingTrip","showZapAnimation","setShowZapAnimation","zapAnimationType","setZapAnimationType","showAuthModal","setShowAuthModal","showProfileCreationDialog","setShowProfileCreationDialog","showUpgradeModal","setShowUpgradeModal","tinderLocation","setTinderLocation","tinderCoordinates","setTinderCoordinates","minBudget","setMinBudget","isTinderLocating","setIsTinderLocating","isCreatingTinderDate","setIsCreatingTinderDate","selectedCurrency","setSelectedCurrency","currencySymbol","setCurrencySymbol","isCreatingFriendActivity","setIsCreatingFriendActivity","startLocation","setStartLocation","startCoordinates","setStartCoordinates","intermediateLocations","setIntermediateLocations","endLocation","setEndLocation","endCoordinates","setEndCoordinates","isStartLocating","setIsStartLocating","isEndLocating","setIsEndLocating","roadTripVehicleType","setRoadTripVehicleType","roadTripAdults","setRoadTripAdults","roadTripKids","setRoadTripKids","hasPets","setHasPets","expandedCategory","setExpandedCategory","selectedRoadTripInterests","setSelectedRoadTripInterests","backgroundImage","setBackgroundImage","title","setTitle","personalDescription","setPersonalDescription","selectedActivityTimes","setSelectedActivityTimes","showBudget","setShowBudget","showFreeTripDialog","setShowFreeTripDialog","freeTripStatus","setFreeTripStatus","useEffect","desktopImages","mobileImages","randomIndex","Math","floor","random","length","checkMobile","mobile","innerWidth","resizeTimer","handleResize","clearTimeout","setTimeout","addEventListener","removeEventListener","timer","useCallback","value","handleContinue","async","data","userRole","supabase","from","select","eq","user","id","single","role","tripType","getTripTypeFromActivity","Error","validationResult","validateFreeTrip","remaining","tripData","description","startDate","endDate","to","adults","kids","transportationMode","accommodationType","budget","currency","activityTimes","interests","startingCity","startingCityCoordinates","endCity","endCityCoordinates","stopoverCities","car_type","has_electric_car","has_pets","specialRequirements","activityTypes","currency_symbol","additionalNeeds","result","recordFreeTrip","error","handleCurrencyChange","selectedCurrencyData","find","c","symbol","jsxs","className","cn","style","children","jsx","ZapAnimation","show","type","AnimatePresence","mode","ref","tabIndex","StepIndicator","ActivitySelection","onSelectActivity","activity","onNext","activityId","currentActivity","PetQuestion","onSetHasPets","onBack","Fragment","LocationPicker","isLoadingImage","locationImage","locationDetails","onLocationChange","newLocation","newCoordinates","onLocationSelect","onContinue","onCurrencyChange","TinderOptions","onSelectOption","optionId","prev","includes","filter","onOpenCustomActivityDialog","ActivityTimeSelector","selectedTimes","onSelectTime","timeId","isHomepage","TinderLocationBudget","onTinderLocationChange","response","fetch","json","features","countryCode","properties","short_code","toUpperCase","countryCurrencyMap","code","onTinderLocateMe","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","then","placeName","place_name","catch","finally","onMinBudgetChange","onMaxBudgetChange","onAdultCountChange","onChildCountChange","CalendarSelection","isFinalStep","TripInterests","onSelectInterest","interestId","max","variant","onToggleCategory","category","maxSelections","TravelLogistics","onDepartureLocationChange","loc","onLocateMe","onTransportModeChange","onElectricCarChange","onCarpoolChange","AccommodationSelector","onAccommodationChange","PeopleBudget","RoadTripVehicle","vehicleType","onVehicleTypeChange","RoadTripLocations","onStartLocationChange","onEndLocationChange","onAddIntermediateLocation","name","onRemoveIntermediateLocation","index","_","i","onStartLocateMe","onEndLocateMe","RoadTripInterests","RoadTripDetails","Card","boxShadow","CardHeader","PencilLine","CardTitle","CardDescription","CardContent","Label","htmlFor","Input","onChange","e","target","placeholder","trim","Textarea","CardFooter","Button","onClick","ChevronLeft","disabled","CustomActivityDialog","isOpen","onOpenChange","onCustomActivityChange","onAddCustomActivity","LoadingDialog","AuthModal","onClose","onSuccess","defaultTab","ProfileCreationDialog","onProfileCreated","UpgradeModal","FreeTripDialog","onUpgrade","nextReset","next_reset","displayName"],"mappings":"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"}