{"version":3,"file":"page-auth.BazBj1-e.js","sources":["../../../../src/pages/Auth.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useTranslation } from 'react-i18next';\nimport { LanguageSelector } from \"@/components/LanguageSelector\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { LoginForm } from \"@/components/auth/LoginForm\";\nimport { SignupForm } from \"@/components/auth/SignupForm\";\nimport { ResetPasswordForm } from \"@/components/auth/ResetPasswordForm\";\nimport { ResendVerificationForm } from \"@/components/auth/ResendVerificationForm\";\nimport { AppleSignIn } from \"@/components/auth/AppleSignIn\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Auth() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { lang } = useParams();\n  const { t } = useTranslation('auth');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [authMode, setAuthMode] = useState<'signin' | 'signup'>('signin');\n  // Temporarily hidden Apple authentication\n  // const [isAppleDevice, setIsAppleDevice] = useState(false);\n  const [resetPasswordOpen, setResetPasswordOpen] = useState(false);\n  const [resendVerificationOpen, setResendVerificationOpen] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  // Extract returnTo and plan from location state\n  const returnTo = location.state?.returnTo || '/dashboard';\n  const plan = location.state?.plan || null;\n\n  useEffect(() => {\n    // Scroll to top when component mounts\n    window.scrollTo(0, 0);\n    \n    // Check if this is the callback route\n    if (window.location.pathname.includes('/auth/callback')) {\n      handleAuthCallback();\n    } else {\n      checkUser();\n      // Temporarily hidden Apple authentication\n      // detectAppleDevice();\n    }\n\n    // Check if we should show signup tab directly\n    const params = new URLSearchParams(location.search);\n    if (params.get('mode') === 'signup') {\n      setAuthMode('signup');\n    }\n  }, [location]);\n\n  // Temporarily hidden Apple device detection\n  /*\n  const detectAppleDevice = () => {\n    // Detect if the user is on an Apple device (iOS or macOS)\n    const userAgent = navigator.userAgent;\n    const isIOS = /iPad|iPhone|iPod/.test(userAgent);\n    const isMac = /Mac/.test(userAgent) && !(/iPhone|iPad|iPod/.test(userAgent));\n    setIsAppleDevice(isIOS || isMac);\n  };\n  */\n\n  const checkUser = async () => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (user) {\n        // If user is already logged in, redirect to returnTo path\n        handleRedirectAfterAuth(user.id);\n      }\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n    }\n  };\n\n  const handleAuthCallback = async () => {\n    try {\n      console.log(\"Auth - Handling auth callback\");\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (session) {\n        console.log(\"Auth - Session found in callback\");\n        // Check if this is an Apple sign-in\n        const queryParams = new URLSearchParams(window.location.search);\n        const isNewSignUp = queryParams.get('isNewSignUp') === 'true';\n        \n        if (isNewSignUp && session.user?.app_metadata?.provider === 'apple') {\n          console.log(\"Auth - Detected Apple sign-in, redirecting to root with isNewSignUp\");\n          // Redirect to root with isNewSignUp parameter\n          window.location.href = '/?isNewSignUp=true';\n        } else {\n          console.log(\"Auth - Regular sign-in, redirecting appropriately\");\n          handleRedirectAfterAuth(session.user.id);\n        }\n      } else {\n        console.log(\"Auth - No session in callback, redirecting to auth\");\n        navigate('/auth');\n      }\n    } catch (error) {\n      console.error('Error handling auth callback:', error);\n      navigate('/auth');\n    }\n  };\n\n  const handleRedirectAfterAuth = async (userId: string) => {\n    try {\n      // Force refresh localStorage cache by removing it first\n      localStorage.removeItem('userRole');\n      localStorage.removeItem('isAdmin');\n      localStorage.removeItem('userRoleTimestamp');\n      \n      // Check the user's role\n      const { data, error } = await supabase\n        .from('user_roles')\n        .select('role')\n        .eq('user_id', userId)\n        .maybeSingle();\n      \n      if (error) {\n        console.error(\"Error fetching user role:\", error);\n        const currentLang = lang || 'en';\n        navigate(`/${currentLang}/dashboard`);\n        return;\n      }\n      \n      // Cache the role in localStorage immediately\n      const role = data?.role || 'nosubs';\n      localStorage.setItem('userRole', role);\n      localStorage.setItem('isAdmin', 'false');\n      localStorage.setItem('userRoleTimestamp', Date.now().toString());\n\n      // If user has a pending free trip state, redirect to homepage to restore it\n      if (localStorage.getItem('zaparound_free_trip_state')) {\n        navigate('/', { replace: true });\n        return;\n      }\n      \n      // Handle different redirect scenarios\n      const currentLang = lang || 'en';\n      \n      // If user has 'nosubs' role and came from pricing with plan selection, \n      // redirect back to pricing with the plan\n      if (role === 'nosubs' && returnTo === '/pricing' && plan) {\n        navigate(`/${currentLang}/pricing`, { state: { selectedPlan: plan } });\n      } else if (returnTo && returnTo !== '/dashboard') {\n        // If there's a specific returnTo path (like booking pages), honor it\n        // Make sure the path includes the language prefix\n        const redirectPath = returnTo.startsWith(`/${currentLang}`) ? returnTo : `/${currentLang}${returnTo}`;\n        navigate(redirectPath);\n      } else if (role === 'nosubs') {\n        // For nosubs users, redirect to dashboard\n        navigate(`/${currentLang}/dashboard`);\n      } else {\n        // Otherwise, redirect to dashboard\n        navigate(`/${currentLang}/dashboard`);\n      }\n    } catch (error) {\n      console.error(\"Error in handleRedirectAfterAuth:\", error);\n      const currentLang = lang || 'en';\n      navigate(`/${currentLang}/dashboard`);\n    }\n  };\n\n  const handleAuthSuccess = async () => {\n    const { data: { user } } = await supabase.auth.getUser();\n    if (user) {\n      handleRedirectAfterAuth(user.id);\n    } else {\n      const currentLang = lang || 'en';\n      navigate(`/${currentLang}/dashboard`);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex justify-center mb-4\">\n            <img\n              src=\"/zaparound-uploads/transparentnoliner.webp\"\n              alt=\"ZapAround Logo\"\n              className=\"h-12\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl text-center font-bold\">\n            {authMode === 'signin' ? t('signIn.title') : t('signUp.title')}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {authMode === 'signin' \n              ? t('signIn.subtitle') \n              : t('signUp.subtitle')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs \n            defaultValue={authMode} \n            value={authMode} \n            onValueChange={(value) => setAuthMode(value as 'signin' | 'signup')}\n            className=\"w-full\"\n          >\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger id=\"signin-tab\" value=\"signin\">{t('signIn.button')}</TabsTrigger>\n              <TabsTrigger id=\"signup-tab\" value=\"signup\">{t('signUp.button')}</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"signin\">\n              <LoginForm\n                email={email}\n                setEmail={setEmail}\n                password={password}\n                setPassword={setPassword}\n                onForgotPassword={() => setResetPasswordOpen(true)}\n                onSuccess={handleAuthSuccess}\n                errorMessage={errorMessage}\n                setErrorMessage={setErrorMessage}\n              />\n            </TabsContent>\n            \n            <TabsContent value=\"signup\">\n              <SignupForm\n                email={email}\n                setEmail={setEmail}\n                password={password}\n                setPassword={setPassword}\n                errorMessage={errorMessage}\n                setErrorMessage={setErrorMessage}\n                onSuccess={handleAuthSuccess}\n              />\n            </TabsContent>\n          </Tabs>\n          \n          <div className=\"flex items-center justify-between gap-2 mt-4\">\n            <LanguageSelector variant=\"ghost\" />\n          </div>\n          \n          {/* Temporarily hidden Apple Sign In\n          {isAppleDevice && (\n            <>\n              <div className=\"relative my-4\">\n                <Separator className=\"absolute inset-0 flex items-center\" />\n                <div className=\"relative flex justify-center text-xs uppercase\">\n                  <span className=\"bg-background px-2 text-muted-foreground\">\n                    {t('auth.continueWith') || \"Or continue with\"}\n                  </span>\n                </div>\n              </div>\n              \n              <AppleSignIn />\n            </>\n          )}\n          */}\n        </CardContent>\n      </Card>\n      \n      <Dialog open={resetPasswordOpen} onOpenChange={setResetPasswordOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>{t('resetPassword.title')}</DialogTitle>\n            <DialogDescription>\n              {t('resetPassword.subtitle')}\n            </DialogDescription>\n          </DialogHeader>\n          <ResetPasswordForm onSuccess={() => setResetPasswordOpen(false)} />\n        </DialogContent>\n      </Dialog>\n      \n\n    </div>\n  );\n}\n"],"names":["Auth","navigate","useNavigate","location","useLocation","lang","useParams","t","useTranslation","email","setEmail","useState","password","setPassword","authMode","setAuthMode","resetPasswordOpen","setResetPasswordOpen","resendVerificationOpen","setResendVerificationOpen","errorMessage","setErrorMessage","returnTo","state","plan","useEffect","window","scrollTo","pathname","includes","handleAuthCallback","checkUser","URLSearchParams","search","get","async","data","user","supabase","auth","getUser","handleRedirectAfterAuth","id","error","session","getSession","queryParams","app_metadata","provider","href","userId","localStorage","removeItem","from","select","eq","maybeSingle","role","setItem","Date","now","toString","getItem","replace","currentLang","selectedPlan","redirectPath","startsWith","handleAuthSuccess","jsxs","className","children","Card","CardHeader","jsx","src","alt","CardTitle","CardDescription","CardContent","Tabs","defaultValue","value","onValueChange","TabsList","TabsTrigger","TabsContent","LoginForm","onForgotPassword","onSuccess","SignupForm","LanguageSelector","variant","Dialog","open","onOpenChange","DialogContent","DialogHeader","DialogTitle","DialogDescription","ResetPasswordForm"],"mappings":"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"}