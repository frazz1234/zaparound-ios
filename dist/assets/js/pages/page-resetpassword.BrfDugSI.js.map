{"version":3,"file":"page-resetpassword.BrfDugSI.js","sources":["../../../../src/pages/ResetPassword.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useTranslation } from 'react-i18next';\nimport { Loader2 } from 'lucide-react';\n\nexport default function ResetPassword() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { lang } = useParams();\n  const { toast } = useToast();\n  const { t, i18n } = useTranslation('auth');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [verifying, setVerifying] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isValidRecoverySession, setIsValidRecoverySession] = useState(false);\n\n  useEffect(() => {\n    // Set the language based on the URL parameter\n    if (lang && lang !== i18n.language) {\n      i18n.changeLanguage(lang);\n    }\n\n    // Scroll to top when component mounts\n    window.scrollTo(0, 0);\n    \n    // Handle the recovery token from Supabase\n    const handleRecoveryToken = async () => {\n      try {\n        // Check if we're coming from a Supabase recovery email\n        const hashParams = new URLSearchParams(location.hash.substring(1));\n        const searchParams = new URLSearchParams(location.search);\n        \n        // Supabase sends tokens in different ways depending on the redirect\n        const accessToken = hashParams.get('access_token') || searchParams.get('token');\n        const type = hashParams.get('type') || searchParams.get('type');\n        \n        if (type === 'recovery' && accessToken) {\n          // Exchange the code for a session\n          const { data, error } = await supabase.auth.exchangeCodeForSession(accessToken);\n          \n          if (error) {\n            throw error;\n          }\n          \n          // Check if we have a valid recovery session\n          const { data: { session } } = await supabase.auth.getSession();\n          \n          if (session) {\n            setIsValidRecoverySession(true);\n            setVerifying(false);\n          } else {\n            throw new Error('No valid session found');\n          }\n        } else {\n          // Check if user already has a recovery session\n          const { data: { session } } = await supabase.auth.getSession();\n          \n          // Check if this is a recovery session by looking at the session metadata\n          if (session?.user?.recovery_sent_at) {\n            setIsValidRecoverySession(true);\n            setVerifying(false);\n          } else {\n            throw new Error('Invalid or expired reset link');\n          }\n        }\n      } catch (error) {\n        console.error('Reset password verification error:', error);\n        toast({\n          title: t('errors.default'),\n          description: t('resetPassword.invalidResetLink'),\n          variant: \"destructive\",\n        });\n        // Clear any invalid hash/search params and redirect to auth\n        navigate(`/${lang || i18n.language}/auth`, { replace: true });\n      }\n    };\n    \n    handleRecoveryToken();\n  }, [navigate, toast, t, lang, i18n, location]);\n\n  const handlePasswordReset = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage('');\n    \n    // Validate passwords\n    if (newPassword !== confirmPassword) {\n      setErrorMessage(t('resetPassword.passwordsDoNotMatch'));\n      return;\n    }\n    \n    if (newPassword.length < 6) {\n      setErrorMessage(t('resetPassword.passwordTooShort'));\n      return;\n    }\n    \n    setLoading(true);\n    \n    try {\n      // Update the user's password\n      const { error } = await supabase.auth.updateUser({ \n        password: newPassword \n      });\n      \n      if (error) throw error;\n      \n      toast({\n        title: t('resetPassword.passwordUpdated'),\n        description: t('resetPassword.passwordUpdateSuccess'),\n      });\n      \n      // Sign out the user to clear the recovery session\n      await supabase.auth.signOut();\n      \n      // Redirect to auth page after successful password reset\n      setTimeout(() => {\n        navigate(`/${lang || i18n.language}/auth`);\n      }, 1000);\n      \n    } catch (error: any) {\n      toast({\n        title: t('errors.default'),\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (verifying) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n          <p>{t('resetPassword.verifyingLink')}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isValidRecoverySession) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl text-center font-bold text-red-600\">\n              {t('errors.default')}\n            </CardTitle>\n            <CardDescription className=\"text-center\">\n              {t('resetPassword.invalidResetLink')}\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <Button onClick={() => navigate(`/${lang || i18n.language}/auth`)}>\n              {t('auth.goToLogin')}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex justify-center mb-4\">\n            <img\n              src=\"https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExZWhzNGQ2MnpndHNqeGthM2xqOWpwNTBkOG1wdHNvMjk2Yzg4enJmNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/LMQ9c65BnD2gzMiJWg/giphy.gif\"\n              alt=\"ZapAround Logo\"\n              className=\"h-12\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl text-center font-bold\">\n            {t('resetPassword.title')}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {t('resetPassword.enterNewPassword')}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handlePasswordReset} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"new-password\">{t('resetPassword.newPassword')}</Label>\n              <Input\n                id=\"new-password\"\n                type=\"password\"\n                value={newPassword}\n                onChange={(e) => setNewPassword(e.target.value)}\n                placeholder={t('resetPassword.passwordPlaceholder')}\n                required\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirm-password\">{t('resetPassword.confirmPassword')}</Label>\n              <Input\n                id=\"confirm-password\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                placeholder={t('resetPassword.passwordPlaceholder')}\n                required\n              />\n            </div>\n            \n            {errorMessage && (\n              <div className=\"text-red-500 text-sm mt-2\">\n                {errorMessage}\n              </div>\n            )}\n            \n            <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n              {loading \n                ? t('resetPassword.updating')\n                : t('resetPassword.updatePassword')}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":["ResetPassword","navigate","useNavigate","location","useLocation","lang","useParams","toast","useToast","t","i18n","useTranslation","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","loading","setLoading","verifying","setVerifying","errorMessage","setErrorMessage","isValidRecoverySession","setIsValidRecoverySession","useEffect","language","changeLanguage","window","scrollTo","async","hashParams","URLSearchParams","hash","substring","searchParams","search","accessToken","get","data","error","supabase","auth","exchangeCodeForSession","session","getSession","Error","user","recovery_sent_at","title","description","variant","replace","handleRecoveryToken","className","children","jsxs","jsx","Loader2","Card","CardHeader","src","alt","CardTitle","CardDescription","CardContent","onSubmit","e","preventDefault","length","updateUser","password","signOut","setTimeout","message","Label","htmlFor","Input","id","type","value","onChange","target","placeholder","required","Button","disabled","onClick"],"mappings":"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"}