{"version":3,"file":"page-tripdetails.CRrIBOhf.js","sources":["../../../../src/pages/TripDetails.tsx"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { supabase } from \"@/integrations/supabase/client\";\nimport TripMap from '@/components/TripMap';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useToast } from \"@/components/ui/use-toast\";\nimport type { Database } from '@/integrations/supabase/types';\nimport type { Json } from '../integrations/supabase/types';\nimport { TripHeader } from '@/components/trip-details/TripHeader';\nimport { TripBasicInfo } from '@/components/trip-details/TripBasicInfo';\nimport { TripTransportation } from '@/components/trip-details/TripTransportation';\nimport { TripAccommodation } from '@/components/trip-details/TripAccommodation';\nimport { TripAIContent } from '@/components/trip-details/TripAIContent';\nimport { TripZapOutDetails } from '@/components/trip-details/TripZapOutDetails';\nimport { TripZapRoadDetails } from '@/components/trip-details/TripZapRoadDetails';\nimport { EventSuggestions } from '@/components/trip-details/EventSuggestions';\nimport { TicketmasterEvents } from '@/components/trip-details/TicketmasterEvents';\nimport { useTranslation } from 'react-i18next';\nimport { openGoogleMapsNavigation } from '@/utils/navigation';\nimport { generateTripPDF } from '@/utils/pdfGenerator';\nimport { Map } from 'lucide-react';\nimport { TripShareDialog } from '@/components/trip-details/TripShareDialog';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Trash2, Edit2, Save } from \"lucide-react\";\nimport { debounce } from \"lodash\";\n\ntype TransportationDetails = {\n  mode?: string;\n  details?: string;\n};\n\ntype AccommodationDetails = {\n  type?: string;\n  details?: string;\n};\n\n// Base type from database\ntype BaseTripRow = Database['public']['Tables']['trips']['Row'];\n\n// Our extended Trip type\ntype Trip = Database['public']['Tables']['trips']['Row'] & {\n  type?: 'ZapOut' | 'ZapRoad' | 'Regular';\n  category?: string | null;\n  notes?: string | null;\n  budget?: number | null;\n  geoposition?: GeoPosition[] | null;\n  transportation_details: TransportationDetails;\n  accommodation_details: AccommodationDetails;\n};\n\n// Define the GeoPosition type as a plain object to match Json type\ntype GeoPosition = {\n  [key: string]: string | number | number[] | null;\n  name: string;\n  type: string;\n  coordinates: [number, number];\n};\n\n// Extend the ZapOut and ZapRoad types with geoposition\ntype ZapOutTrip = Database['public']['Tables']['zapout_data']['Row'] & {\n  type: 'ZapOut';\n  title: string;\n  category?: string | null;\n  notes?: string | null;\n  description?: string | null;\n  budget?: number | null;\n  geoposition?: GeoPosition[] | null;\n  coordinates?: string | null;\n  location?: string | null;\n  activity_locations?: {\n    name: string;\n    coordinates: [number, number];\n    type: string;\n  }[] | null;\n};\n\ntype ZapRoadTrip = Database['public']['Tables']['zaproad_data']['Row'] & {\n  type: 'ZapRoad';\n  title: string;\n  category?: string | null;\n  notes?: string | null;\n  description?: string | null;\n  budget?: number | null;\n  geoposition?: GeoPosition[] | null;\n  starting_city: string;\n  starting_city_coordinates: string | null;\n  end_city: string;\n  end_city_coordinates: string | null;\n  stopover_cities?: {\n    name: string;\n    coordinates: string;\n  }[] | null;\n};\n\n// Add this type definition\ntype NoteBlock = {\n  id: string;\n  title: string;\n  content: string;\n  created_at: string;\n  trip_id: string;\n  trip_type: 'zaptrip' | 'zapout' | 'zaproad';\n};\n\n// Add these types after the existing type definitions\ntype ChecklistItem = {\n  id: string;\n  title: string;\n  is_checked: boolean;\n  subitems: ChecklistSubItem[];\n};\n\ntype ChecklistSubItem = {\n  id: string;\n  title: string;\n  is_checked: boolean;\n};\n\nconst LoadingOverlay = () => {\n  const { t } = useTranslation('trip');\n  const [currentTip, setCurrentTip] = useState(0);\n  const [currentSection, setCurrentSection] = useState<'tips' | 'preview' | 'message'>('message');\n  const [waitMessage, setWaitMessage] = useState('');\n\n  // Get wait messages from translations\n  const waitMessages = t('loading.waitMessages', { returnObjects: true }) as string[];\n\n  // Effect to rotate wait messages\n  useEffect(() => {\n    const updateMessage = () => {\n      const randomIndex = Math.floor(Math.random() * waitMessages.length);\n      setWaitMessage(waitMessages[randomIndex]);\n    };\n    \n    // Set initial message\n    updateMessage();\n    \n    // Update message every 4 seconds\n    const interval = setInterval(updateMessage, 4000);\n    return () => clearInterval(interval);\n  }, [waitMessages]);\n\n  // Travel tips array from translations\n  const travelTips = t('loading.travelTips', { returnObjects: true }) as string[];\n\n  // ZapAround tips from translations\n  const zapTips = t('loading.zapTips', { returnObjects: true }) as string[];\n\n  // Blog preview content from translations\n  const blogPreview = {\n    title: t('loading.preview.title'),\n    sections: t('loading.preview.sections', { returnObjects: true }) as {\n      title: string;\n      description: string;\n      readTime: string;\n      category: string;\n    }[]\n  };\n\n  // State for current blog post\n  const [currentBlogPost, setCurrentBlogPost] = useState(0);\n\n  // Effect to rotate through blog posts\n  useEffect(() => {\n    if (currentSection === 'preview') {\n      const interval = setInterval(() => {\n        setCurrentBlogPost(prev => (prev + 1) % blogPreview.sections.length);\n      }, 4000);\n      return () => clearInterval(interval);\n    }\n  }, [currentSection, blogPreview.sections.length]);\n\n  // Effect to rotate through tips\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTip(prev => (prev + 1) % (travelTips.length + zapTips.length));\n    }, 4000);\n\n    return () => clearInterval(interval);\n  }, [travelTips.length, zapTips.length]);\n\n  return (\n    <motion.div \n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"fixed inset-0 bg-[#fcfcfc] z-50 overflow-hidden\"\n    >\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(#61936f 1px, transparent 1px)`,\n          backgroundSize: '30px 30px'\n        }}></div>\n      </div>\n\n      {/* Content */}\n      <div className=\"relative h-full flex flex-col items-center justify-center p-4 sm:p-6\">\n        {/* Logo Animation */}\n        <div className=\"mb-8 sm:mb-12\">\n          <motion.div\n            animate={{\n              scale: [1, 1.1, 1],\n              rotate: [0, 5, -5, 0],\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            className=\"w-16 h-16 sm:w-24 sm:h-24 rounded-full bg-gradient-to-br from-[#61936f] to-[#1d1d1e] shadow-xl flex items-center justify-center\"\n          >\n            <span className=\"text-2xl sm:text-4xl text-white font-bold\">Z</span>\n          </motion.div>\n        </div>\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.5 }}\n          className=\"mb-8 text-center\"\n        >\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-[#61936f]/10 border border-[#61936f]/20\">\n            <svg \n              className=\"w-5 h-5 text-[#61936f]\" \n              fill=\"none\" \n              viewBox=\"0 0 24 24\" \n              stroke=\"currentColor\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" \n              />\n            </svg>\n            <span className=\"text-sm font-medium text-[#1d1d1e]\">\n              {t('aiContent.emailNotification')}\n            </span>\n          </div>\n        </motion.div>\n\n        {/* Content Sections */}\n        <div className=\"w-full max-w-2xl mx-auto\">\n          <AnimatePresence mode=\"wait\">\n            {currentSection === 'message' && (\n              <motion.div\n                key=\"message\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"text-center px-4 sm:px-0\"\n              >\n                <h2 className=\"text-xl sm:text-2xl font-semibold text-[#030303] mb-2 sm:mb-3\">\n                  {waitMessage}\n                </h2>\n                <p className=\"text-base sm:text-lg text-[#62626a] max-w-md mx-auto\">\n                  {t('loading.pleaseWait')}\n                </p>\n              </motion.div>\n            )}\n\n            {currentSection === 'tips' && (\n              <motion.div\n                key=\"tips\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"text-center px-4 sm:px-0\"\n              >\n                <h3 className=\"text-lg font-medium text-[#030303] mb-3\">\n                  {currentTip < travelTips.length ? t('loading.tips.title') : t('loading.tips.zapTitle')}\n                </h3>\n                <p className=\"text-base sm:text-lg text-[#62626a] max-w-md mx-auto\">\n                  {currentTip < travelTips.length \n                    ? travelTips[currentTip]\n                    : zapTips[currentTip - travelTips.length]}\n                </p>\n              </motion.div>\n            )}\n\n            {currentSection === 'preview' && (\n              <motion.div\n                key=\"preview\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                className=\"text-center px-4 sm:px-0\"\n              >\n                <h3 className=\"text-lg font-medium text-[#030303] mb-3\">\n                  {blogPreview.title}\n                </h3>\n                <div className=\"space-y-6\">\n                  <motion.div\n                    key={currentBlogPost}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: 20 }}\n                    className=\"bg-white rounded-xl p-6 shadow-sm border border-gray-100\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium text-[#61936f] px-3 py-1 bg-[#61936f]/10 rounded-full\">\n                        {blogPreview.sections[currentBlogPost].category}\n                      </span>\n                      <span className=\"text-sm text-[#62626a]\">\n                        {blogPreview.sections[currentBlogPost].readTime}\n                      </span>\n                    </div>\n                    <h4 className=\"text-xl font-semibold text-[#030303] mb-2\">\n                      {blogPreview.sections[currentBlogPost].title}\n                    </h4>\n                    <p className=\"text-[#62626a] text-base\">\n                      {blogPreview.sections[currentBlogPost].description}\n                    </p>\n                  </motion.div>\n\n                  {/* Blog post navigation dots */}\n                  <div className=\"flex justify-center space-x-2\">\n                    {blogPreview.sections.map((_, index) => (\n                      <motion.button\n                        key={index}\n                        className={`w-2 h-2 rounded-full ${\n                          index === currentBlogPost ? 'bg-[#61936f]' : 'bg-[#62626a]/20'\n                        }`}\n                        onClick={() => setCurrentBlogPost(index)}\n                        whileHover={{ scale: 1.2 }}\n                        whileTap={{ scale: 0.9 }}\n                      />\n                    ))}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Loading Bar */}\n        <motion.div \n          className=\"mt-6 sm:mt-8 w-[280px] sm:w-64 h-1.5 bg-gray-100 rounded-full overflow-hidden\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ delay: 0.4 }}\n        >\n          <motion.div\n            className=\"h-full bg-gradient-to-r from-[#61936f] to-[#1d1d1e]\"\n            animate={{\n              x: [\"-100%\", \"100%\"],\n            }}\n            transition={{\n              repeat: Infinity,\n              duration: 1.5,\n              ease: \"easeInOut\",\n            }}\n          />\n        </motion.div>\n\n        {/* Loading Dots */}\n        <div className=\"mt-4 sm:mt-6 flex space-x-2\">\n          {[0, 1, 2].map((i) => (\n            <motion.div\n              key={i}\n              className=\"w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full bg-[#61936f]\"\n              animate={{\n                scale: [1, 1.5, 1],\n                opacity: [0.3, 1, 0.3],\n              }}\n              transition={{\n                duration: 1,\n                repeat: Infinity,\n                delay: i * 0.2,\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Return to Dashboard Button */}\n        <button\n          onClick={() => window.location.href = '/dashboard'}\n          className=\"mt-8 px-6 py-3 rounded-lg font-semibold text-white bg-[#61936f] hover:bg-[#1d1d1e] transition-colors duration-200 shadow-md focus:outline-none focus:ring-2 focus:ring-[#61936f] focus:ring-offset-2\"\n        >\n          {t('loading.returnToDashboard')}\n        </button>\n      </div>\n    </motion.div>\n  );\n};\n\nconst TripDetails = () => {\n  const {\n    tripId\n  } = useParams();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { lang } = useParams();\n  const [trip, setTrip] = useState<Trip | null>(null);\n  const [zapOutTrip, setZapOutTrip] = useState<ZapOutTrip | null>(null);\n  const [zapRoadTrip, setZapRoadTrip] = useState<ZapRoadTrip | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isAiContentLoading, setIsAiContentLoading] = useState(true);\n  const [waitMessage, setWaitMessage] = useState<string>('');\n  const {\n    toast\n  } = useToast();\n  const [tripCoordinates, setTripCoordinates] = useState<[number, number]>([2.3488, 48.8534]); // Default to Paris\n  const [geopositions, setGeopositions] = useState<GeoPosition[]>([]);\n  const { t } = useTranslation('trip');\n  const [isStopsExpanded, setIsStopsExpanded] = useState(false);\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const pollingCountRef = useRef(0);\n  const MAX_POLLING_COUNT = 60; // Stop polling after ~5 minutes (5 seconds × 60)\n  const POLLING_INTERVAL = 5000; // Check every 5 seconds\n  const [shareDialogOpen, setShareDialogOpen] = useState(false);\n  const isZapOutPath = location.pathname.includes('/zapout/');\n  const isZapRoadPath = location.pathname.includes('/zaproad/');\n  const [showNotesSection, setShowNotesSection] = useState(false);\n  const [travelChecklist, setTravelChecklist] = useState([\n    { id: 1, text: \"Passport/ID\", checked: false },\n    { id: 2, text: \"Travel Insurance\", checked: false },\n    { id: 3, text: \"Hotel Reservations\", checked: false },\n    { id: 4, text: \"Transportation Tickets\", checked: false },\n    { id: 5, text: \"Local Currency\", checked: false },\n    { id: 6, text: \"Phone Charger\", checked: false },\n    { id: 7, text: \"Medications\", checked: false },\n    { id: 8, text: \"Weather-appropriate clothes\", checked: false },\n  ]);\n  const [noteBlocks, setNoteBlocks] = useState<NoteBlock[]>([]);\n  const [newNoteTitle, setNewNoteTitle] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState<string | null>(null);\n  const [isSaving, setIsSaving] = useState(false);\n  const [checklistItems, setChecklistItems] = useState<ChecklistItem[]>([]);\n  const [newItemTitle, setNewItemTitle] = useState('');\n  const [newSubItemTitle, setNewSubItemTitle] = useState('');\n  const [expandedItems, setExpandedItems] = useState<Set<string>>(new Set());\n  const [isSavingChecklist, setIsSavingChecklist] = useState(false);\n\n  // Get wait messages from translations\n  const waitMessages = t('aiContent.waitMessages', { returnObjects: true }) as string[];\n  \n  // Function to get random wait message\n  const getRandomWaitMessage = () => {\n    const randomIndex = Math.floor(Math.random() * waitMessages.length);\n    return waitMessages[randomIndex];\n  };\n\n  // Determine the correct share URL based on trip type\n  const shareUrl = isZapOutPath \n    ? `${window.location.origin}/zapout/${tripId}/share`\n    : isZapRoadPath \n    ? `${window.location.origin}/zaproad/${tripId}/share`\n    : `${window.location.origin}/trips/${tripId}/share`;\n\n  const [isShareable, setIsShareable] = useState(false);\n  const [isZapOutShareable, setIsZapOutShareable] = useState(false);\n  const [isZapRoadShareable, setIsZapRoadShareable] = useState(false);\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\n\n  // Function to check for AI content updates\n  const checkForAiContentUpdates = useCallback(async () => {\n    if (!tripId) return;\n\n    try {\n      pollingCountRef.current += 1;\n      console.log(`Polling for AI content updates (attempt ${pollingCountRef.current})`);\n\n      let result;\n      if (isZapOutPath) {\n        const { data } = await supabase\n          .from('zapout_data')\n          .select('ai_content')\n          .eq('id', tripId)\n          .single();\n        result = data;\n      } else if (isZapRoadPath) {\n        const { data } = await supabase\n          .from('zaproad_data')\n          .select('ai_content')\n          .eq('id', tripId)\n          .single();\n        result = data;\n      } else {\n        const { data } = await supabase\n          .from('trips')\n          .select('ai_content')\n          .eq('id', tripId)\n          .single();\n        result = data;\n      }\n\n      if (result && result.ai_content) {\n        console.log('AI content found, stopping polling');\n        \n        // Update the appropriate trip state with new AI content\n        if (isZapOutPath && zapOutTrip) {\n          setZapOutTrip(prev => ({ ...prev!, ai_content: result.ai_content }));\n        } else if (isZapRoadPath && zapRoadTrip) {\n          setZapRoadTrip(prev => ({ ...prev!, ai_content: result.ai_content }));\n        } else if (trip) {\n          setTrip(prev => ({ ...prev!, ai_content: result.ai_content }));\n        }\n\n        // Clear the polling interval\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n\n        // Update loading state\n        setIsAiContentLoading(false);\n\n        // Show success toast\n\n      } else if (pollingCountRef.current >= MAX_POLLING_COUNT) {\n        console.log('Max polling attempts reached, stopping');\n        setIsAiContentLoading(false);\n        if (pollingIntervalRef.current) {\n          clearInterval(pollingIntervalRef.current);\n          pollingIntervalRef.current = null;\n        }\n        toast({\n          title: \"Note\",\n          description: \"AI content generation is taking longer than expected. Please refresh the page later.\",\n        });\n      }\n    } catch (error) {\n      console.error('Error checking for AI content updates:', error);\n    }\n  }, [tripId, isZapOutPath, isZapRoadPath, trip, zapOutTrip, zapRoadTrip, toast]);\n\n  // Effect to handle AI content polling\n  useEffect(() => {\n    if (isAiContentLoading && tripId) {\n      console.log('Starting AI content polling');\n      // Check immediately\n      checkForAiContentUpdates();\n      \n      // Then check every 5 seconds\n      pollingIntervalRef.current = setInterval(checkForAiContentUpdates, POLLING_INTERVAL);\n    }\n    \n    return () => {\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n        pollingIntervalRef.current = null;\n      }\n    };\n  }, [isAiContentLoading, tripId, checkForAiContentUpdates]);\n\n  // Effect to rotate wait messages\n  useEffect(() => {\n    if (isAiContentLoading) {\n      setWaitMessage(getRandomWaitMessage());\n      const interval = setInterval(() => {\n        setWaitMessage(getRandomWaitMessage());\n      }, 4000);\n      \n      return () => clearInterval(interval);\n    }\n  }, [isAiContentLoading]);\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n    if (isZapOutPath) {\n      fetchZapOutData();\n    } else if (isZapRoadPath) {\n      fetchZapRoadData();\n    } else {\n      fetchTripDetails();\n    }\n  }, [tripId, isZapOutPath, isZapRoadPath]);\n\n  const fetchTripDetails = async () => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase\n        .from('trips')\n        .select('*')\n        .eq('id', tripId)\n        .single();\n      \n      if (error) throw error;\n      console.log(\"Raw trip data from DB:\", data);\n\n      // Handle geoposition data\n      let validGeopositions: GeoPosition[] = [];\n      if (data.geoposition) {\n        try {\n          // If it's a string, parse it\n          const geoData = typeof data.geoposition === 'string' \n            ? JSON.parse(data.geoposition) \n            : data.geoposition;\n\n          // If it's an array, use it directly, otherwise wrap it in an array\n          const geoArray = Array.isArray(geoData) ? geoData : [geoData];\n          \n          validGeopositions = geoArray.filter(pos => {\n            return (\n              pos &&\n              pos.name &&\n              pos.type &&\n              Array.isArray(pos.coordinates) &&\n              pos.coordinates.length === 2 &&\n              !isNaN(pos.coordinates[0]) &&\n              !isNaN(pos.coordinates[1])\n            );\n          });\n\n          console.log(\"Valid geopositions:\", validGeopositions);\n        } catch (e) {\n          console.error(\"Error parsing geoposition data:\", e);\n        }\n      }\n\n      // Set the geopositions\n      setGeopositions(validGeopositions);\n\n      // Set coordinates directly from the first valid geoposition\n      if (validGeopositions.length > 0) {\n        setTripCoordinates(validGeopositions[0].coordinates);\n      }\n\n      // Convert database types to our Trip type\n      const formattedTrip: Trip = {\n        ...data,\n        transportation_details: typeof data.transportation_details === 'string' \n          ? JSON.parse(data.transportation_details) \n          : (data.transportation_details as TransportationDetails) || {},\n        accommodation_details: typeof data.accommodation_details === 'string'\n          ? JSON.parse(data.accommodation_details)\n          : (data.accommodation_details as AccommodationDetails) || {},\n        geoposition: validGeopositions\n      };\n\n      console.log(\"Formatted trip with geopositions:\", formattedTrip);\n      setTrip(formattedTrip);\n      setLoading(false);\n      \n      // Set AI content loading state based on whether content exists\n      setIsAiContentLoading(!formattedTrip.ai_content);\n      if (!formattedTrip.ai_content) {\n        // Reset polling count when starting fresh\n        pollingCountRef.current = 0;\n      }\n\n      // After trip is loaded, set isShareable\n      if (formattedTrip && typeof formattedTrip.is_shareable === 'boolean') {\n        setIsShareable(formattedTrip.is_shareable);\n      }\n    } catch (error) {\n      console.error(\"Error fetching trip details:\", error);\n      navigate('/dashboard');\n    }\n  };\n\n  const fetchZapOutData = async () => {\n    try {\n      setLoading(true);\n      const { data: rawData, error } = await supabase\n        .from('zapout_data')\n        .select('*')\n        .eq('id', tripId)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching ZapOut data:\", error);\n        navigate('/dashboard');\n        return;\n      }\n\n      // Cast the raw data to our extended type\n      const data = rawData as ZapOutTrip;\n      console.log(\"ZapOut data loaded:\", data);\n\n      // Handle geoposition data\n      let validGeopositions: GeoPosition[] = [];\n\n      // 1. Try to get locations from geoposition field first\n      if (data.geoposition) {\n        try {\n          const geoData = typeof data.geoposition === 'string' \n            ? JSON.parse(data.geoposition) \n            : data.geoposition;\n\n          const geoArray = Array.isArray(geoData) ? geoData : [geoData];\n          \n          validGeopositions = geoArray.filter(pos => {\n            return (\n              pos &&\n              pos.name &&\n              pos.type &&\n              Array.isArray(pos.coordinates) &&\n              pos.coordinates.length === 2 &&\n              !isNaN(pos.coordinates[0]) &&\n              !isNaN(pos.coordinates[1])\n            );\n          });\n\n          console.log(\"Valid geopositions from geoposition field:\", validGeopositions);\n        } catch (e) {\n          console.error(\"Error parsing geoposition data:\", e);\n        }\n      }\n\n      // 2. If no valid geopositions, try activity_locations\n      if (validGeopositions.length === 0 && data.activity_locations) {\n        try {\n          const activityLocations = typeof data.activity_locations === 'string'\n            ? JSON.parse(data.activity_locations)\n            : data.activity_locations;\n\n          if (Array.isArray(activityLocations)) {\n            validGeopositions = activityLocations\n              .filter(loc => loc && loc.coordinates && loc.name)\n              .map(loc => ({\n                name: loc.name,\n                type: loc.type || 'activity',\n                coordinates: loc.coordinates as [number, number]\n              }));\n          }\n          console.log(\"Valid geopositions from activity_locations:\", validGeopositions);\n        } catch (e) {\n          console.error(\"Error parsing activity_locations:\", e);\n        }\n      }\n\n      // 3. If still no valid geopositions, try the main location/coordinates\n      if (validGeopositions.length === 0 && data.coordinates) {\n        try {\n          const coords = JSON.parse(data.coordinates);\n          if (Array.isArray(coords) && coords.length === 2) {\n            validGeopositions = [{\n              name: data.location || 'Main Location',\n              type: 'main',\n              coordinates: [Number(coords[0]), Number(coords[1])] as [number, number]\n            }];\n            console.log(\"Valid geoposition from main coordinates:\", validGeopositions);\n          }\n        } catch (e) {\n          console.error(\"Error parsing main coordinates:\", e);\n        }\n      }\n\n      // Set the geopositions\n      setGeopositions(validGeopositions);\n\n      // Set coordinates directly from the first valid geoposition\n      if (validGeopositions.length > 0) {\n        setTripCoordinates(validGeopositions[0].coordinates);\n      }\n\n      // Update the ZapOut trip state\n      setZapOutTrip({\n        ...data,\n        type: 'ZapOut',\n        description: data.additional_needs || null,\n        geoposition: validGeopositions\n      });\n\n      setLoading(false);\n      \n      // Set AI content loading state based on whether content exists\n      setIsAiContentLoading(!data.ai_content);\n      if (!data.ai_content) {\n        // Reset polling count when starting fresh\n        pollingCountRef.current = 0;\n      }\n    } catch (error) {\n      console.error(\"Error in ZapOut data fetch:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load ZapOut trip details\"\n      });\n      navigate('/dashboard');\n    }\n  };\n\n  const fetchZapRoadData = async () => {\n    try {\n      setLoading(true);\n      const { data: rawData, error } = await supabase\n        .from('zaproad_data')\n        .select('*')\n        .eq('id', tripId)\n        .single();\n\n      if (error) {\n        console.error(\"Error fetching ZapRoad data:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load ZapRoad trip details\"\n        });\n        navigate('/dashboard');\n        return;\n      }\n\n      // Cast the raw data to our extended type\n      const data = rawData as ZapRoadTrip;\n      console.log(\"Raw ZapRoad data loaded:\", rawData);\n      console.log(\"ZapRoad data after casting:\", data);\n\n      // Handle geoposition data\n      let validGeopositions: GeoPosition[] = [];\n\n      // 1. Try to get locations from geoposition field first\n      if (data.geoposition) {\n        try {\n          console.log(\"Raw geoposition data:\", data.geoposition);\n          const geoData = typeof data.geoposition === 'string' \n            ? JSON.parse(data.geoposition) \n            : data.geoposition;\n          console.log(\"Parsed geoposition data:\", geoData);\n\n          const geoArray = Array.isArray(geoData) ? geoData : [geoData];\n          console.log(\"Geoposition array:\", geoArray);\n          \n          validGeopositions = geoArray.filter(pos => {\n            const isValid = pos &&\n              pos.name &&\n              pos.type &&\n              Array.isArray(pos.coordinates) &&\n              pos.coordinates.length === 2 &&\n              !isNaN(pos.coordinates[0]) &&\n              !isNaN(pos.coordinates[1]);\n            \n            if (!isValid) {\n              console.log(\"Invalid geoposition:\", pos);\n            }\n            return isValid;\n          });\n\n          console.log(\"Valid geopositions from geoposition field:\", validGeopositions);\n        } catch (e) {\n          console.error(\"Error parsing ZapRoad geoposition data:\", e);\n        }\n      }\n\n      // 2. If no valid geopositions, create them from cities data\n      if (validGeopositions.length === 0) {\n        const cities: { name: string; coordinates: string | null; type: string }[] = [];\n        \n        // Add starting city\n        if (data.starting_city && data.starting_city_coordinates) {\n          console.log(\"Starting city data:\", {\n            city: data.starting_city,\n            coordinates: data.starting_city_coordinates\n          });\n          cities.push({\n            name: data.starting_city,\n            coordinates: data.starting_city_coordinates,\n            type: 'start'\n          });\n        }\n\n        // Add stopover cities\n        if (data.stopover_cities) {\n          try {\n            console.log(\"Raw stopover cities:\", data.stopover_cities);\n            const stopovers = typeof data.stopover_cities === 'string' \n              ? JSON.parse(data.stopover_cities) \n              : data.stopover_cities;\n            console.log(\"Parsed stopover cities:\", stopovers);\n\n            if (Array.isArray(stopovers)) {\n              cities.push(...stopovers.map(city => ({\n                name: city.name,\n                coordinates: city.coordinates,\n                type: 'stopover'\n              })));\n            }\n          } catch (e) {\n            console.error(\"Error parsing stopover cities:\", e);\n          }\n        }\n\n        // Add end city\n        if (data.end_city && data.end_city_coordinates) {\n          console.log(\"End city data:\", {\n            city: data.end_city,\n            coordinates: data.end_city_coordinates\n          });\n          cities.push({\n            name: data.end_city,\n            coordinates: data.end_city_coordinates,\n            type: 'end'\n          });\n        }\n\n        console.log(\"Cities array before conversion:\", cities);\n\n        // Convert cities to geopositions\n        validGeopositions = cities\n          .filter(city => city.coordinates)\n          .map(city => {\n            try {\n              console.log(\"Processing city:\", city);\n              const coords = JSON.parse(city.coordinates!);\n              console.log(\"Parsed coordinates:\", coords);\n              \n              if (Array.isArray(coords) && coords.length === 2) {\n                return {\n                  name: city.name,\n                  type: city.type,\n                  coordinates: [Number(coords[0]), Number(coords[1])] as [number, number]\n                };\n              }\n              return null;\n            } catch (e) {\n              console.error(`Error parsing coordinates for city ${city.name}:`, e);\n              return null;\n            }\n          })\n          .filter((pos): pos is GeoPosition => pos !== null);\n\n        console.log(\"Final valid geopositions from cities data:\", validGeopositions);\n      }\n\n      // Set the geopositions\n      setGeopositions(validGeopositions);\n\n      // Set coordinates directly from the first valid geoposition\n      if (validGeopositions.length > 0) {\n        console.log(\"Setting initial coordinates:\", validGeopositions[0].coordinates);\n        setTripCoordinates(validGeopositions[0].coordinates);\n      }\n\n      // Update the ZapRoad trip state\n      const updatedZapRoadTrip: ZapRoadTrip = {\n        ...data,\n        type: 'ZapRoad' as const,\n        description: data.special_requirements || null,\n        geoposition: validGeopositions\n      };\n      console.log(\"Final ZapRoad trip state:\", updatedZapRoadTrip);\n      setZapRoadTrip(updatedZapRoadTrip);\n\n      setLoading(false);\n      \n      // Set AI content loading state based on whether content exists\n      setIsAiContentLoading(!data.ai_content);\n      if (!data.ai_content) {\n        // Reset polling count when starting fresh\n        pollingCountRef.current = 0;\n      }\n    } catch (error) {\n      console.error(\"Error in ZapRoad data fetch:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load ZapRoad trip details\"\n      });\n      navigate('/dashboard');\n    }\n  };\n\n  const handleSave = async () => {\n    if (!trip && !zapOutTrip && !zapRoadTrip) return;\n\n    try {\n      setLoading(true);\n\n      // Convert geopositions to database-compatible JSON format\n      const geopositionJson = geopositions.map(pos => ({\n        name: pos.name,\n        type: pos.type,\n        coordinates: pos.coordinates\n      })) as unknown as Json;\n\n      if (zapOutTrip) {\n        // Handle ZapOut data save\n        const zapOutUpdateData = {\n          title: zapOutTrip.title,\n          category: zapOutTrip.category,\n          additional_needs: zapOutTrip.notes || zapOutTrip.description,\n          location: zapOutTrip.location,\n          geoposition: geopositionJson,\n          coordinates: geopositions.length > 0 \n            ? JSON.stringify(geopositions[0].coordinates)\n            : null,\n          activity_types: zapOutTrip.activity_types || [],\n          activity_times: zapOutTrip.activity_times || []\n        };\n\n        const { error: zapoutError } = await supabase\n          .from('zapout_data')\n          .update(zapOutUpdateData)\n          .eq('id', tripId);\n\n        if (zapoutError) throw zapoutError;\n\n        toast({\n          title: \"Success\",\n          description: \"ZapOut trip details saved successfully\"\n        });\n        navigate('/dashboard');\n        return;\n      }\n\n      if (zapRoadTrip) {\n        // Handle ZapRoad data save\n        const geopositionString = JSON.stringify(\n          geopositions.map(pos => ({\n            name: pos.name,\n            type: pos.type,\n            coordinates: pos.coordinates\n          }))\n        );\n        console.log('Geoposition before save:', {\n          raw: geopositions,\n          stringified: geopositionString\n        });\n\n        // Prepare stopover cities data\n        const stopoverCities = geopositions\n          .slice(1, -1) // Exclude start and end points\n          .map(pos => ({\n            name: pos.name,\n            coordinates: JSON.stringify(pos.coordinates)\n          }));\n        \n        console.log('Stopover cities before stringifying:', stopoverCities);\n        const stopoverCitiesString = JSON.stringify(stopoverCities);\n        console.log('Stopover cities after stringifying:', stopoverCitiesString);\n\n        // Handle coordinates\n        const startCoords = geopositions.length > 0 \n          ? JSON.stringify(geopositions[0].coordinates)\n          : zapRoadTrip.starting_city_coordinates;\n        const endCoords = geopositions.length > 1 \n          ? JSON.stringify(geopositions[geopositions.length - 1].coordinates)\n          : zapRoadTrip.end_city_coordinates;\n\n        console.log('Coordinates before save:', {\n          start: startCoords,\n          end: endCoords\n        });\n\n        const zapRoadUpdateData = {\n          title: zapRoadTrip.title,\n          category: zapRoadTrip.category,\n          special_requirements: zapRoadTrip.notes || zapRoadTrip.description,\n          starting_city: zapRoadTrip.starting_city,\n          starting_city_coordinates: startCoords,\n          end_city: zapRoadTrip.end_city,\n          end_city_coordinates: endCoords,\n          geoposition: geopositionString,\n          stopover_cities: stopoverCitiesString\n        };\n\n        console.log('Final ZapRoad update data:', zapRoadUpdateData);\n\n        const { error: zaproadError } = await supabase\n          .from('zaproad_data')\n          .update(zapRoadUpdateData)\n          .eq('id', tripId);\n\n        if (zaproadError) {\n          console.error('ZapRoad update error:', zaproadError);\n          throw zaproadError;\n        }\n\n        toast({\n          title: \"Success\",\n          description: \"ZapRoad trip details saved successfully\"\n        });\n        navigate('/dashboard');\n        return;\n      }\n\n      if (trip) {\n        // Handle regular trip save\n        const tripUpdateData: Database['public']['Tables']['trips']['Update'] = {\n          transportation_details: JSON.stringify(trip.transportation_details),\n          accommodation_details: JSON.stringify(trip.accommodation_details),\n          geoposition: geopositionJson,\n          category: trip.category,\n          notes: trip.notes,\n          budget: trip.budget\n        };\n\n        const { error: updateError } = await supabase\n          .from('trips')\n          .update(tripUpdateData)\n          .eq('id', trip.id);\n\n        if (updateError) throw updateError;\n\n        toast({\n          title: \"Success\",\n          description: \"Trip details saved successfully\"\n        });\n        navigate('/dashboard');\n      }\n    } catch (error) {\n      console.error('Error saving trip details:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save trip details. Please try again.\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const showComingSoonModal = (feature: string) => {\n    toast({\n      title: \"✨ Coming Soon!\",\n      description: `${feature} will be available soon. Stay tuned for updates!`,\n      className: \"backdrop-blur-sm\",\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        padding: '2rem',\n        background: 'rgba(255, 255, 255, 0.8)',\n        borderRadius: '1rem',\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)',\n        animation: 'fadeIn 0.3s ease-out',\n        zIndex: 50,\n        textAlign: 'center',\n        color: '#1a1a1a',\n        fontSize: '1.1rem',\n        fontWeight: 500,\n        width: 'auto',\n        minWidth: '300px',\n        maxWidth: '90vw',\n      },\n    });\n  };\n\n  const openGoogleMapsNavigation = (geopositions: GeoPosition[]) => {\n    if (geopositions.length === 0) return;\n    \n    // For ZapOut, use all locations to create a multi-stop route\n    const locations = geopositions.map(pos => {\n      const [lng, lat] = pos.coordinates;\n      return `${lat},${lng}`;\n    }).join('/');\n    \n    // Open Google Maps in a new tab with all locations\n    window.open(`https://www.google.com/maps/dir/${locations}`, '_blank');\n  };\n\n  // Modify the loading check to include AI content loading and prevent scrolling\n  useEffect(() => {\n    if (loading || isAiContentLoading) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'auto';\n    }\n    \n    return () => {\n      document.body.style.overflow = 'auto';\n    };\n  }, [loading, isAiContentLoading]);\n\n  // After loading each trip, set the correct shareable state\n  useEffect(() => {\n    if (trip && typeof trip.is_shareable === 'boolean') setIsShareable(trip.is_shareable);\n    if (zapOutTrip && typeof zapOutTrip.is_shareable === 'boolean') setIsZapOutShareable(zapOutTrip.is_shareable);\n    if (zapRoadTrip && typeof zapRoadTrip.is_shareable === 'boolean') setIsZapRoadShareable(zapRoadTrip.is_shareable);\n  }, [trip, zapOutTrip, zapRoadTrip]);\n\n  const handleShareClick = async () => {\n    if (isZapOutTrip && zapOutTrip?.id && !isZapOutShareable) {\n      const { error } = await supabase\n        .from('zapout_data')\n        .update({ is_shareable: true })\n        .eq('id', zapOutTrip.id);\n      if (!error) setIsZapOutShareable(true);\n    } else if (isZapRoadTrip && zapRoadTrip?.id && !isZapRoadShareable) {\n      const { error } = await supabase\n        .from('zaproad_data')\n        .update({ is_shareable: true })\n        .eq('id', zapRoadTrip.id);\n      if (!error) setIsZapRoadShareable(true);\n    } else if (trip?.id && !isShareable) {\n      const { error } = await supabase\n        .from('trips')\n        .update({ is_shareable: true })\n        .eq('id', trip.id);\n      if (!error) setIsShareable(true);\n    }\n    setShareDialogOpen(true);\n  };\n\n  useEffect(() => {\n    supabase.auth.getUser().then(({ data: { user } }) => {\n      setCurrentUserId(user?.id ?? null);\n    });\n  }, []);\n\n  const isOwner =\n    (trip && currentUserId && trip.user_id === currentUserId) ||\n    (zapOutTrip && currentUserId && zapOutTrip.user_id === currentUserId) ||\n    (zapRoadTrip && currentUserId && zapRoadTrip.user_id === currentUserId);\n\n  const handleChecklistChange = (id: number) => {\n    setTravelChecklist(prev => \n      prev.map(item => \n        item.id === id ? { ...item, checked: !item.checked } : item\n      )\n    );\n  };\n\n  // Add this function to fetch note blocks\n  const fetchNoteBlocks = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('trip_notes')\n        .select('*')\n        .eq('trip_id', tripId)\n        .eq('trip_type', isZapOutTrip ? 'zapout' : isZapRoadTrip ? 'zaproad' : 'zaptrip')\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      setNoteBlocks(data || []);\n    } catch (error) {\n      console.error('Error fetching note blocks:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load notes\"\n      });\n    }\n  };\n\n  // Add this function to create a new note block\n  const createNoteBlock = async () => {\n    if (!newNoteTitle.trim()) return;\n\n    try {\n      setIsSaving(true);\n      const newNote: Omit<NoteBlock, 'id' | 'created_at'> = {\n        title: newNoteTitle,\n        content: '',\n        trip_id: tripId!,\n        trip_type: isZapOutTrip ? 'zapout' : isZapRoadTrip ? 'zaproad' : 'zaptrip'\n      };\n\n      const { data, error } = await supabase\n        .from('trip_notes')\n        .insert([newNote])\n        .select()\n        .single();\n\n      if (error) throw error;\n      setNoteBlocks(prev => [data, ...prev]);\n      setNewNoteTitle('');\n    } catch (error) {\n      console.error('Error creating note block:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create note\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Add debounced update function\n  const debouncedUpdateNote = useCallback(\n    debounce(async (id: string, content: string) => {\n      try {\n        const { error } = await supabase\n          .from('trip_notes')\n          .update({ content })\n          .eq('id', id);\n\n        if (error) throw error;\n      } catch (error) {\n        console.error('Error updating note:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to save changes\"\n        });\n      }\n    }, 1000),\n    []\n  );\n\n  // Add this function to update a note block\n  const updateNoteBlock = async (id: string, content: string) => {\n    setNoteBlocks(prev => \n      prev.map(note => note.id === id ? { ...note, content } : note)\n    );\n    debouncedUpdateNote(id, content);\n  };\n\n  // Add this function to delete a note block\n  const deleteNoteBlock = async (id: string) => {\n    try {\n      setIsSaving(true);\n      const { error } = await supabase\n        .from('trip_notes')\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      setNoteBlocks(prev => prev.filter(note => note.id !== id));\n    } catch (error) {\n      console.error('Error deleting note block:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete note\"\n      });\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Add this effect to fetch note blocks when the notes section is opened\n  useEffect(() => {\n    if (showNotesSection) {\n      fetchNoteBlocks();\n    }\n  }, [showNotesSection, tripId]);\n\n  // Add these functions in the TripDetails component\n  const fetchChecklistItems = async () => {\n    try {\n      const { data: items, error: itemsError } = await supabase\n        .from('trip_checklist_items')\n        .select('*')\n        .eq('trip_id', tripId)\n        .eq('trip_type', isZapOutTrip ? 'zapout' : isZapRoadTrip ? 'zaproad' : 'zaptrip')\n        .order('created_at', { ascending: true });\n\n      if (itemsError) throw itemsError;\n\n      // Fetch subitems for each item\n      const itemsWithSubitems = await Promise.all(\n        items.map(async (item) => {\n          const { data: subitems, error: subitemsError } = await supabase\n            .from('trip_checklist_subitems')\n            .select('*')\n            .eq('parent_id', item.id)\n            .order('created_at', { ascending: true });\n\n          if (subitemsError) throw subitemsError;\n\n          return {\n            ...item,\n            subitems: subitems || []\n          };\n        })\n      );\n\n      setChecklistItems(itemsWithSubitems);\n    } catch (error) {\n      console.error('Error fetching checklist items:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load checklist items\"\n      });\n    }\n  };\n\n  const createChecklistItem = async () => {\n    if (!newItemTitle.trim()) return;\n\n    try {\n      setIsSavingChecklist(true);\n      const newItem = {\n        title: newItemTitle,\n        trip_id: tripId!,\n        trip_type: isZapOutTrip ? 'zapout' : isZapRoadTrip ? 'zaproad' : 'zaptrip'\n      };\n\n      const { data, error } = await supabase\n        .from('trip_checklist_items')\n        .insert([newItem])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setChecklistItems(prev => [...prev, { ...data, subitems: [] }]);\n      setNewItemTitle('');\n    } catch (error) {\n      console.error('Error creating checklist item:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create checklist item\"\n      });\n    } finally {\n      setIsSavingChecklist(false);\n    }\n  };\n\n  const createSubItem = async (parentId: string) => {\n    if (!newSubItemTitle.trim()) return;\n\n    try {\n      setIsSavingChecklist(true);\n      const newSubItem = {\n        title: newSubItemTitle,\n        parent_id: parentId\n      };\n\n      const { data, error } = await supabase\n        .from('trip_checklist_subitems')\n        .insert([newSubItem])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      setChecklistItems(prev =>\n        prev.map(item =>\n          item.id === parentId\n            ? { ...item, subitems: [...item.subitems, data] }\n            : item\n        )\n      );\n      setNewSubItemTitle('');\n    } catch (error) {\n      console.error('Error creating sub-item:', error);\n    } finally {\n      setIsSavingChecklist(false);\n    }\n  };\n\n  const toggleItemCheck = async (itemId: string) => {\n    try {\n      const item = checklistItems.find(i => i.id === itemId);\n      if (!item) return;\n\n      const { error } = await supabase\n        .from('trip_checklist_items')\n        .update({ is_checked: !item.is_checked })\n        .eq('id', itemId);\n\n      if (error) throw error;\n\n      setChecklistItems(prev =>\n        prev.map(i =>\n          i.id === itemId\n            ? { ...i, is_checked: !i.is_checked }\n            : i\n        )\n      );\n    } catch (error) {\n      console.error('Error updating checklist item:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update checklist item\"\n      });\n    }\n  };\n\n  const toggleSubItemCheck = async (itemId: string, subItemId: string) => {\n    try {\n      const item = checklistItems.find(i => i.id === itemId);\n      const subItem = item?.subitems.find(s => s.id === subItemId);\n      if (!subItem) return;\n\n      const { error } = await supabase\n        .from('trip_checklist_subitems')\n        .update({ is_checked: !subItem.is_checked })\n        .eq('id', subItemId);\n\n      if (error) throw error;\n\n      setChecklistItems(prev =>\n        prev.map(i =>\n          i.id === itemId\n            ? {\n                ...i,\n                subitems: i.subitems.map(s =>\n                  s.id === subItemId\n                    ? { ...s, is_checked: !s.is_checked }\n                    : s\n                )\n              }\n            : i\n        )\n      );\n    } catch (error) {\n      console.error('Error updating sub-item:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update sub-item\"\n      });\n    }\n  };\n\n  const deleteChecklistItem = async (itemId: string) => {\n    try {\n      setIsSavingChecklist(true);\n      const { error } = await supabase\n        .from('trip_checklist_items')\n        .delete()\n        .eq('id', itemId);\n\n      if (error) throw error;\n\n      setChecklistItems(prev => prev.filter(item => item.id !== itemId));\n      toast({\n        title: \"Success\",\n        description: \"Checklist item deleted successfully\"\n      });\n    } catch (error) {\n      console.error('Error deleting checklist item:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete checklist item\"\n      });\n    } finally {\n      setIsSavingChecklist(false);\n    }\n  };\n\n  const deleteSubItem = async (itemId: string, subItemId: string) => {\n    try {\n      setIsSavingChecklist(true);\n      const { error } = await supabase\n        .from('trip_checklist_subitems')\n        .delete()\n        .eq('id', subItemId);\n\n      if (error) throw error;\n\n      setChecklistItems(prev =>\n        prev.map(item =>\n          item.id === itemId\n            ? {\n                ...item,\n                subitems: item.subitems.filter(s => s.id !== subItemId)\n              }\n            : item\n        )\n      );\n      toast({\n        title: \"Success\",\n        description: \"Sub-item deleted successfully\"\n      });\n    } catch (error) {\n      console.error('Error deleting sub-item:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete sub-item\"\n      });\n    } finally {\n      setIsSavingChecklist(false);\n    }\n  };\n\n  // Add this effect to fetch checklist items when the notes section is opened\n  useEffect(() => {\n    if (showNotesSection) {\n      fetchChecklistItems();\n    }\n  }, [showNotesSection, tripId]);\n\n  if (loading || isAiContentLoading) {\n    return (\n      <AnimatePresence>\n        <LoadingOverlay />\n      </AnimatePresence>\n    );\n  }\n  if (!trip && !zapOutTrip && !zapRoadTrip) {\n    return <div className=\"container mx-auto p-8\">Trip not found</div>;\n  }\n\n  const isZapOutTrip = isZapOutPath || zapOutTrip !== null || trip && trip.trip_type === 'ZapOut';\n  const isZapRoadTrip = isZapRoadPath || zapRoadTrip !== null || trip && trip.trip_type === 'ZapRoad';\n\n  // Determine the correct title and description based on the trip type\n  const tripTitle = zapOutTrip ? zapOutTrip.title : zapRoadTrip ? zapRoadTrip.title : trip?.title || '';\n  const tripDescription = zapOutTrip ? zapOutTrip.description || '' : \n                         zapRoadTrip ? zapRoadTrip.description || '' : \n                         trip?.description || '';\n\n  return (\n    <div className=\"min-h-screen bg-[#fcfcfc]\">\n      {/* New Header Bar */}\n      <div className=\"bg-white sticky top-0 z-50 shadow-sm\">\n        <div className=\"max-w-[1440px] mx-auto px-4 sm:px-6 lg:px-8 py-3 flex justify-between items-center\">\n          {/* Back Button */}\n          <button\n            onClick={() => {\n              // Check if user came from map dashboard\n              const previousPage = localStorage.getItem('tripDetailsPreviousPage');\n              if (previousPage === 'mapDashboard') {\n                // Clear the storage and navigate to map dashboard\n                localStorage.removeItem('tripDetailsPreviousPage');\n                navigate('/map-dashboard');\n              } else {\n                // Default behavior - go to regular dashboard\n                navigate('/dashboard');\n              }\n            }}\n            className=\"flex items-center text-gray-700 hover:text-blue-600 transition-colors\"\n          >\n            <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M10 19l-7-7m0 0l7-7m-7 7h18\"/>\n            </svg>\n            <span className=\"hidden sm:inline\">\n              {localStorage.getItem('tripDetailsPreviousPage') === 'mapDashboard' \n                ? t('details.backToDashboard')\n                : t('details.backToDashboard')}\n            </span>\n          </button>\n\n          {/* Edit/Save Button */}\n          {isOwner && (\n            <>\n              <div className=\"flex items-center gap-2\">\n                {!isZapOutTrip && (\n                  <button\n                    onClick={() => setShowNotesSection(!showNotesSection)}\n                    className=\"flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all duration-200\"\n                  >\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"/>\n                    </svg>\n                    {t('details.notes')}\n                  </button>\n                )}\n                <button\n                  onClick={() => {\n                    if (isEditing) {\n                      handleSave();\n                    } else {\n                      setIsEditing(true);\n                    }\n                  }}\n                  className=\"flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all duration-200\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\"/>\n                  </svg>\n                  {isEditing ? t('details.saveChanges') : t('details.editDetails')}\n                </button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-w-[1440px] mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-12 gap-6\">\n          {/* Map Section - Now Full Width Above Content on Mobile, Left Side on Desktop */}\n          <div className=\"xl:col-span-8 xl:row-span-2 space-y-6\">\n            {/* Map Card with Trip Title */}\n            <div className=\"bg-white rounded-xl shadow-lg overflow-hidden border border-gray-100\">\n              <div className=\"p-6\">\n                <h1 className=\"text-3xl font-bold text-[#030303] mb-2\">\n                  {tripTitle}\n                </h1>\n                {tripDescription && (\n                  <p className=\"mb-4 text-sm text-[#62626a]\">{tripDescription}</p>\n                )}\n                <TripMap \n                  height=\"300px\"\n                  geopositions={geopositions}\n                  showTerrain={true}\n                  onMarkerClick={(position) => {\n                    setTripCoordinates(position.coordinates);\n                  }}\n                  initialCenter={tripCoordinates}\n                  className=\"rounded-xl overflow-hidden shadow-inner h-[300px] sm:h-[400px] lg:h-[600px]\"\n                />\n              </div>\n            </div>\n\n            {/* Location Details with Modern Cards */}\n            <div className=\"bg-white rounded-xl shadow-lg border border-gray-100\">\n              <div className=\"p-4 border-b border-gray-100 bg-white flex justify-between items-center cursor-pointer\"\n                   onClick={() => setIsStopsExpanded(!isStopsExpanded)}>\n                <h2 className=\"text-xl font-bold text-[#030303]\">\n                  {t('details.stopsAndPoints')}\n                </h2>\n                <svg \n                  className={`w-5 h-5 transform transition-transform ${isStopsExpanded ? 'rotate-180' : ''}`} \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  viewBox=\"0 0 24 24\"\n                >\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              </div>\n              <div className={`relative ${!isStopsExpanded ? 'max-h-[200px]' : 'max-h-none'} overflow-hidden`}>\n                <div className=\"p-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {geopositions.map((pos, index) => (\n                      <div \n                        key={`${pos.name}-${index}`}\n                        className=\"group relative bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 hover:border-blue-200 overflow-hidden\"\n                      >\n                        <div className=\"absolute top-0 left-0 w-1 h-full bg-gradient-to-b from-blue-500 to-indigo-500 rounded-tl-lg rounded-bl-lg\"></div>\n                        <div className=\"p-4 pl-5\">\n                          <div className=\"flex items-center mb-2\">\n                            <div className=\"flex-shrink-0 w-7 h-7 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-full flex items-center justify-center font-semibold text-sm\">\n                              {index + 1}\n                            </div>\n                            <h3 className=\"ml-3 font-semibold text-base text-gray-800 group-hover:text-blue-600 transition-colors\">\n                              {pos.name}\n                            </h3>\n                          </div>\n                          {pos.description && (\n                            <p className=\"text-gray-600 text-sm mb-2\">{pos.description}</p>\n                          )}\n                          <div className=\"flex items-center text-xs text-gray-500\">\n                            <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"/>\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"/>\n                            </svg>\n                            {(pos as any).Adresse || `${pos.coordinates[1].toFixed(4)}, ${pos.coordinates[0].toFixed(4)}`}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n                {!isStopsExpanded && (\n                  <div className=\"absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-white to-transparent pointer-events-none\"></div>\n                )}\n              </div>\n              {!isStopsExpanded && geopositions.length > 2 && (\n                <div className=\"p-4 border-t border-gray-100 text-center\">\n                  <button\n                    onClick={() => setIsStopsExpanded(true)}\n                    className=\"text-blue-600 hover:text-blue-700 text-sm font-medium\"\n                  >\n                    {t('details.showAllStops')} ({geopositions.length})\n                  </button>\n                </div>\n              )}\n            </div>\n\n            {/* Event Suggestions Section */}\n            <EventSuggestions \n              location={trip?.location || zapOutTrip?.location || zapRoadTrip?.starting_city || ''} \n            />\n\n            {/* Ticketmaster Events Section - Only show if we have valid coordinates */}\n            {geopositions.length > 0 && (\n              <TicketmasterEvents \n                city={trip?.location || zapOutTrip?.location || zapRoadTrip?.starting_city || ''} \n                coordinates={geopositions[0].coordinates}\n              />\n            )}\n          </div>\n\n          {/* Right Sidebar - Trip Information */}\n          <div className=\"xl:col-span-4 space-y-6\">\n            {/* Combined Info Card for Regular Trips or Trip Type Details */}\n            <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden\">\n              <div className=\"p-4\">\n                {isZapOutTrip ? (\n                  <TripZapOutDetails \n                    tripId={tripId}\n                    isDirectZapOut={!!zapOutTrip}\n                  />\n                ) : isZapRoadTrip ? (\n                  <TripZapRoadDetails \n                    tripId={tripId}\n                    isDirectZapRoad={!!zapRoadTrip}\n                  />\n                ) : (\n                  <div className=\"space-y-6\">\n                    {/* ZapTrip Details Title */}\n                    <h3 className=\"text-lg font-semibold mb-4\">{t('zapTrip.details.title')}</h3>\n                    {/* Basic Info Section */}\n                    <div>\n                      <TripBasicInfo\n                        startDate={trip?.start_date || ''}\n                        endDate={trip?.end_date || ''}\n                        location={trip?.location || ''}\n                        category={trip?.category || null}\n                        activityTypes={[]}\n                        budget={trip?.budget || null}\n                        isEditing={isEditing}\n                        isZapOutTrip={false}\n                        isZapRoadTrip={false}\n                        hideBudget={false}\n                        onCategoryChange={category => setTrip(trip ? {\n                          ...trip,\n                          category: category as Trip['category']\n                        } : null)}\n                        onBudgetChange={budget => setTrip(trip ? {\n                          ...trip,\n                          budget: budget as Trip['budget']\n                        } : null)}\n                      />\n                    </div>\n\n                    {/* Transportation Section */}\n                    <div className=\"pt-6 border-t border-gray-100\">\n\n                      <TripTransportation \n                        details={trip?.transportation_details || {}} \n                        isEditing={isEditing}\n                        onChange={details => setTrip(trip ? {\n                          ...trip,\n                          transportation_details: details as Trip['transportation_details']\n                        } : null)}\n                      />\n                    </div>\n\n                    {/* Accommodation Section */}\n                    <div className=\"pt-6 border-t border-gray-100\">\n                      <TripAccommodation \n                        details={trip?.accommodation_details || {}}\n                        isEditing={isEditing}\n                        onChange={details => setTrip(trip ? {\n                          ...trip,\n                          accommodation_details: details as Trip['accommodation_details']\n                        } : null)}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Notes Section with Action Buttons */}\n            <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden\">\n              <div className=\"p-4\">\n                {/* Action Buttons */}\n                <div className=\"mt-6 space-y-3\">\n                  {/* Map View Button - Show for ZapOut and regular trips */}\n                  {(isZapOutTrip || (!isZapOutTrip && !isZapRoadTrip)) && (\n                    <>\n                      <button\n                        onClick={() => navigate('/map-dashboard', { \n                          state: { \n                            selectedTripId: tripId, \n                            tripType: isZapOutTrip ? 'zapout' : 'zaptrip' \n                          } \n                        })}\n                        className=\"w-full flex items-center justify-center px-4 py-2 bg-[#1d1d1e] text-white rounded-lg hover:bg-[#2d2d2e] transition-colors\"\n                      >\n                        <Map className=\"w-5 h-5 mr-2\" />\n                        {t('types.zapOut.details.viewOnMap')}\n                      </button>\n\n                      {/* Google Maps Button - Only show if we have coordinates */}\n                      {geopositions.length > 0 && (\n                        <button\n                          onClick={() => openGoogleMapsNavigation(geopositions)}\n                          className=\"w-full flex items-center justify-center px-4 py-2 bg-[#1d1d1e] text-white rounded-lg hover:bg-[#2d2d2e] transition-colors\"\n                        >\n                          <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\"/>\n                          </svg>\n                          {t('navigation.viewOnGoogleMaps')}\n                        </button>\n                      )}\n                    </>\n                  )}\n\n                  {/* Navigation Button - Only show for ZapRoad trips */}\n                  {isZapRoadTrip && geopositions.length > 0 && (\n                    <button\n                      onClick={() => openGoogleMapsNavigation(geopositions)}\n                      className=\"w-full flex items-center justify-center px-4 py-2 bg-[#1d1d1e] text-white rounded-lg hover:bg-[#2d2d2e] transition-colors\"\n                    >\n                      <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\"/>\n                      </svg>\n                      {t('navigation.startNavigation')}\n                    </button>\n                  )}\n\n                  {/* Share Button */}\n                  {isOwner && (\n                    <>\n                      <button\n                        onClick={handleShareClick}\n                        className=\"w-full flex items-center justify-center px-4 py-2 bg-white text-[#1d1d1e] border border-[#62626a] rounded-lg hover:bg-[#fcfcfc] transition-all duration-200\"\n                      >\n                        <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\"/>\n                        </svg>\n                        {t('details.shareTrip')}\n                      </button>\n                      <TripShareDialog open={shareDialogOpen} onOpenChange={setShareDialogOpen} shareUrl={shareUrl} />\n                    </>\n                  )}\n\n                  {/* Share to Community Button */}\n                  {isOwner && (\n                    <button\n                      onClick={() => showComingSoonModal('Community sharing')}\n                      className=\"w-full flex items-center justify-center px-4 py-2 bg-white text-[#1d1d1e] border border-[#62626a] rounded-lg hover:bg-[#fcfcfc] transition-all duration-200\"\n                    >\n                      <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n                      </svg>\n                      {t('details.shareToCommunity')}\n                    </button>\n                  )}\n\n                  {/* Print Button */}\n                  <button\n                    onClick={() => {\n                      const tripData = {\n                        title: tripTitle,\n                        description: tripDescription,\n                        startDate: trip?.start_date || zapOutTrip?.date || zapRoadTrip?.start_date,\n                        endDate: trip?.end_date || zapRoadTrip?.end_date,\n                        category: trip?.category || zapOutTrip?.category || zapRoadTrip?.category || undefined,\n                        notes: trip?.notes || zapOutTrip?.additional_needs || zapRoadTrip?.special_requirements || undefined,\n                        geopositions: geopositions.map(pos => ({\n                          ...pos,\n                          type: pos.type || 'point',\n                          coordinates: pos.coordinates\n                        })),\n                        ai_content: trip?.ai_content || zapOutTrip?.ai_content || zapRoadTrip?.ai_content\n                      };\n                      generateTripPDF(tripData);\n                    }}\n                    className=\"w-full flex items-center justify-center px-4 py-2 bg-white text-[#1d1d1e] border border-[#62626a] rounded-lg hover:bg-[#fcfcfc] transition-all duration-200\"\n                  >\n                    <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z\"/>\n                    </svg>\n                    {t('details.printTrip')}\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* AI Travel Tips Section */}\n        <div className=\"mt-6\">\n          <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 overflow-hidden\">\n            <div className=\"p-4 border-b border-gray-100 bg-white\">\n              <h2 className=\"text-xl font-bold text-[#030303] flex items-center\">\n                <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 10V3L4 14h7v7l9-11h-7z\"/>\n                </svg>\n                {t('details.travelTips')}\n              </h2>\n            </div>\n            <div className=\"p-4 sm:p-8\">\n              <div className=\"w-full max-w-full mx-auto overflow-hidden\">\n                {trip?.ai_content && <TripAIContent content={trip.ai_content} tripType={trip?.trip_type || trip?.type || 'ZapTrip'} />}\n                {zapOutTrip?.ai_content && <TripAIContent content={zapOutTrip.ai_content} tripType={zapOutTrip?.type || 'ZapOut'} />}\n                {zapRoadTrip?.ai_content && <TripAIContent content={zapRoadTrip.ai_content} tripType={zapRoadTrip?.type || 'ZapRoad'} />}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Trip Type Specific Details */}\n        <div className=\"mt-6\">\n        </div>\n      </div>\n\n      <AnimatePresence>\n        {showNotesSection && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            transition={{ duration: 0.3 }}\n            className=\"fixed inset-0 bg-white z-50 overflow-y-auto\"\n          >\n            <div className=\"max-w-[1440px] mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n              {/* Header */}\n              <div className=\"flex justify-between items-center mb-8\">\n                <h2 className=\"text-2xl font-bold\">{t('details.notes')}</h2>\n                <button\n                  onClick={() => setShowNotesSection(false)}\n                  className=\"flex items-center px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-all duration-200\"\n                >\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\"/>\n                  </svg>\n                  {t('details.close')}\n                </button>\n              </div>\n\n              {/* Content */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {/* Notes Section */}\n                <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 p-6\">\n                  <div className=\"flex flex-col space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">{t('details.notesInPage')}</h3>\n                    \n                    {/* New Note Input */}\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={newNoteTitle}\n                        onChange={(e) => setNewNoteTitle(e.target.value)}\n                        placeholder={t('details.notesPlaceholder')}\n                        className=\"flex-1\"\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            createNoteBlock();\n                          }\n                        }}\n                      />\n                      <Button\n                        onClick={createNoteBlock}\n                        disabled={isSaving || !newNoteTitle.trim()}\n                        className=\"shrink-0\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        {t('details.addNote')}\n                      </Button>\n                    </div>\n\n                    {/* Note Blocks */}\n                    <ScrollArea className=\"h-[600px] pr-4\">\n                      <div className=\"space-y-4\">\n                        {noteBlocks.map((note) => (\n                          <div\n                            key={note.id}\n                            className=\"bg-gray-50 rounded-lg p-4 space-y-2 hover:bg-gray-100 transition-colors\"\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <h4 className=\"font-medium\">{note.title}</h4>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setEditingNoteId(editingNoteId === note.id ? null : note.id)}\n                                  className=\"hover:bg-gray-200\"\n                                >\n                                  {editingNoteId === note.id ? (\n                                    <Save className=\"w-4 h-4\" />\n                                  ) : (\n                                    <Edit2 className=\"w-4 h-4\" />\n                                  )}\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => deleteNoteBlock(note.id)}\n                                  className=\"hover:bg-red-100 hover:text-red-600\"\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n                            {editingNoteId === note.id ? (\n                              <Textarea\n                                value={note.content}\n                                onChange={(e) => updateNoteBlock(note.id, e.target.value)}\n                                placeholder=\"Write your note here...\"\n                                className=\"min-h-[100px] resize-none\"\n                                autoFocus\n                              />\n                            ) : (\n                              <p className=\"text-gray-600 whitespace-pre-wrap\">\n                                {note.content || 'No content yet...'}\n                              </p>\n                            )}\n                            <p className=\"text-xs text-gray-400\">\n                              {new Date(note.created_at).toLocaleDateString()}\n                            </p>\n                          </div>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </div>\n                </div>\n\n                {/* Travel Checklist Section */}\n                <div className=\"bg-white rounded-xl shadow-lg border border-gray-100 p-6\">\n                  <div className=\"flex flex-col space-y-4\">\n                    <h3 className=\"text-lg font-semibold\">{t('details.checklist.title')}</h3>\n                    \n                    {/* New Item Input */}\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={newItemTitle}\n                        onChange={(e) => setNewItemTitle(e.target.value)}\n                        placeholder={t('details.checklist.newItem')}\n                        className=\"flex-1\"\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            createChecklistItem();\n                          }\n                        }}\n                      />\n                      <Button\n                        onClick={createChecklistItem}\n                        disabled={isSavingChecklist || !newItemTitle.trim()}\n                        className=\"shrink-0\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        {t('details.checklist.addItem')}\n                      </Button>\n                    </div>\n\n                    {/* Checklist Items */}\n                    <ScrollArea className=\"h-[600px] pr-4\">\n                      <div className=\"space-y-4\">\n                        {checklistItems.map((item) => (\n                          <div\n                            key={item.id}\n                            className=\"bg-gray-50 rounded-lg p-4 space-y-2 hover:bg-gray-100 transition-colors\"\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-3\">\n                                <Checkbox\n                                  id={`checklist-${item.id}`}\n                                  checked={item.is_checked}\n                                  onCheckedChange={() => toggleItemCheck(item.id)}\n                                />\n                                <Label\n                                  htmlFor={`checklist-${item.id}`}\n                                  className={`text-base ${item.is_checked ? 'line-through text-gray-500' : ''}`}\n                                >\n                                  {item.title}\n                                </Label>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setExpandedItems(prev => {\n                                      const next = new Set(prev);\n                                      if (next.has(item.id)) {\n                                        next.delete(item.id);\n                                      } else {\n                                        next.add(item.id);\n                                      }\n                                      return next;\n                                    });\n                                  }}\n                                  className=\"hover:bg-gray-200\"\n                                >\n                                  <svg\n                                    className={`w-4 h-4 transform transition-transform ${\n                                      expandedItems.has(item.id) ? 'rotate-180' : ''\n                                    }`}\n                                    fill=\"none\"\n                                    stroke=\"currentColor\"\n                                    viewBox=\"0 0 24 24\"\n                                  >\n                                    <path\n                                      strokeLinecap=\"round\"\n                                      strokeLinejoin=\"round\"\n                                      strokeWidth=\"2\"\n                                      d=\"M19 9l-7 7-7-7\"\n                                    />\n                                  </svg>\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => deleteChecklistItem(item.id)}\n                                  className=\"hover:bg-red-100 hover:text-red-600\"\n                                  title={t('details.checklist.deleteItem')}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                            </div>\n\n                            {/* Sub-items Section */}\n                            {expandedItems.has(item.id) && (\n                              <div className=\"pl-8 space-y-2\">\n                                {/* New Sub-item Input */}\n                                <div className=\"flex flex-col sm:flex-row gap-2\">\n                                  <Input\n                                    value={newSubItemTitle}\n                                    onChange={(e) => setNewSubItemTitle(e.target.value)}\n                                    placeholder={t('details.checklist.newSubItem')}\n                                    className=\"flex-1\"\n                                    onKeyDown={(e) => {\n                                      if (e.key === 'Enter' && !e.shiftKey) {\n                                        e.preventDefault();\n                                        createSubItem(item.id);\n                                      }\n                                    }}\n                                  />\n                                  <Button\n                                    onClick={() => createSubItem(item.id)}\n                                    disabled={isSavingChecklist || !newSubItemTitle.trim()}\n                                    className=\"shrink-0 whitespace-nowrap\"\n                                  >\n                                    <Plus className=\"w-4 h-4 sm:mr-2\" />\n                                    <span className=\"hidden sm:inline\">{t('details.checklist.addSubItem')}</span>\n                                    <span className=\"sm:hidden\">{t('details.checklist.addSubItem')}</span>\n                                  </Button>\n                                </div>\n\n                                {/* Sub-items List */}\n                                {item.subitems.map((subItem) => (\n                                  <div\n                                    key={subItem.id}\n                                    className=\"flex items-center justify-between p-1.5 hover:bg-gray-200 rounded-lg transition-colors\"\n                                  >\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Checkbox\n                                        id={`subitem-${subItem.id}`}\n                                        checked={subItem.is_checked}\n                                        onCheckedChange={() => toggleSubItemCheck(item.id, subItem.id)}\n                                        className=\"h-4 w-4\"\n                                      />\n                                      <Label\n                                        htmlFor={`subitem-${subItem.id}`}\n                                        className={`text-xs sm:text-sm ${subItem.is_checked ? 'line-through text-gray-500' : ''}`}\n                                      >\n                                        {subItem.title}\n                                      </Label>\n                                    </div>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={() => deleteSubItem(item.id, subItem.id)}\n                                      className=\"hover:bg-red-100 hover:text-red-600 p-1.5\"\n                                      title={t('details.checklist.deleteSubItem')}\n                                    >\n                                      <Trash2 className=\"w-4 h-4\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    </ScrollArea>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default TripDetails;\n"],"names":["LoadingOverlay","t","useTranslation","currentTip","setCurrentTip","useState","currentSection","setCurrentSection","waitMessage","setWaitMessage","waitMessages","returnObjects","useEffect","updateMessage","randomIndex","Math","floor","random","length","interval","setInterval","clearInterval","travelTips","zapTips","blogPreview","title","sections","currentBlogPost","setCurrentBlogPost","prev","jsxs","motion","div","initial","opacity","animate","exit","className","children","jsx","style","backgroundImage","backgroundSize","scale","rotate","transition","duration","repeat","Infinity","ease","y","delay","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","AnimatePresence","mode","x","category","readTime","description","map","_","index","button","onClick","whileHover","whileTap","i","window","location","href","TripDetails","tripId","useParams","useLocation","navigate","useNavigate","lang","trip","setTrip","zapOutTrip","setZapOutTrip","zapRoadTrip","setZapRoadTrip","loading","setLoading","isEditing","setIsEditing","isAiContentLoading","setIsAiContentLoading","toast","useToast","tripCoordinates","setTripCoordinates","geopositions","setGeopositions","isStopsExpanded","setIsStopsExpanded","pollingIntervalRef","useRef","pollingCountRef","shareDialogOpen","setShareDialogOpen","isZapOutPath","pathname","includes","isZapRoadPath","showNotesSection","setShowNotesSection","travelChecklist","setTravelChecklist","id","text","checked","noteBlocks","setNoteBlocks","newNoteTitle","setNewNoteTitle","editingNoteId","setEditingNoteId","isSaving","setIsSaving","checklistItems","setChecklistItems","newItemTitle","setNewItemTitle","newSubItemTitle","setNewSubItemTitle","expandedItems","setExpandedItems","Set","isSavingChecklist","setIsSavingChecklist","getRandomWaitMessage","shareUrl","origin","isShareable","setIsShareable","isZapOutShareable","setIsZapOutShareable","isZapRoadShareable","setIsZapRoadShareable","currentUserId","setCurrentUserId","checkForAiContentUpdates","useCallback","async","result","current","data","supabase","from","select","eq","single","ai_content","error","scrollTo","fetchZapOutData","fetchZapRoadData","fetchTripDetails","validGeopositions","geoposition","geoData","JSON","parse","Array","isArray","filter","pos","name","type","coordinates","isNaN","e","formattedTrip","transportation_details","accommodation_details","is_shareable","rawData","activity_locations","activityLocations","loc","coords","Number","additional_needs","isValid","cities","starting_city","starting_city_coordinates","push","stopover_cities","stopovers","city","end_city","end_city_coordinates","updatedZapRoadTrip","special_requirements","openGoogleMapsNavigation","locations","lng","lat","join","open","document","body","overflow","auth","getUser","then","user","isOwner","user_id","createNoteBlock","trim","newNote","content","trip_id","trip_type","isZapOutTrip","isZapRoadTrip","insert","debouncedUpdateNote","debounce","update","order","ascending","fetchNoteBlocks","createChecklistItem","newItem","subitems","createSubItem","parentId","newSubItem","parent_id","item","items","itemsError","itemsWithSubitems","Promise","all","subitemsError","fetchChecklistItems","tripTitle","tripDescription","localStorage","getItem","removeItem","Fragment","geopositionJson","zapOutUpdateData","notes","stringify","activity_types","activity_times","zapoutError","geopositionString","stopoverCities","slice","stopoverCitiesString","startCoords","endCoords","zapRoadUpdateData","zaproadError","tripUpdateData","budget","updateError","handleSave","TripMap","height","showTerrain","onMarkerClick","position","initialCenter","Adresse","toFixed","EventSuggestions","TicketmasterEvents","TripZapOutDetails","isDirectZapOut","TripZapRoadDetails","isDirectZapRoad","TripBasicInfo","startDate","start_date","endDate","end_date","activityTypes","hideBudget","onCategoryChange","onBudgetChange","TripTransportation","details","onChange","TripAccommodation","state","selectedTripId","tripType","Map","TripShareDialog","onOpenChange","top","left","transform","padding","background","borderRadius","boxShadow","animation","zIndex","textAlign","color","fontSize","fontWeight","width","minWidth","maxWidth","tripData","date","generateTripPDF","TripAIContent","Input","value","target","placeholder","onKeyDown","key","shiftKey","preventDefault","Button","disabled","Plus","ScrollArea","note","variant","size","Save","Edit2","delete","deleteNoteBlock","Trash2","Textarea","updateNoteBlock","autoFocus","Date","created_at","toLocaleDateString","Checkbox","is_checked","onCheckedChange","itemId","find","toggleItemCheck","Label","htmlFor","next","has","add","deleteChecklistItem","subItem","subItemId","s","toggleSubItemCheck","deleteSubItem"],"mappings":"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"}