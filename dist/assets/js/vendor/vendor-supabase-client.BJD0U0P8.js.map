{"version":3,"file":"vendor-supabase-client.BJD0U0P8.js","sources":["../../../../node_modules/@supabase/supabase-js/dist/module/lib/constants.js","../../../../node_modules/@supabase/supabase-js/dist/module/lib/fetch.js","../../../../node_modules/@supabase/supabase-js/dist/module/lib/helpers.js","../../../../node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js","../../../../node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js","../../../../node_modules/@supabase/supabase-js/dist/module/index.js"],"sourcesContent":["import { version } from './version';\nlet JS_ENV = '';\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n    JS_ENV = 'deno';\n}\nelse if (typeof document !== 'undefined') {\n    JS_ENV = 'web';\n}\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    JS_ENV = 'react-native';\n}\nelse {\n    JS_ENV = 'node';\n}\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` };\nexport const DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nexport const DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nexport const DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nexport const DEFAULT_REALTIME_OPTIONS = {};\n//# sourceMappingURL=constants.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch';\nexport const resolveFetch = (customFetch) => {\n    let _fetch;\n    if (customFetch) {\n        _fetch = customFetch;\n    }\n    else if (typeof fetch === 'undefined') {\n        _fetch = nodeFetch;\n    }\n    else {\n        _fetch = fetch;\n    }\n    return (...args) => _fetch(...args);\n};\nexport const resolveHeadersConstructor = () => {\n    if (typeof Headers === 'undefined') {\n        return NodeFetchHeaders;\n    }\n    return Headers;\n};\nexport const fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\n    const fetch = resolveFetch(customFetch);\n    const HeadersConstructor = resolveHeadersConstructor();\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a;\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\n        if (!headers.has('apikey')) {\n            headers.set('apikey', supabaseKey);\n        }\n        if (!headers.has('Authorization')) {\n            headers.set('Authorization', `Bearer ${accessToken}`);\n        }\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\n    });\n};\n//# sourceMappingURL=fetch.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function uuid() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n}\nexport function stripTrailingSlash(url) {\n    return url.replace(/\\/$/, '');\n}\nexport const isBrowser = () => typeof window !== 'undefined';\nexport function applySettingDefaults(options, defaults) {\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\n    const result = {\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\n        global: Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions),\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\n    };\n    if (options.accessToken) {\n        result.accessToken = options.accessToken;\n    }\n    else {\n        // hack around Required<>\n        delete result.accessToken;\n    }\n    return result;\n}\n//# sourceMappingURL=helpers.js.map","import { AuthClient } from '@supabase/auth-js';\nexport class SupabaseAuthClient extends AuthClient {\n    constructor(options) {\n        super(options);\n    }\n}\n//# sourceMappingURL=SupabaseAuthClient.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_GLOBAL_OPTIONS, DEFAULT_DB_OPTIONS, DEFAULT_AUTH_OPTIONS, DEFAULT_REALTIME_OPTIONS, } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map","import SupabaseClient from './SupabaseClient';\nexport * from '@supabase/auth-js';\nexport { PostgrestError, } from '@supabase/postgrest-js';\nexport { FunctionsHttpError, FunctionsFetchError, FunctionsRelayError, FunctionsError, FunctionRegion, } from '@supabase/functions-js';\nexport * from '@supabase/realtime-js';\nexport { default as SupabaseClient } from './SupabaseClient';\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = (supabaseUrl, supabaseKey, options) => {\n    return new SupabaseClient(supabaseUrl, supabaseKey, options);\n};\n//# sourceMappingURL=index.js.map"],"names":["JS_ENV","Deno","document","navigator","product","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","resolveFetch","customFetch","_fetch","fetch","nodeFetch","args","fetchWithAuth","supabaseKey","getAccessToken","HeadersConstructor","Headers","NodeFetchHeaders","input","init","_a","accessToken","has","set","Object","assign","SupabaseAuthClient","AuthClient","constructor","options","super","SupabaseClient","supabaseUrl","_b","_c","this","Error","_supabaseUrl","replace","realtimeUrl","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","settings","defaults","db","dbOptions","auth","authOptions","realtime","realtimeOptions","global","globalOptions","applySettingDefaults","storageKey","Proxy","get","_","prop","String","_initSupabaseAuthClient","_getAccessToken","bind","_initRealtimeClient","rest","PostgrestClient","_listenForAuthEvents","functions","FunctionsClient","storage","SupabaseStorageClient","from","relation","rpc","fn","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","lock","debug","authHeaders","Authorization","apikey","url","hasCustomAuthorizationHeader","RealtimeClient","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","undefined","createClient"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5]}