{"version":3,"file":"vendor--framer-motion.Dpgjd5L1.js","sources":["../../../../node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","../../../../node_modules/framer-motion/dist/es/utils/use-constant.mjs","../../../../node_modules/framer-motion/dist/es/utils/is-browser.mjs","../../../../node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","../../../../node_modules/framer-motion/dist/es/context/PresenceContext.mjs","../../../../node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/utils.mjs","../../../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","../../../../node_modules/framer-motion/dist/es/context/LazyContext.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/definitions.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","../../../../node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/variant-props.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs","../../../../node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","../../../../node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","../../../../node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs","../../../../node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs","../../../../node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs","../../../../node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","../../../../node_modules/framer-motion/dist/es/render/html/use-props.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/path.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/use-props.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/use-render.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs","../../../../node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","../../../../node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs","../../../../node_modules/framer-motion/dist/es/render/html/use-html-visual-state.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/use-svg-visual-state.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","../../../../node_modules/framer-motion/dist/es/utils/is-ref-object.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs","../../../../node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs","../../../../node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","../../../../node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","../../../../node_modules/framer-motion/dist/es/motion/index.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/load-features.mjs","../../../../node_modules/framer-motion/dist/es/render/components/create-proxy.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","../../../../node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","../../../../node_modules/framer-motion/dist/es/projection/utils/measure.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/models.mjs","../../../../node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","../../../../node_modules/framer-motion/dist/es/render/store.mjs","../../../../node_modules/framer-motion/dist/es/render/VisualElement.mjs","../../../../node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","../../../../node_modules/framer-motion/dist/es/render/html/utils/render.mjs","../../../../node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","../../../../node_modules/framer-motion/dist/es/render/svg/utils/render.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/setters.mjs","../../../../node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","../../../../node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","../../../../node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","../../../../node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","../../../../node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","../../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/calc-child-stagger.mjs","../../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","../../../../node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","../../../../node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/Feature.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/animations.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","../../../../node_modules/framer-motion/dist/es/events/add-dom-event.mjs","../../../../node_modules/framer-motion/dist/es/events/event-info.mjs","../../../../node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","../../../../node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","../../../../node_modules/framer-motion/dist/es/utils/get-context-window.mjs","../../../../node_modules/framer-motion/dist/es/utils/distance.mjs","../../../../node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","../../../../node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","../../../../node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","../../../../node_modules/framer-motion/dist/es/gestures/pan/index.mjs","../../../../node_modules/framer-motion/dist/es/projection/node/state.mjs","../../../../node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","../../../../node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","../../../../node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","../../../../node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","../../../../node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","../../../../node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","../../../../node_modules/framer-motion/dist/es/projection/shared/stack.mjs","../../../../node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","../../../../node_modules/framer-motion/dist/es/utils/delay.mjs","../../../../node_modules/framer-motion/dist/es/projection/styles/transform.mjs","../../../../node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","../../../../node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/drag.mjs","../../../../node_modules/framer-motion/dist/es/gestures/drag/index.mjs","../../../../node_modules/framer-motion/dist/es/gestures/hover.mjs","../../../../node_modules/framer-motion/dist/es/gestures/press.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/gestures.mjs","../../../../node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs","../../../../node_modules/framer-motion/dist/es/render/components/motion/feature-bundle.mjs","../../../../node_modules/framer-motion/dist/es/gestures/focus.mjs","../../../../node_modules/framer-motion/dist/es/motion/features/layout.mjs","../../../../node_modules/framer-motion/dist/es/animation/hooks/animation-controls.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/is-dom-keyframes.mjs","../../../../node_modules/framer-motion/dist/es/animation/animate/resolve-subjects.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/utils/calc-repeat-duration.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/utils/calc-time.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/utils/edit.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/utils/normalize-times.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/utils/sort.mjs","../../../../node_modules/framer-motion/dist/es/animation/sequence/create.mjs","../../../../node_modules/framer-motion/dist/es/render/object/ObjectVisualElement.mjs","../../../../node_modules/framer-motion/dist/es/animation/utils/create-visual-element.mjs","../../../../node_modules/framer-motion/dist/es/animation/animate/subject.mjs","../../../../node_modules/framer-motion/dist/es/animation/animate/sequence.mjs","../../../../node_modules/framer-motion/dist/es/animation/animate/index.mjs","../../../../node_modules/framer-motion/dist/es/animation/hooks/use-animation.mjs","../../../../node_modules/framer-motion/dist/es/render/dom/viewport/index.mjs","../../../../node_modules/framer-motion/dist/es/utils/use-in-view.mjs"],"sourcesContent":["\"use client\";\nimport { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","const isBrowser = typeof window !== \"undefined\";\n\nexport { isBrowser };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = \n/* @__PURE__ */ createContext(null);\n\nexport { PresenceContext };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { isHTMLElement } from 'motion-dom';\nimport * as React from 'react';\nimport { useId, useRef, useContext, useInsertionEffect } from 'react';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const parent = element.offsetParent;\n            const parentWidth = isHTMLElement(parent)\n                ? parent.offsetWidth || 0\n                : 0;\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n            size.right = parentWidth - size.width - size.left;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent, anchorX, root }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n    });\n    const { nonce } = useContext(MotionConfigContext);\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left, right } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        const x = anchorX === \"left\" ? `left: ${left}` : `right: ${right}`;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        if (nonce)\n            style.nonce = nonce;\n        const parent = root ?? document.head;\n        parent.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            ${x}px !important;\n            top: ${top}px !important;\n          }\n        `);\n        }\n        return () => {\n            if (parent.contains(style)) {\n                parent.removeChild(style);\n            }\n        };\n    }, [isPresent]);\n    return (jsx(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size, children: React.cloneElement(children, { ref }) }));\n}\n\nexport { PopChild };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, anchorX, root }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    let isReusedContext = true;\n    let context = useMemo(() => {\n        isReusedContext = false;\n        return {\n            id,\n            initial,\n            isPresent,\n            custom,\n            onExitComplete: (childId) => {\n                presenceChildren.set(childId, true);\n                for (const isComplete of presenceChildren.values()) {\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n                onExitComplete && onExitComplete();\n            },\n            register: (childId) => {\n                presenceChildren.set(childId, false);\n                return () => presenceChildren.delete(childId);\n            },\n        };\n    }, [isPresent, presenceChildren, onExitComplete]);\n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    if (presenceAffectsLayout && isReusedContext) {\n        context = { ...context };\n    }\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = (jsx(PopChild, { isPresent: isPresent, anchorX: anchorX, root: root, children: children }));\n    }\n    return (jsx(PresenceContext.Provider, { value: context, children: children }));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence(subscribe = true) {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => {\n        if (subscribe) {\n            return register(id);\n        }\n    }, [subscribe]);\n    const safeToRemove = useCallback(() => subscribe && onExitComplete && onExitComplete(id), [id, onExitComplete, subscribe]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { Children, isValidElement } from 'react';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n\nexport { getChildKey, onlyElements };\n","\"use client\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport { useMemo, useRef, useState, useContext } from 'react';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { usePresence } from './use-presence.mjs';\nimport { onlyElements, getChildKey } from './utils.mjs';\n\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, presenceAffectsLayout = true, mode = \"sync\", propagate = false, anchorX = \"left\", root }) => {\n    const [isParentPresent, safeToRemove] = usePresence(propagate);\n    /**\n     * Filter any children that aren't ReactElements. We can only track components\n     * between renders with a props.key.\n     */\n    const presentChildren = useMemo(() => onlyElements(children), [children]);\n    /**\n     * Track the keys of the currently rendered children. This is used to\n     * determine which children are exiting.\n     */\n    const presentKeys = propagate && !isParentPresent ? [] : presentChildren.map(getChildKey);\n    /**\n     * If `initial={false}` we only want to pass this to components in the first render.\n     */\n    const isInitialRender = useRef(true);\n    /**\n     * A ref containing the currently present children. When all exit animations\n     * are complete, we use this to re-render the component with the latest children\n     * *committed* rather than the latest children *rendered*.\n     */\n    const pendingPresentChildren = useRef(presentChildren);\n    /**\n     * Track which exiting children have finished animating out.\n     */\n    const exitComplete = useConstant(() => new Map());\n    /**\n     * Save children to render as React state. To ensure this component is concurrent-safe,\n     * we check for exiting children via an effect.\n     */\n    const [diffedChildren, setDiffedChildren] = useState(presentChildren);\n    const [renderedChildren, setRenderedChildren] = useState(presentChildren);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        pendingPresentChildren.current = presentChildren;\n        /**\n         * Update complete status of exiting children.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const key = getChildKey(renderedChildren[i]);\n            if (!presentKeys.includes(key)) {\n                if (exitComplete.get(key) !== true) {\n                    exitComplete.set(key, false);\n                }\n            }\n            else {\n                exitComplete.delete(key);\n            }\n        }\n    }, [renderedChildren, presentKeys.length, presentKeys.join(\"-\")]);\n    const exitingChildren = [];\n    if (presentChildren !== diffedChildren) {\n        let nextChildren = [...presentChildren];\n        /**\n         * Loop through all the currently rendered components and decide which\n         * are exiting.\n         */\n        for (let i = 0; i < renderedChildren.length; i++) {\n            const child = renderedChildren[i];\n            const key = getChildKey(child);\n            if (!presentKeys.includes(key)) {\n                nextChildren.splice(i, 0, child);\n                exitingChildren.push(child);\n            }\n        }\n        /**\n         * If we're in \"wait\" mode, and we have exiting children, we want to\n         * only render these until they've all exited.\n         */\n        if (mode === \"wait\" && exitingChildren.length) {\n            nextChildren = exitingChildren;\n        }\n        setRenderedChildren(onlyElements(nextChildren));\n        setDiffedChildren(presentChildren);\n        /**\n         * Early return to ensure once we've set state with the latest diffed\n         * children, we can immediately re-render.\n         */\n        return null;\n    }\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        renderedChildren.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    /**\n     * If we've been provided a forceRender function by the LayoutGroupContext,\n     * we can use it to force a re-render amongst all surrounding components once\n     * all components have finished animating out.\n     */\n    const { forceRender } = useContext(LayoutGroupContext);\n    return (jsx(Fragment, { children: renderedChildren.map((child) => {\n            const key = getChildKey(child);\n            const isPresent = propagate && !isParentPresent\n                ? false\n                : presentChildren === renderedChildren ||\n                    presentKeys.includes(key);\n            const onExit = () => {\n                if (exitComplete.has(key)) {\n                    exitComplete.set(key, true);\n                }\n                else {\n                    return;\n                }\n                let isEveryExitComplete = true;\n                exitComplete.forEach((isExitComplete) => {\n                    if (!isExitComplete)\n                        isEveryExitComplete = false;\n                });\n                if (isEveryExitComplete) {\n                    forceRender?.();\n                    setRenderedChildren(pendingPresentChildren.current);\n                    propagate && safeToRemove?.();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            return (jsx(PresenceChild, { isPresent: isPresent, initial: !isInitialRender.current || initial\n                    ? undefined\n                    : false, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode, root: root, onExitComplete: isPresent ? undefined : onExit, anchorX: anchorX, children: child }, key));\n        }) }));\n};\n\nexport { AnimatePresence };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst LazyContext = createContext({ strict: false });\n\nexport { LazyContext };\n","const featureProps = {\n    animation: [\n        \"animate\",\n        \"variants\",\n        \"whileHover\",\n        \"whileTap\",\n        \"exit\",\n        \"whileInView\",\n        \"whileFocus\",\n        \"whileDrag\",\n    ],\n    exit: [\"exit\"],\n    drag: [\"drag\", \"dragControls\"],\n    focus: [\"whileFocus\"],\n    hover: [\"whileHover\", \"onHoverStart\", \"onHoverEnd\"],\n    tap: [\"whileTap\", \"onTap\", \"onTapStart\", \"onTapCancel\"],\n    pan: [\"onPan\", \"onPanStart\", \"onPanSessionStart\", \"onPanEnd\"],\n    inView: [\"whileInView\", \"onViewportEnter\", \"onViewportLeave\"],\n    layout: [\"layout\", \"layoutId\"],\n};\nconst featureDefinitions = {};\nfor (const key in featureProps) {\n    featureDefinitions[key] = {\n        isEnabled: (props) => featureProps[key].some((name) => !!props[name]),\n    };\n}\n\nexport { featureDefinitions };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"custom\",\n    \"inherit\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"globalTapTarget\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        key.startsWith(\"onLayout\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (typeof isValidProp !== \"function\")\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] &&\n                key.startsWith(\"onDrag\"))) {\n            filteredProps[key] =\n                props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","\"use client\";\nimport { createContext } from 'react';\n\nconst MotionContext = /* @__PURE__ */ createContext({});\n\nexport { MotionContext };\n","function isAnimationControls(v) {\n    return (v !== null &&\n        typeof v === \"object\" &&\n        typeof v.start === \"function\");\n}\n\nexport { isAnimationControls };\n","/**\n * Decides if the supplied variable is variant label\n */\nfunction isVariantLabel(v) {\n    return typeof v === \"string\" || Array.isArray(v);\n}\n\nexport { isVariantLabel };\n","const variantPriorityOrder = [\n    \"animate\",\n    \"whileInView\",\n    \"whileFocus\",\n    \"whileHover\",\n    \"whileTap\",\n    \"whileDrag\",\n    \"exit\",\n];\nconst variantProps = [\"initial\", ...variantPriorityOrder];\n\nexport { variantPriorityOrder, variantProps };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nfunction isControllingVariants(props) {\n    return (isAnimationControls(props.animate) ||\n        variantProps.some((name) => isVariantLabel(props[name])));\n}\nfunction isVariantNode(props) {\n    return Boolean(isControllingVariants(props) || props.variants);\n}\n\nexport { isControllingVariants, isVariantNode };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\nimport { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { isCSSVariableName } from 'motion-dom';\n\nconst scaleCorrectors = {};\nfunction addScaleCorrector(correctors) {\n    for (const key in correctors) {\n        scaleCorrectors[key] = correctors[key];\n        if (isCSSVariableName(key)) {\n            scaleCorrectors[key].isCSSVariable = true;\n        }\n    }\n}\n\nexport { addScaleCorrector, scaleCorrectors };\n","import { transformProps } from 'motion-dom';\nimport { scaleCorrectors } from '../../projection/styles/scale-correction.mjs';\n\nfunction isForcedMotionValue(key, { layout, layoutId }) {\n    return (transformProps.has(key) ||\n        key.startsWith(\"origin\") ||\n        ((layout || layoutId !== undefined) &&\n            (!!scaleCorrectors[key] || key === \"opacity\")));\n}\n\nexport { isForcedMotionValue };\n","import { transformPropOrder, getValueAsType, numberValueTypes } from 'motion-dom';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\nconst numTransforms = transformPropOrder.length;\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(latestValues, transform, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    let transformIsDefault = true;\n    /**\n     * Loop over all possible transforms in order, adding the ones that\n     * are present to the transform string.\n     */\n    for (let i = 0; i < numTransforms; i++) {\n        const key = transformPropOrder[i];\n        const value = latestValues[key];\n        if (value === undefined)\n            continue;\n        let valueIsDefault = true;\n        if (typeof value === \"number\") {\n            valueIsDefault = value === (key.startsWith(\"scale\") ? 1 : 0);\n        }\n        else {\n            valueIsDefault = parseFloat(value) === 0;\n        }\n        if (!valueIsDefault || transformTemplate) {\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (!valueIsDefault) {\n                transformIsDefault = false;\n                const transformName = translateAlias[key] || key;\n                transformString += `${transformName}(${valueAsType}) `;\n            }\n            if (transformTemplate) {\n                transform[key] = valueAsType;\n            }\n        }\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n","import { transformProps, isCSSVariableName, getValueAsType, numberValueTypes } from 'motion-dom';\nimport { buildTransform } from './build-transform.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { isMotionValue } from 'motion-dom';\nimport { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState));\n    return style;\n}\nfunction useHTMLProps(props, visualState) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","import { px } from 'motion-dom';\n\nconst dashKeys = {\n    offset: \"stroke-dashoffset\",\n    array: \"stroke-dasharray\",\n};\nconst camelKeys = {\n    offset: \"strokeDashoffset\",\n    array: \"strokeDasharray\",\n};\n/**\n * Build SVG path properties. Uses the path's measured length to convert\n * our custom pathLength, pathSpacing and pathOffset into stroke-dashoffset\n * and stroke-dasharray attributes.\n *\n * This function is mutative to reduce per-frame GC.\n */\nfunction buildSVGPath(attrs, length, spacing = 1, offset = 0, useDashCase = true) {\n    // Normalise path length by setting SVG attribute pathLength to 1\n    attrs.pathLength = 1;\n    // We use dash case when setting attributes directly to the DOM node and camel case\n    // when defining props on a React component.\n    const keys = useDashCase ? dashKeys : camelKeys;\n    // Build the dash offset\n    attrs[keys.offset] = px.transform(-offset);\n    // Build the dash array\n    const pathLength = px.transform(length);\n    const pathSpacing = px.transform(spacing);\n    attrs[keys.array] = `${pathLength} ${pathSpacing}`;\n}\n\nexport { buildSVGPath };\n","import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attributes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, attrScale, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, isSVGTag, transformTemplate, styleProp) {\n    buildHTMLStyles(state, latest, transformTemplate);\n    /**\n     * For svg tags we just want to make sure viewBox is animatable and treat all the styles\n     * as normal HTML tags.\n     */\n    if (isSVGTag) {\n        if (state.style.viewBox) {\n            state.attrs.viewBox = state.style.viewBox;\n        }\n        return;\n    }\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style } = state;\n    /**\n     * However, we apply transforms as CSS transforms.\n     * So if we detect a transform, transformOrigin we take it from attrs and copy it into style.\n     */\n    if (attrs.transform) {\n        style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    if (style.transform || attrs.transformOrigin) {\n        style.transformOrigin = attrs.transformOrigin ?? \"50% 50%\";\n        delete attrs.transformOrigin;\n    }\n    if (style.transform) {\n        /**\n         * SVG's element transform-origin uses its own median as a reference.\n         * Therefore, transformBox becomes a fill-box\n         */\n        style.transformBox = styleProp?.transformBox ?? \"fill-box\";\n        delete attrs.transformBox;\n    }\n    // Render attrX/attrY/attrScale as attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    if (attrScale !== undefined)\n        attrs.scale = attrScale;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","const isSVGTag = (tag) => typeof tag === \"string\" && tag.toLowerCase() === \"svg\";\n\nexport { isSVGTag };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, isSVGTag(Component), props.transformTemplate, props.style);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","/**\n * We keep these listed separately as we use the lowercase tag names as part\n * of the runtime bundle to detect SVG components\n */\nconst lowercaseSVGElements = [\n    \"animate\",\n    \"circle\",\n    \"defs\",\n    \"desc\",\n    \"ellipse\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"filter\",\n    \"marker\",\n    \"mask\",\n    \"metadata\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"rect\",\n    \"stop\",\n    \"switch\",\n    \"symbol\",\n    \"svg\",\n    \"text\",\n    \"tspan\",\n    \"use\",\n    \"view\",\n];\n\nexport { lowercaseSVGElements };\n","import { lowercaseSVGElements } from '../../svg/lowercase-elements.mjs';\n\nfunction isSVGComponent(Component) {\n    if (\n    /**\n     * If it's not a string, it's a custom React component. Currently we only support\n     * HTML custom React components.\n     */\n    typeof Component !== \"string\" ||\n        /**\n         * If it contains a dash, the element is a custom HTML webcomponent.\n         */\n        Component.includes(\"-\")) {\n        return false;\n    }\n    else if (\n    /**\n     * If it's in our list of lowercase SVG tags, it's an SVG component\n     */\n    lowercaseSVGElements.indexOf(Component) > -1 ||\n        /**\n         * If it contains a capital letter, it's an SVG component\n         */\n        /[A-Z]/u.test(Component)) {\n        return true;\n    }\n    return false;\n}\n\nexport { isSVGComponent };\n","import { isMotionValue } from 'motion-dom';\nimport { Fragment, useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nfunction useRender(Component, props, ref, { latestValues, }, isStatic, forwardMotionProps = false) {\n    const useVisualProps = isSVGComponent(Component)\n        ? useSVGProps\n        : useHTMLProps;\n    const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n    const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n    const elementProps = Component !== Fragment ? { ...filteredProps, ...visualProps, ref } : {};\n    /**\n     * If component has been handed a motion value as its child,\n     * memoise its initial value and render that. Subsequent updates\n     * will be handled by the onChange handler\n     */\n    const { children } = props;\n    const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n    return createElement(Component, {\n        ...elementProps,\n        children: renderedChildren,\n    });\n}\n\nexport { useRender };\n","function getValueState(visualElement) {\n    const state = [{}, {}];\n    visualElement?.values.forEach((value, key) => {\n        state[0][key] = value.get();\n        state[1][key] = value.getVelocity();\n    });\n    return state;\n}\nfunction resolveVariantFromProps(props, definition, custom, visualElement) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        const [current, velocity] = getValueState(visualElement);\n        definition = definition(custom !== undefined ? custom : props.custom, current, velocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n","import { isMotionValue } from 'motion-dom';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    return isMotionValue(value) ? value.get() : value;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    return state;\n}\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        for (let i = 0; i < list.length; i++) {\n            const resolved = resolveVariantFromProps(props, list[i]);\n            if (resolved) {\n                const { transitionEnd, transition, ...target } = resolved;\n                for (const key in target) {\n                    let valueTarget = target[key];\n                    if (Array.isArray(valueTarget)) {\n                        /**\n                         * Take final keyframe if the initial animation is blocked because\n                         * we want to initialise at the end of that blocked animation.\n                         */\n                        const index = isInitialAnimationBlocked\n                            ? valueTarget.length - 1\n                            : 0;\n                        valueTarget = valueTarget[index];\n                    }\n                    if (valueTarget !== null) {\n                        values[key] = valueTarget;\n                    }\n                }\n                for (const key in transitionEnd) {\n                    values[key] = transitionEnd[key];\n                }\n            }\n        }\n    }\n    return values;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\n\nexport { makeUseVisualState };\n","import { isMotionValue } from 'motion-dom';\nimport { isForcedMotionValue } from '../../../motion/utils/is-forced-motion-value.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const { style } = props;\n    const newValues = {};\n    for (const key in style) {\n        if (isMotionValue(style[key]) ||\n            (prevProps.style &&\n                isMotionValue(prevProps.style[key])) ||\n            isForcedMotionValue(key, props) ||\n            visualElement?.getValue(key)?.liveStyle !== undefined) {\n            newValues[key] = style[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst useHTMLVisualState = /*@__PURE__*/ makeUseVisualState({\n    scrapeMotionValuesFromProps,\n    createRenderState: createHtmlRenderState,\n});\n\nexport { useHTMLVisualState };\n","import { isMotionValue, transformPropOrder } from 'motion-dom';\nimport { scrapeMotionValuesFromProps as scrapeMotionValuesFromProps$1 } from '../../html/utils/scrape-motion-values.mjs';\n\nfunction scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n    const newValues = scrapeMotionValuesFromProps$1(props, prevProps, visualElement);\n    for (const key in props) {\n        if (isMotionValue(props[key]) ||\n            isMotionValue(prevProps[key])) {\n            const targetKey = transformPropOrder.indexOf(key) !== -1\n                ? \"attr\" + key.charAt(0).toUpperCase() + key.substring(1)\n                : key;\n            newValues[targetKey] = props[key];\n        }\n    }\n    return newValues;\n}\n\nexport { scrapeMotionValuesFromProps };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nconst useSVGVisualState = /*@__PURE__*/ makeUseVisualState({\n    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n    createRenderState: createSvgRenderState,\n});\n\nexport { useSVGVisualState };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","function isRefObject(ref) {\n    return (ref &&\n        typeof ref === \"object\" &&\n        Object.prototype.hasOwnProperty.call(ref, \"current\"));\n}\n\nexport { isRefObject };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        if (instance) {\n            visualState.onMount && visualState.onMount(instance);\n        }\n        if (visualElement) {\n            if (instance) {\n                visualElement.mount(instance);\n            }\n            else {\n                visualElement.unmount();\n            }\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","/**\n * Convert camelCase to dash-case properties.\n */\nconst camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, \"$1-$2\").toLowerCase();\n\nexport { camelToDash };\n","import { camelToDash } from '../../render/dom/utils/camel-to-dash.mjs';\n\nconst optimizedAppearDataId = \"framerAppearId\";\nconst optimizedAppearDataAttribute = \"data-\" + camelToDash(optimizedAppearDataId);\n\nexport { optimizedAppearDataAttribute, optimizedAppearDataId };\n","\"use client\";\nimport { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../context/SwitchLayoutGroupContext.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement, ProjectionNodeConstructor) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef(null);\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement =\n        createVisualElement ||\n            lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    /**\n     * Load Motion gesture and animation features. These are rendered as renderless\n     * components so each feature can optionally make use of React lifecycle methods.\n     */\n    const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n    if (visualElement &&\n        !visualElement.projection &&\n        ProjectionNodeConstructor &&\n        (visualElement.type === \"html\" || visualElement.type === \"svg\")) {\n        createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);\n    }\n    const isMounted = useRef(false);\n    useInsertionEffect(() => {\n        /**\n         * Check the component has already mounted before calling\n         * `update` unnecessarily. This ensures we skip the initial update.\n         */\n        if (visualElement && isMounted.current) {\n            visualElement.update(props, presenceContext);\n        }\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const optimisedAppearId = props[optimizedAppearDataAttribute];\n    const wantsHandoff = useRef(Boolean(optimisedAppearId) &&\n        !window.MotionHandoffIsComplete?.(optimisedAppearId) &&\n        window.MotionHasOptimisedAnimation?.(optimisedAppearId));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        isMounted.current = true;\n        window.MotionIsMounted = true;\n        visualElement.updateFeatures();\n        visualElement.scheduleRenderMicrotask();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            // This ensures all future calls to animateChanges() in this component will run in useEffect\n            queueMicrotask(() => {\n                window.MotionHandoffMarkAsComplete?.(optimisedAppearId);\n            });\n            wantsHandoff.current = false;\n        }\n        /**\n         * Now we've finished triggering animations for this element we\n         * can wipe the enteringChildren set for the next render.\n         */\n        visualElement.enteringChildren = undefined;\n    });\n    return visualElement;\n}\nfunction createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {\n    const { layoutId, layout, drag, dragConstraints, layoutScroll, layoutRoot, layoutCrossfade, } = props;\n    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props[\"data-framer-portal-id\"]\n        ? undefined\n        : getClosestProjectingNode(visualElement.parent));\n    visualElement.projection.setOptions({\n        layoutId,\n        layout,\n        alwaysMeasureLayout: Boolean(drag) || (dragConstraints && isRefObject(dragConstraints)),\n        visualElement,\n        /**\n         * TODO: Update options in an effect. This could be tricky as it'll be too late\n         * to update by the time layout animations run.\n         * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n         * ensuring it gets called if there's no potential layout animations.\n         *\n         */\n        animationType: typeof layout === \"string\" ? layout : \"both\",\n        initialPromotionConfig,\n        crossfade: layoutCrossfade,\n        layoutScroll,\n        layoutRoot,\n    });\n}\nfunction getClosestProjectingNode(visualElement) {\n    if (!visualElement)\n        return undefined;\n    return visualElement.options.allowProjection !== false\n        ? visualElement.projection\n        : getClosestProjectingNode(visualElement.parent);\n}\n\nexport { useVisualElement };\n","\"use client\";\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { warning, invariant } from 'motion-utils';\nimport { forwardRef, useContext } from 'react';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { useRender } from '../render/dom/use-render.mjs';\nimport { isSVGComponent } from '../render/dom/utils/is-svg-component.mjs';\nimport { useHTMLVisualState } from '../render/html/use-html-visual-state.mjs';\nimport { useSVGVisualState } from '../render/svg/use-svg-visual-state.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { featureDefinitions } from './features/definitions.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent(Component, { forwardMotionProps = false } = {}, preloadedFeatures, createVisualElement) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    const useVisualState = isSVGComponent(Component)\n        ? useSVGVisualState\n        : useHTMLVisualState;\n    function MotionDOMComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            useStrictMode(configAndProps, preloadedFeatures);\n            const layoutProjection = getProjectionFunctionality(configAndProps);\n            MeasureLayout = layoutProjection.MeasureLayout;\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (jsxs(MotionContext.Provider, { value: context, children: [MeasureLayout && context.visualElement ? (jsx(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null, useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, forwardMotionProps)] }));\n    }\n    MotionDOMComponent.displayName = `motion.${typeof Component === \"string\"\n        ? Component\n        : `create(${Component.displayName ?? Component.name ?? \"\"})`}`;\n    const ForwardRefMotionComponent = forwardRef(MotionDOMComponent);\n    ForwardRefMotionComponent[motionComponentSymbol] = Component;\n    return ForwardRefMotionComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\nfunction useStrictMode(configAndProps, preloadedFeatures) {\n    const isStrict = useContext(LazyContext).strict;\n    /**\n     * If we're in development mode, check to make sure we're not rendering a motion component\n     * as a child of LazyMotion, as this will break the file-size benefits of using it.\n     */\n    if (process.env.NODE_ENV !== \"production\" &&\n        preloadedFeatures &&\n        isStrict) {\n        const strictMessage = \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\";\n        configAndProps.ignoreStrict\n            ? warning(false, strictMessage, \"lazy-strict-mode\")\n            : invariant(false, strictMessage, \"lazy-strict-mode\");\n    }\n}\nfunction getProjectionFunctionality(props) {\n    const { drag, layout } = featureDefinitions;\n    if (!drag && !layout)\n        return {};\n    const combined = { ...drag, ...layout };\n    return {\n        MeasureLayout: drag?.isEnabled(props) || layout?.isEnabled(props)\n            ? combined.MeasureLayout\n            : undefined,\n        ProjectionNode: combined.ProjectionNode,\n    };\n}\n\nexport { createMotionComponent };\n","import { featureDefinitions } from './definitions.mjs';\n\nfunction loadFeatures(features) {\n    for (const key in features) {\n        featureDefinitions[key] = {\n            ...featureDefinitions[key],\n            ...features[key],\n        };\n    }\n}\n\nexport { loadFeatures };\n","import { warnOnce } from 'motion-utils';\nimport { createMotionComponent } from '../../motion/index.mjs';\n\nfunction createMotionProxy(preloadedFeatures, createVisualElement) {\n    if (typeof Proxy === \"undefined\") {\n        return createMotionComponent;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    const factory = (Component, options) => {\n        return createMotionComponent(Component, options, preloadedFeatures, createVisualElement);\n    };\n    /**\n     * Support for deprecated`motion(Component)` pattern\n     */\n    const deprecatedFactoryFunction = (Component, options) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(false, \"motion() is deprecated. Use motion.create() instead.\");\n        }\n        return factory(Component, options);\n    };\n    return new Proxy(deprecatedFactoryFunction, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            if (key === \"create\")\n                return factory;\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, createMotionComponent(key, undefined, preloadedFeatures, createVisualElement));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from 'motion-dom';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { KeyframeResolver, time, frame, isMotionValue, cancelFrame, transformProps, motionValue, findValueType, complex, getAnimatableNone, microtask } from 'motion-dom';\nimport { warnOnce, isNumericalString, isZeroValueString, SubscriptionManager } from 'motion-utils';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key]);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\", \"reduced-motion-disabled\");\n        }\n        this.parent?.addChild(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent?.removeChild(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    addChild(child) {\n        this.children.add(child);\n        this.enteringChildren ?? (this.enteringChildren = new Set());\n        this.enteringChildren.add(child);\n    }\n    removeChild(child) {\n        this.children.delete(child);\n        this.enteringChildren && this.enteringChildren.delete(child);\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        if (valueIsTransform && this.onBindTransform) {\n            this.onBindTransform();\n        }\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n            this.scheduleRender();\n        });\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : this.getBaseTargetFromProps(this.props, key) ??\n                this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, this.presenceContext?.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n    scheduleRenderMicrotask() {\n        microtask.render(this.render);\n    }\n}\n\nexport { VisualElement };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addEventListener(\"change\", setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { isMotionValue, motionValue } from 'motion-dom';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","import { DOMKeyframesResolver, isMotionValue } from 'motion-dom';\nimport { VisualElement } from '../VisualElement.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current) {\n                    this.current.textContent = `${latest}`;\n                }\n            });\n        }\n    }\n}\n\nexport { DOMVisualElement };\n","function renderHTML(element, { style, vars }, styleProp, projection) {\n    const elementStyle = element.style;\n    let key;\n    for (key in style) {\n        // CSSStyleDeclaration has [index: number]: string; in the types, so we use that as key type.\n        elementStyle[key] = style[key];\n    }\n    // Write projection styles directly to element style\n    projection?.applyProjectionStyles(elementStyle, styleProp);\n    for (key in vars) {\n        // Loop over any CSS variables and assign those.\n        // They can only be assigned using `setProperty`.\n        elementStyle.setProperty(key, vars[key]);\n    }\n}\n\nexport { renderHTML };\n","import { transformProps, defaultTransformValue, readTransformValue, isCSSVariableName } from 'motion-dom';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            return this.projection?.isProjecting\n                ? defaultTransformValue(key)\n                : readTransformValue(instance, key);\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","/**\n * A set of attribute names that are always read/written as camel case.\n */\nconst camelCaseAttributes = new Set([\n    \"baseFrequency\",\n    \"diffuseConstant\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerWidth\",\n    \"numOctaves\",\n    \"targetX\",\n    \"targetY\",\n    \"surfaceScale\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"stdDeviation\",\n    \"tableValues\",\n    \"viewBox\",\n    \"gradientTransform\",\n    \"pathLength\",\n    \"startOffset\",\n    \"textLength\",\n    \"lengthAdjust\",\n]);\n\nexport { camelCaseAttributes };\n","import { transformProps, getDefaultValueType } from 'motion-dom';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate, props.style);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { camelToDash } from '../../dom/utils/camel-to-dash.mjs';\nimport { renderHTML } from '../../html/utils/render.mjs';\nimport { camelCaseAttributes } from './camel-case-attrs.mjs';\n\nfunction renderSVG(element, renderState, _styleProp, projection) {\n    renderHTML(element, renderState, undefined, projection);\n    for (const key in renderState.attrs) {\n        element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);\n    }\n}\n\nexport { renderSVG };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","const isKeyframesTarget = (v) => {\n    return Array.isArray(v);\n};\n\nexport { isKeyframesTarget };\n","import { motionValue } from 'motion-dom';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction resolveFinalValueInKeyframes(v) {\n    // TODO maybe throw if v.length - 1 is placeholder token?\n    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { MotionGlobalConfig } from 'motion-utils';\nimport { isWillChangeMotionValue } from './is.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    const willChange = visualElement.getValue(\"willChange\");\n    /**\n     * It could be that a user has set willChange to a regular MotionValue,\n     * in which case we can't add the value to it.\n     */\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!willChange && MotionGlobalConfig.WillChange) {\n        const newWillChange = new MotionGlobalConfig.WillChange(\"auto\");\n        visualElement.addValue(\"willChange\", newWillChange);\n        newWillChange.add(key);\n    }\n}\n\nexport { addValueToWillChange };\n","import { isMotionValue } from 'motion-dom';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { transformProps } from 'motion-dom';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","import { getValueTransition, makeAnimationInstant, frame, JSAnimation, AsyncMotionValueAnimation } from 'motion-dom';\nimport { secondsToMilliseconds, MotionGlobalConfig } from 'motion-utils';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unique transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        Object.assign(options, getDefaultTransition(name, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    options.duration && (options.duration = secondsToMilliseconds(options.duration));\n    options.repeatDelay && (options.repeatDelay = secondsToMilliseconds(options.repeatDelay));\n    /**\n     * Support deprecated way to set initial value. Prefer keyframe syntax.\n     */\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        makeAnimationInstant(options);\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (MotionGlobalConfig.instantAnimations ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        makeAnimationInstant(options);\n        options.delay = 0;\n    }\n    /**\n     * If the transition type or easing has been explicitly set by the user\n     * then we don't want to allow flattening the animation.\n     */\n    options.allowFlatten = !valueTransition.type && !valueTransition.ease;\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            return;\n        }\n    }\n    return valueTransition.isSync\n        ? new JSAnimation(options)\n        : new AsyncMotionValueAnimation(options);\n};\n\nexport { animateMotionValue };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { getValueTransition, frame, positionalKeys } from 'motion-dom';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, visualElement.latestValues[key] ?? null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If the value is already at the defined target, skip the animation.\n         */\n        const currentValue = value.get();\n        if (currentValue !== undefined &&\n            !value.isAnimating &&\n            !Array.isArray(valueTarget) &&\n            valueTarget === currentValue &&\n            !valueTransition.velocity) {\n            continue;\n        }\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","function calcChildStagger(children, child, delayChildren, staggerChildren = 0, staggerDirection = 1) {\n    const index = Array.from(children)\n        .sort((a, b) => a.sortNodePosition(b))\n        .indexOf(child);\n    const numChildren = children.size;\n    const maxStaggerDuration = (numChildren - 1) * staggerChildren;\n    const delayIsFunction = typeof delayChildren === \"function\";\n    return delayIsFunction\n        ? delayChildren(index, numChildren)\n        : staggerDirection === 1\n            ? index * staggerChildren\n            : maxStaggerDuration - index * staggerChildren;\n}\n\nexport { calcChildStagger };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { calcChildStagger } from '../utils/calc-child-stagger.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? visualElement.presenceContext?.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, forwardDelay, delayChildren, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delay = 0, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    for (const child of visualElement.variantChildren) {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delay +\n                (typeof delayChildren === \"function\" ? 0 : delayChildren) +\n                calcChildStagger(visualElement.variantChildren, child, delayChildren, staggerChildren, staggerDirection),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    }\n    return Promise.all(animations);\n}\n\nexport { animateVariant };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { calcChildStagger } from '../../animation/utils/calc-child-stagger.mjs';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? visualElement.presenceContext?.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => {\n                    const options = { type };\n                    /**\n                     * If we're performing the initial animation, but we're not\n                     * rendering at the same time as the variant-controlling parent,\n                     * we want to use the parent's transition to calculate the stagger.\n                     */\n                    if (typeof animation === \"string\" &&\n                        isInitialRender &&\n                        !willAnimateViaParent &&\n                        visualElement.manuallyAnimateOnMount &&\n                        visualElement.parent) {\n                        const { parent } = visualElement;\n                        const parentVariant = resolveVariant(parent, animation);\n                        if (parent.enteringChildren && parentVariant) {\n                            const { delayChildren } = parentVariant.transition || {};\n                            options.delay = calcChildStagger(parent.enteringChildren, visualElement, delayChildren);\n                        }\n                    }\n                    return {\n                        animation: animation,\n                        options,\n                    };\n                }));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            /**\n             * If the initial prop contains a transition we can use that, otherwise\n             * allow the animation function to use the visual element's default.\n             */\n            if (typeof props.initial !== \"boolean\") {\n                const initialTransition = resolveVariant(visualElement, Array.isArray(props.initial)\n                    ? props.initial[0]\n                    : props.initial);\n                if (initialTransition && initialTransition.transition) {\n                    fallbackAnimation.transition = initialTransition.transition;\n                }\n            }\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget ?? null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        visualElement.variantChildren?.forEach((child) => child.animationState?.setActive(type, isActive));\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => {\n                onExitComplete(this.id);\n            });\n        }\n    }\n    mount() {\n        const { register, onExitComplete } = this.node.presenceContext || {};\n        if (onExitComplete) {\n            onExitComplete(this.id);\n        }\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        this.node.animationState.reset();\n        this.unmountControls?.();\n    }\n}\n\nexport { AnimationFeature };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { isPrimaryPointer } from 'motion-dom';\n\nfunction extractEventInfo(event) {\n    return {\n        point: {\n            x: event.pageX,\n            y: event.pageY,\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","import { mixNumber } from 'motion-dom';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","// Fixes https://github.com/motiondivision/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { frame, isPrimaryPointer, cancelFrame, frameData } from 'motion-dom';\nimport { pipe, secondsToMilliseconds, millisecondsToSeconds } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow = window, dragSnapToOrigin = false, distanceThreshold = 3, } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursor.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= this.distanceThreshold;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.distanceThreshold = distanceThreshold;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mixNumber } from 'motion-dom';\nimport { progress, clamp } from 'motion-utils';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","import { frame, mixNumber, setDragLock, percent } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\n\nconst elementDragControls = new WeakMap();\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        this.openDragLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        /**\n         * The latest pointer event. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPointerEvent = null;\n        /**\n         * The latest pan info. Used as fallback when the `cancel` and `stop` functions are called without arguments.\n         */\n        this.latestPanInfo = null;\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false, distanceThreshold } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event).point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openDragLock)\n                    this.openDragLock();\n                this.openDragLock = setDragLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openDragLock)\n                    return;\n            }\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openDragLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => {\n            this.latestPointerEvent = event;\n            this.latestPanInfo = info;\n            this.stop(event, info);\n            this.latestPointerEvent = null;\n            this.latestPanInfo = null;\n        };\n        const resumeAnimation = () => eachAxis((axis) => this.getAnimationState(axis) === \"paused\" &&\n            this.getAxisMotionValue(axis).animation?.play());\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            distanceThreshold,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    /**\n     * @internal\n     */\n    stop(event, panInfo) {\n        const finalEvent = event || this.latestPointerEvent;\n        const finalPanInfo = panInfo || this.latestPanInfo;\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging || !finalPanInfo || !finalEvent)\n            return;\n        const { velocity } = finalPanInfo;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(finalEvent, finalPanInfo));\n        }\n    }\n    /**\n     * @internal\n     */\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openDragLock) {\n            this.openDragLock();\n            this.openDragLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : this.visualElement.projection?.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\", \"drag-constraints-ref\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).animation?.pause());\n    }\n    getAnimationState(axis) {\n        return this.getAxisMotionValue(axis).animation?.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { frame } from 'motion-dom';\nimport { noop } from 'motion-utils';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { PanSession } from './PanSession.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from 'motion-dom';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { complex, mixNumber } from 'motion-dom';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { frame, microtask } from 'motion-dom';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\n/**\n * Track whether we've taken any snapshots yet. If not,\n * we can safely skip notification of didUpdate.\n *\n * Difficult to capture in a test but to prevent flickering\n * we must set this to true either on update or unmount.\n * Running `next-env/layout-id` in Safari will show this behaviour if broken.\n */\nlet hasTakenAnySnapshot = false;\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            if (hasTakenAnySnapshot) {\n                projection.root.didUpdate();\n            }\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const { projection } = visualElement;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        hasTakenAnySnapshot = true;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined ||\n            prevProps.isPresent !== isPresent) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        hasTakenAnySnapshot = true;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { isMotionValue, motionValue } from 'motion-dom';\nimport { animateMotionValue } from '../interfaces/motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from 'motion-utils';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { mixNumber, percent, px } from 'motion-dom';\nimport { progress, circOut, noop } from 'motion-utils';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, lead.opacity ?? 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity ?? 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity ?? 1, lead.opacity ?? 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { percent, mixNumber } from 'motion-dom';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from 'motion-utils';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","import { statsBuffer, isSVGElement, isSVGSVGElement, frame, getValueTransition, cancelFrame, time, frameData, frameSteps, microtask, activeAnimations, motionValue, mixNumber } from 'motion-dom';\nimport { SubscriptionManager, clamp, noop } from 'motion-utils';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcLength, calcRelativePosition, calcRelativeBox, calcBoxDelta, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst metrics = {\n    nodes: 0,\n    calculatedTargetDeltas: 0,\n    calculatedProjections: 0,\n};\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent?.()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            this.animationCommitId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (statsBuffer.value) {\n                    metrics.nodes =\n                        metrics.calculatedTargetDeltas =\n                            metrics.calculatedProjections =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (statsBuffer.addProjectionMetrics) {\n                    statsBuffer.addProjectionMetrics(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance) && !isSVGSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (this.root.hasTreeAnimated && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                let innerWidth = 0;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                // Set initial innerWidth in a frame.read callback to batch the read\n                frame.read(() => {\n                    innerWidth = window.innerWidth;\n                });\n                attachResizeListener(instance, () => {\n                    const newInnerWidth = window.innerWidth;\n                    if (newInnerWidth === innerWidth)\n                        return;\n                    innerWidth = newInnerWidth;\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeLayoutChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const hasTargetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout);\n                    /*\n                     * Note: Disabled to fix relative animations always triggering new\n                     * layout animations. If this causes further issues, we can try\n                     * a different approach to detecting relative target changes.\n                     */\n                    // || hasRelativeLayoutChanged\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeLayoutChanged;\n                    if (this.options.layoutRoot ||\n                        this.resumeFrom ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (hasTargetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                        /**\n                         * Set animation origin after starting animation to avoid layout jump\n                         * caused by stopping previous layout animation\n                         */\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            this.eventHandlers.clear();\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            /**\n             * If this is a repeat of didUpdate then ignore the animation.\n             */\n            if (this.animationId <= this.animationCommitId) {\n                this.nodes.forEach(clearIsLayoutDirty);\n                return;\n            }\n            this.animationCommitId = this.animationId;\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            else {\n                this.isUpdating = false;\n                /**\n                 * Write\n                 */\n                this.nodes.forEach(resetTransformStyle);\n                /**\n                 * Read ==================\n                 */\n                // Update layout measurements of updated children\n                this.nodes.forEach(updateLayout);\n                /**\n                 * Write\n                 */\n                // Notify listeners that the layout is updated\n                this.nodes.forEach(notifyLayoutUpdate);\n            }\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n            if (this.snapshot &&\n                !calcLength(this.snapshot.measuredBox.x) &&\n                !calcLength(this.snapshot.measuredBox.y)) {\n                this.snapshot = undefined;\n            }\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement && this.instance) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                this.instance &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = this.scroll?.wasRoot || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if (this.scroll?.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                this.parent?.isProjectionDirty ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || this.parent?.isProjectionDirty) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (statsBuffer.value) {\n                metrics.calculatedProjections++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.visualElement?.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot ? snapshot.latestValues : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation?.stop();\n            this.resumingFrom?.currentAnimation?.stop();\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                activeAnimations.layout++;\n                this.motionValue || (this.motionValue = motionValue(0));\n                this.currentAnimation = animateSingleValue(this.motionValue, [0, 1000], {\n                    ...options,\n                    velocity: 0,\n                    isSync: true,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onStop: () => {\n                        activeAnimations.layout--;\n                    },\n                    onComplete: () => {\n                        activeAnimations.layout--;\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.lead || this : this;\n        }\n        getPrevLead() {\n            const { layoutId } = this.options;\n            return layoutId ? this.getStack()?.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        applyProjectionStyles(targetStyle, // CSSStyleDeclaration - doesn't allow numbers to be assigned to properties\n        styleProp) {\n            if (!this.instance || this.isSVG)\n                return;\n            if (!this.isVisible) {\n                targetStyle.visibility = \"hidden\";\n                return;\n            }\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                targetStyle.visibility = \"\";\n                targetStyle.opacity = \"\";\n                targetStyle.pointerEvents =\n                    resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                targetStyle.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                if (this.options.layoutId) {\n                    targetStyle.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    targetStyle.pointerEvents =\n                        resolveMotionValue(styleProp?.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    targetStyle.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return;\n            }\n            targetStyle.visibility = \"\";\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            let transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                transform = transformTemplate(valuesToRender, transform);\n            }\n            targetStyle.transform = transform;\n            const { x, y } = this.projectionDelta;\n            targetStyle.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity ??\n                            this.latestValues.opacity ??\n                            1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                targetStyle.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo, isCSSVariable } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        targetStyle[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    // If this is a CSS variable, set it directly on the instance.\n                    // Replacing this function from creating styles to setting them\n                    // would be a good place to remove per frame object creation\n                    if (isCSSVariable) {\n                        this.options.visualElement.renderState.vars[key] = corrected;\n                    }\n                    else {\n                        targetStyle[key] = corrected;\n                    }\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                targetStyle.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp?.pointerEvents) || \"\"\n                        : \"none\";\n            }\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => node.currentAnimation?.stop());\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    const snapshot = node.resumeFrom?.snapshot || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeLayoutChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeLayoutChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeLayoutChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (statsBuffer.value) {\n        metrics.nodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    return node !== node.root && node.scroll?.wasRoot;\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { time, frame, cancelFrame } from 'motion-dom';\nimport { secondsToMilliseconds } from 'motion-utils';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.setup(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = latestTransform?.z || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","import { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { createProjectionNode } from './create-projection-node.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from 'motion-utils';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { hover, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handleHoverEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.animationState && props.whileHover) {\n        node.animationState.setActive(\"whileHover\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onHover\" + lifecycle);\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass HoverGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = hover(current, (_element, startEvent) => {\n            handleHoverEvent(this.node, startEvent, \"Start\");\n            return (endEvent) => handleHoverEvent(this.node, endEvent, \"End\");\n        });\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { press, frame } from 'motion-dom';\nimport { extractEventInfo } from '../events/event-info.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nfunction handlePressEvent(node, event, lifecycle) {\n    const { props } = node;\n    if (node.current instanceof HTMLButtonElement && node.current.disabled) {\n        return;\n    }\n    if (node.animationState && props.whileTap) {\n        node.animationState.setActive(\"whileTap\", lifecycle === \"Start\");\n    }\n    const eventName = (\"onTap\" + (lifecycle === \"End\" ? \"\" : lifecycle));\n    const callback = props[eventName];\n    if (callback) {\n        frame.postRender(() => callback(event, extractEventInfo(event)));\n    }\n}\nclass PressGesture extends Feature {\n    mount() {\n        const { current } = this.node;\n        if (!current)\n            return;\n        this.unmount = press(current, (_element, startEvent) => {\n            handlePressEvent(this.node, startEvent, \"Start\");\n            return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? \"End\" : \"Cancel\");\n        }, { useGlobalTarget: this.node.props.globalTapTarget });\n    }\n    unmount() { }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","import { createDomVisualElement } from '../../dom/create-visual-element.mjs';\nimport { createMotionProxy } from '../create-proxy.mjs';\nimport { featureBundle } from './feature-bundle.mjs';\n\nconst motion = /*@__PURE__*/ createMotionProxy(featureBundle, createDomVisualElement);\n\nexport { motion };\n","import { animations } from '../../../motion/features/animations.mjs';\nimport { drag } from '../../../motion/features/drag.mjs';\nimport { gestureAnimations } from '../../../motion/features/gestures.mjs';\nimport { layout } from '../../../motion/features/layout.mjs';\n\nconst featureBundle = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n\nexport { featureBundle };\n","import { pipe } from 'motion-utils';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { invariant } from 'motion-utils';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { animateVisualElement } from '../interfaces/visual-element.mjs';\n\nfunction stopAnimation(visualElement) {\n    visualElement.values.forEach((value) => value.stop());\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        if (visualElement.variantChildren) {\n            visualElement.variantChildren.forEach((child) => {\n                setVariants(child, variantLabels);\n            });\n        }\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\n/**\n * @public\n */\nfunction animationControls() {\n    /**\n     * Track whether the host component has mounted.\n     */\n    let hasMounted = false;\n    /**\n     * A collection of linked component animation controls.\n     */\n    const subscribers = new Set();\n    const controls = {\n        subscribe(visualElement) {\n            subscribers.add(visualElement);\n            return () => void subscribers.delete(visualElement);\n        },\n        start(definition, transitionOverride) {\n            invariant(hasMounted, \"controls.start() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            const animations = [];\n            subscribers.forEach((visualElement) => {\n                animations.push(animateVisualElement(visualElement, definition, {\n                    transitionOverride,\n                }));\n            });\n            return Promise.all(animations);\n        },\n        set(definition) {\n            invariant(hasMounted, \"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.\");\n            return subscribers.forEach((visualElement) => {\n                setValues(visualElement, definition);\n            });\n        },\n        stop() {\n            subscribers.forEach((visualElement) => {\n                stopAnimation(visualElement);\n            });\n        },\n        mount() {\n            hasMounted = true;\n            return () => {\n                hasMounted = false;\n                controls.stop();\n            };\n        },\n    };\n    return controls;\n}\n\nexport { animationControls, setValues };\n","function isDOMKeyframes(keyframes) {\n    return typeof keyframes === \"object\" && !Array.isArray(keyframes);\n}\n\nexport { isDOMKeyframes };\n","import { resolveElements } from 'motion-dom';\nimport { isDOMKeyframes } from '../utils/is-dom-keyframes.mjs';\n\nfunction resolveSubjects(subject, keyframes, scope, selectorCache) {\n    if (typeof subject === \"string\" && isDOMKeyframes(keyframes)) {\n        return resolveElements(subject, scope, selectorCache);\n    }\n    else if (subject instanceof NodeList) {\n        return Array.from(subject);\n    }\n    else if (Array.isArray(subject)) {\n        return subject;\n    }\n    else {\n        return [subject];\n    }\n}\n\nexport { resolveSubjects };\n","function calculateRepeatDuration(duration, repeat, _repeatDelay) {\n    return duration * (repeat + 1);\n}\n\nexport { calculateRepeatDuration };\n","/**\n * Given a absolute or relative time definition and current/prev time state of the sequence,\n * calculate an absolute time for the next keyframes.\n */\nfunction calcNextTime(current, next, prev, labels) {\n    if (typeof next === \"number\") {\n        return next;\n    }\n    else if (next.startsWith(\"-\") || next.startsWith(\"+\")) {\n        return Math.max(0, current + parseFloat(next));\n    }\n    else if (next === \"<\") {\n        return prev;\n    }\n    else if (next.startsWith(\"<\")) {\n        return Math.max(0, prev + parseFloat(next.slice(1)));\n    }\n    else {\n        return labels.get(next) ?? current;\n    }\n}\n\nexport { calcNextTime };\n","import { mixNumber } from 'motion-dom';\nimport { getEasingForSegment, removeItem } from 'motion-utils';\n\nfunction eraseKeyframes(sequence, startTime, endTime) {\n    for (let i = 0; i < sequence.length; i++) {\n        const keyframe = sequence[i];\n        if (keyframe.at > startTime && keyframe.at < endTime) {\n            removeItem(sequence, keyframe);\n            // If we remove this item we have to push the pointer back one\n            i--;\n        }\n    }\n}\nfunction addKeyframes(sequence, keyframes, easing, offset, startTime, endTime) {\n    /**\n     * Erase every existing value between currentTime and targetTime,\n     * this will essentially splice this timeline into any currently\n     * defined ones.\n     */\n    eraseKeyframes(sequence, startTime, endTime);\n    for (let i = 0; i < keyframes.length; i++) {\n        sequence.push({\n            value: keyframes[i],\n            at: mixNumber(startTime, endTime, offset[i]),\n            easing: getEasingForSegment(easing, i),\n        });\n    }\n}\n\nexport { addKeyframes, eraseKeyframes };\n","/**\n * Take an array of times that represent repeated keyframes. For instance\n * if we have original times of [0, 0.5, 1] then our repeated times will\n * be [0, 0.5, 1, 1, 1.5, 2]. Loop over the times and scale them back\n * down to a 0-1 scale.\n */\nfunction normalizeTimes(times, repeat) {\n    for (let i = 0; i < times.length; i++) {\n        times[i] = times[i] / (repeat + 1);\n    }\n}\n\nexport { normalizeTimes };\n","function compareByTime(a, b) {\n    if (a.at === b.at) {\n        if (a.value === null)\n            return 1;\n        if (b.value === null)\n            return -1;\n        return 0;\n    }\n    else {\n        return a.at - b.at;\n    }\n}\n\nexport { compareByTime };\n","import { isMotionValue, defaultOffset, isGenerator, createGeneratorEasing, fillOffset } from 'motion-dom';\nimport { progress, secondsToMilliseconds, invariant, getEasingForSegment } from 'motion-utils';\nimport { resolveSubjects } from '../animate/resolve-subjects.mjs';\nimport { calculateRepeatDuration } from './utils/calc-repeat-duration.mjs';\nimport { calcNextTime } from './utils/calc-time.mjs';\nimport { addKeyframes } from './utils/edit.mjs';\nimport { normalizeTimes } from './utils/normalize-times.mjs';\nimport { compareByTime } from './utils/sort.mjs';\n\nconst defaultSegmentEasing = \"easeInOut\";\nconst MAX_REPEAT = 20;\nfunction createAnimationsFromSequence(sequence, { defaultTransition = {}, ...sequenceTransition } = {}, scope, generators) {\n    const defaultDuration = defaultTransition.duration || 0.3;\n    const animationDefinitions = new Map();\n    const sequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the sequence array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < sequence.length; i++) {\n        const segment = sequence[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (typeof segment === \"string\") {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        let [subject, keyframes, transition = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (transition.at !== undefined) {\n            currentTime = calcNextTime(currentTime, transition.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        const resolveValueSequence = (valueKeyframes, valueTransition, valueSequence, elementIndex = 0, numSubjects = 0) => {\n            const valueKeyframesAsList = keyframesAsList(valueKeyframes);\n            const { delay = 0, times = defaultOffset(valueKeyframesAsList), type = \"keyframes\", repeat, repeatType, repeatDelay = 0, ...remainingTransition } = valueTransition;\n            let { ease = defaultTransition.ease || \"easeOut\", duration } = valueTransition;\n            /**\n             * Resolve stagger() if defined.\n             */\n            const calculatedDelay = typeof delay === \"function\"\n                ? delay(elementIndex, numSubjects)\n                : delay;\n            /**\n             * If this animation should and can use a spring, generate a spring easing function.\n             */\n            const numKeyframes = valueKeyframesAsList.length;\n            const createGenerator = isGenerator(type)\n                ? type\n                : generators?.[type || \"keyframes\"];\n            if (numKeyframes <= 2 && createGenerator) {\n                /**\n                 * As we're creating an easing function from a spring,\n                 * ideally we want to generate it using the real distance\n                 * between the two keyframes. However this isn't always\n                 * possible - in these situations we use 0-100.\n                 */\n                let absoluteDelta = 100;\n                if (numKeyframes === 2 &&\n                    isNumberKeyframesArray(valueKeyframesAsList)) {\n                    const delta = valueKeyframesAsList[1] - valueKeyframesAsList[0];\n                    absoluteDelta = Math.abs(delta);\n                }\n                const springTransition = { ...remainingTransition };\n                if (duration !== undefined) {\n                    springTransition.duration = secondsToMilliseconds(duration);\n                }\n                const springEasing = createGeneratorEasing(springTransition, absoluteDelta, createGenerator);\n                ease = springEasing.ease;\n                duration = springEasing.duration;\n            }\n            duration ?? (duration = defaultDuration);\n            const startTime = currentTime + calculatedDelay;\n            /**\n             * If there's only one time offset of 0, fill in a second with length 1\n             */\n            if (times.length === 1 && times[0] === 0) {\n                times[1] = 1;\n            }\n            /**\n             * Fill out if offset if fewer offsets than keyframes\n             */\n            const remainder = times.length - valueKeyframesAsList.length;\n            remainder > 0 && fillOffset(times, remainder);\n            /**\n             * If only one value has been set, ie [1], push a null to the start of\n             * the keyframe array. This will let us mark a keyframe at this point\n             * that will later be hydrated with the previous value.\n             */\n            valueKeyframesAsList.length === 1 &&\n                valueKeyframesAsList.unshift(null);\n            /**\n             * Handle repeat options\n             */\n            if (repeat) {\n                invariant(repeat < MAX_REPEAT, \"Repeat count too high, must be less than 20\", \"repeat-count-high\");\n                duration = calculateRepeatDuration(duration, repeat);\n                const originalKeyframes = [...valueKeyframesAsList];\n                const originalTimes = [...times];\n                ease = Array.isArray(ease) ? [...ease] : [ease];\n                const originalEase = [...ease];\n                for (let repeatIndex = 0; repeatIndex < repeat; repeatIndex++) {\n                    valueKeyframesAsList.push(...originalKeyframes);\n                    for (let keyframeIndex = 0; keyframeIndex < originalKeyframes.length; keyframeIndex++) {\n                        times.push(originalTimes[keyframeIndex] + (repeatIndex + 1));\n                        ease.push(keyframeIndex === 0\n                            ? \"linear\"\n                            : getEasingForSegment(originalEase, keyframeIndex - 1));\n                    }\n                }\n                normalizeTimes(times, repeat);\n            }\n            const targetTime = startTime + duration;\n            /**\n             * Add keyframes, mapping offsets to absolute time.\n             */\n            addKeyframes(valueSequence, valueKeyframesAsList, ease, times, startTime, targetTime);\n            maxDuration = Math.max(calculatedDelay + duration, maxDuration);\n            totalDuration = Math.max(targetTime, totalDuration);\n        };\n        if (isMotionValue(subject)) {\n            const subjectSequence = getSubjectSequence(subject, sequences);\n            resolveValueSequence(keyframes, transition, getValueSequence(\"default\", subjectSequence));\n        }\n        else {\n            const subjects = resolveSubjects(subject, keyframes, scope, elementCache);\n            const numSubjects = subjects.length;\n            /**\n             * For every element in this segment, process the defined values.\n             */\n            for (let subjectIndex = 0; subjectIndex < numSubjects; subjectIndex++) {\n                /**\n                 * Cast necessary, but we know these are of this type\n                 */\n                keyframes = keyframes;\n                transition = transition;\n                const thisSubject = subjects[subjectIndex];\n                const subjectSequence = getSubjectSequence(thisSubject, sequences);\n                for (const key in keyframes) {\n                    resolveValueSequence(keyframes[key], getValueTransition(transition, key), getValueSequence(key, subjectSequence), subjectIndex, numSubjects);\n                }\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    sequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || \"easeOut\");\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(defaultSegmentEasing);\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            if (!animationDefinitions.has(element)) {\n                animationDefinitions.set(element, {\n                    keyframes: {},\n                    transition: {},\n                });\n            }\n            const definition = animationDefinitions.get(element);\n            definition.keyframes[key] = keyframes;\n            definition.transition[key] = {\n                ...defaultTransition,\n                duration: totalDuration,\n                ease: valueEasing,\n                times: valueOffset,\n                ...sequenceTransition,\n            };\n        }\n    });\n    return animationDefinitions;\n}\nfunction getSubjectSequence(subject, sequences) {\n    !sequences.has(subject) && sequences.set(subject, {});\n    return sequences.get(subject);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\nfunction keyframesAsList(keyframes) {\n    return Array.isArray(keyframes) ? keyframes : [keyframes];\n}\nfunction getValueTransition(transition, key) {\n    return transition && transition[key]\n        ? {\n            ...transition,\n            ...transition[key],\n        }\n        : { ...transition };\n}\nconst isNumber = (keyframe) => typeof keyframe === \"number\";\nconst isNumberKeyframesArray = (keyframes) => keyframes.every(isNumber);\n\nexport { createAnimationsFromSequence, getValueTransition };\n","import { createBox } from '../../projection/geometry/models.mjs';\nimport { VisualElement } from '../VisualElement.mjs';\n\nfunction isObjectKey(key, object) {\n    return key in object;\n}\nclass ObjectVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"object\";\n    }\n    readValueFromInstance(instance, key) {\n        if (isObjectKey(key, instance)) {\n            const value = instance[key];\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                return value;\n            }\n        }\n        return undefined;\n    }\n    getBaseTargetFromProps() {\n        return undefined;\n    }\n    removeValueFromRenderState(key, renderState) {\n        delete renderState.output[key];\n    }\n    measureInstanceViewportBox() {\n        return createBox();\n    }\n    build(renderState, latestValues) {\n        Object.assign(renderState.output, latestValues);\n    }\n    renderInstance(instance, { output }) {\n        Object.assign(instance, output);\n    }\n    sortInstanceNodePosition() {\n        return 0;\n    }\n}\n\nexport { ObjectVisualElement };\n","import { isSVGElement, isSVGSVGElement } from 'motion-dom';\nimport { HTMLVisualElement } from '../../render/html/HTMLVisualElement.mjs';\nimport { ObjectVisualElement } from '../../render/object/ObjectVisualElement.mjs';\nimport { visualElementStore } from '../../render/store.mjs';\nimport { SVGVisualElement } from '../../render/svg/SVGVisualElement.mjs';\n\nfunction createDOMVisualElement(element) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                transform: {},\n                transformOrigin: {},\n                style: {},\n                vars: {},\n                attrs: {},\n            },\n            latestValues: {},\n        },\n    };\n    const node = isSVGElement(element) && !isSVGSVGElement(element)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options);\n    node.mount(element);\n    visualElementStore.set(element, node);\n}\nfunction createObjectVisualElement(subject) {\n    const options = {\n        presenceContext: null,\n        props: {},\n        visualState: {\n            renderState: {\n                output: {},\n            },\n            latestValues: {},\n        },\n    };\n    const node = new ObjectVisualElement(options);\n    node.mount(subject);\n    visualElementStore.set(subject, node);\n}\n\nexport { createDOMVisualElement, createObjectVisualElement };\n","import { isMotionValue } from 'motion-dom';\nimport { invariant } from 'motion-utils';\nimport { visualElementStore } from '../../render/store.mjs';\nimport { animateTarget } from '../interfaces/visual-element-target.mjs';\nimport { createDOMVisualElement, createObjectVisualElement } from '../utils/create-visual-element.mjs';\nimport { isDOMKeyframes } from '../utils/is-dom-keyframes.mjs';\nimport { resolveSubjects } from './resolve-subjects.mjs';\nimport { animateSingleValue } from './single-value.mjs';\n\nfunction isSingleValue(subject, keyframes) {\n    return (isMotionValue(subject) ||\n        typeof subject === \"number\" ||\n        (typeof subject === \"string\" && !isDOMKeyframes(keyframes)));\n}\n/**\n * Implementation\n */\nfunction animateSubject(subject, keyframes, options, scope) {\n    const animations = [];\n    if (isSingleValue(subject, keyframes)) {\n        animations.push(animateSingleValue(subject, isDOMKeyframes(keyframes)\n            ? keyframes.default || keyframes\n            : keyframes, options ? options.default || options : options));\n    }\n    else {\n        const subjects = resolveSubjects(subject, keyframes, scope);\n        const numSubjects = subjects.length;\n        invariant(Boolean(numSubjects), \"No valid elements provided.\", \"no-valid-elements\");\n        for (let i = 0; i < numSubjects; i++) {\n            const thisSubject = subjects[i];\n            invariant(thisSubject !== null, \"You're trying to perform an animation on null. Ensure that selectors are correctly finding elements and refs are correctly hydrated.\", \"animate-null\");\n            const createVisualElement = thisSubject instanceof Element\n                ? createDOMVisualElement\n                : createObjectVisualElement;\n            if (!visualElementStore.has(thisSubject)) {\n                createVisualElement(thisSubject);\n            }\n            const visualElement = visualElementStore.get(thisSubject);\n            const transition = { ...options };\n            /**\n             * Resolve stagger function if provided.\n             */\n            if (\"delay\" in transition &&\n                typeof transition.delay === \"function\") {\n                transition.delay = transition.delay(i, numSubjects);\n            }\n            animations.push(...animateTarget(visualElement, { ...keyframes, transition }, {}));\n        }\n    }\n    return animations;\n}\n\nexport { animateSubject };\n","import { spring } from 'motion-dom';\nimport { createAnimationsFromSequence } from '../sequence/create.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction animateSequence(sequence, options, scope) {\n    const animations = [];\n    const animationDefinitions = createAnimationsFromSequence(sequence, options, scope, { spring });\n    animationDefinitions.forEach(({ keyframes, transition }, subject) => {\n        animations.push(...animateSubject(subject, keyframes, transition));\n    });\n    return animations;\n}\n\nexport { animateSequence };\n","import { GroupAnimationWithThen } from 'motion-dom';\nimport { removeItem } from 'motion-utils';\nimport { animateSequence } from './sequence.mjs';\nimport { animateSubject } from './subject.mjs';\n\nfunction isSequence(value) {\n    return Array.isArray(value) && value.some(Array.isArray);\n}\n/**\n * Creates an animation function that is optionally scoped\n * to a specific element.\n */\nfunction createScopedAnimate(scope) {\n    /**\n     * Implementation\n     */\n    function scopedAnimate(subjectOrSequence, optionsOrKeyframes, options) {\n        let animations = [];\n        if (isSequence(subjectOrSequence)) {\n            animations = animateSequence(subjectOrSequence, optionsOrKeyframes, scope);\n        }\n        else {\n            animations = animateSubject(subjectOrSequence, optionsOrKeyframes, options, scope);\n        }\n        const animation = new GroupAnimationWithThen(animations);\n        if (scope) {\n            scope.animations.push(animation);\n            animation.finished.then(() => {\n                removeItem(scope.animations, animation);\n            });\n        }\n        return animation;\n    }\n    return scopedAnimate;\n}\nconst animate = createScopedAnimate();\n\nexport { animate, createScopedAnimate };\n","import { useConstant } from '../../utils/use-constant.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { animationControls } from './animation-controls.mjs';\n\n/**\n * Creates `LegacyAnimationControls`, which can be used to manually start, stop\n * and sequence animations on one or more components.\n *\n * The returned `LegacyAnimationControls` should be passed to the `animate` property\n * of the components you want to animate.\n *\n * These components can then be animated with the `start` method.\n *\n * ```jsx\n * import * as React from 'react'\n * import { motion, useAnimation } from 'framer-motion'\n *\n * export function MyComponent(props) {\n *    const controls = useAnimation()\n *\n *    controls.start({\n *        x: 100,\n *        transition: { duration: 0.5 },\n *    })\n *\n *    return <motion.div animate={controls} />\n * }\n * ```\n *\n * @returns Animation controller with `start` and `stop` methods\n *\n * @public\n */\nfunction useAnimationControls() {\n    const controls = useConstant(animationControls);\n    useIsomorphicLayoutEffect(controls.mount, []);\n    return controls;\n}\nconst useAnimation = useAnimationControls;\n\nexport { useAnimation, useAnimationControls };\n","import { resolveElements } from 'motion-dom';\n\nconst thresholds = {\n    some: 0,\n    all: 1,\n};\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"some\" } = {}) {\n    const elements = resolveElements(elementOrSelector);\n    const activeIntersections = new WeakMap();\n    const onIntersectionChange = (entries) => {\n        entries.forEach((entry) => {\n            const onEnd = activeIntersections.get(entry.target);\n            /**\n             * If there's no change to the intersection, we don't need to\n             * do anything here.\n             */\n            if (entry.isIntersecting === Boolean(onEnd))\n                return;\n            if (entry.isIntersecting) {\n                const newOnEnd = onStart(entry.target, entry);\n                if (typeof newOnEnd === \"function\") {\n                    activeIntersections.set(entry.target, newOnEnd);\n                }\n                else {\n                    observer.unobserve(entry.target);\n                }\n            }\n            else if (typeof onEnd === \"function\") {\n                onEnd(entry);\n                activeIntersections.delete(entry.target);\n            }\n        });\n    };\n    const observer = new IntersectionObserver(onIntersectionChange, {\n        root,\n        rootMargin,\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\n    });\n    elements.forEach((element) => observer.observe(element));\n    return () => observer.disconnect();\n}\n\nexport { inView };\n","import { useState, useEffect } from 'react';\nimport { inView } from '../render/dom/viewport/index.mjs';\n\nfunction useInView(ref, { root, margin, amount, once = false, initial = false, } = {}) {\n    const [isInView, setInView] = useState(initial);\n    useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount,\n        };\n        return inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once, amount]);\n    return isInView;\n}\n\nexport { useInView };\n"],"names":["LayoutGroupContext","createContext","useConstant","init","ref","useRef","current","isBrowser","window","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","PresenceContext","MotionConfigContext","transformPagePoint","p","isStatic","reducedMotion","PopChildMeasure","React.Component","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","parent","offsetParent","parentWidth","isHTMLElement","offsetWidth","size","sizeRef","height","offsetHeight","width","top","offsetTop","left","offsetLeft","right","componentDidUpdate","render","children","PopChild","anchorX","root","id","useId","nonce","useContext","useInsertionEffect","x","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","contains","removeChild","jsx","React.cloneElement","cloneElement","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","isReusedContext","context","useMemo","childId","set","isComplete","values","register","delete","forEach","_","key","React.useEffect","Provider","value","Map","usePresence","subscribe","safeToRemove","useCallback","getChildKey","child","onlyElements","filtered","Children","isValidElement","push","AnimatePresence","propagate","isParentPresent","presentChildren","presentKeys","map","isInitialRender","pendingPresentChildren","exitComplete","diffedChildren","setDiffedChildren","useState","renderedChildren","setRenderedChildren","i","length","includes","get","join","exitingChildren","nextChildren","splice","forceRender","Fragment","has","isEveryExitComplete","isExitComplete","LazyContext","strict","featureProps","animation","exit","drag","focus","hover","tap","pan","inView","layout","featureDefinitions","isEnabled","some","name","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","isValidProp","require","default","MotionContext","isAnimationControls","v","start","isVariantLabel","Array","isArray","variantPriorityOrder","variantProps","isControllingVariants","animate","isVariantNode","Boolean","variants","useCreateMotionContext","undefined","inherit","getCurrentTreeVariants","variantLabelsAsDependency","prop","scaleCorrectors","isForcedMotionValue","layoutId","transformProps","translateAlias","y","z","transformPerspective","numTransforms","transformPropOrder","buildHTMLStyles","state","latestValues","transformTemplate","vars","transformOrigin","hasTransform","hasTransformOrigin","isCSSVariableName","valueAsType","getValueAsType","numberValueTypes","transform","transformString","transformIsDefault","valueIsDefault","parseFloat","trim","buildTransform","originX","originY","originZ","createHtmlRenderState","copyRawValuesOnly","target","source","isMotionValue","useStyle","visualState","Object","assign","useInitialMotionValues","useHTMLProps","htmlProps","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","dashKeys","offset","array","camelKeys","buildSVGAttrs","attrX","attrY","attrScale","pathLength","pathSpacing","pathOffset","latest","isSVGTag","styleProp","viewBox","attrs","transformBox","scale","spacing","useDashCase","keys","px","buildSVGPath","createSvgRenderState","tag","toLowerCase","useSVGProps","_isStatic","Component","visualProps","rawStyles","lowercaseSVGElements","isSVGComponent","indexOf","test","useRender","forwardMotionProps","filteredProps","isDom","filterProps","elementProps","getValueState","visualElement","getVelocity","resolveVariantFromProps","definition","velocity","resolveMotionValue","makeLatestValues","presenceContext","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","list","resolved","transitionEnd","transition","valueTarget","makeUseVisualState","config","make","scrapeMotionValuesFromProps","createRenderState","renderState","makeState","newValues","getValue","liveStyle","useHTMLVisualState","scrapeMotionValuesFromProps$1","charAt","toUpperCase","substring","useSVGVisualState","motionComponentSymbol","Symbol","for","isRefObject","prototype","hasOwnProperty","call","useMotionRef","externalRef","instance","onMount","mount","unmount","camelToDash","str","replace","optimizedAppearDataAttribute","SwitchLayoutGroupContext","useVisualElement","createVisualElement","ProjectionNodeConstructor","lazyContext","reducedMotionConfig","visualElementRef","renderer","blockInitialAnimation","initialLayoutGroupConfig","projection","type","initialPromotionConfig","dragConstraints","layoutScroll","layoutRoot","layoutCrossfade","getClosestProjectingNode","setOptions","alwaysMeasureLayout","animationType","crossfade","createProjectionNode","isMounted","update","optimisedAppearId","wantsHandoff","MotionHandoffIsComplete","MotionHasOptimisedAnimation","MotionIsMounted","updateFeatures","scheduleRenderMicrotask","animationState","animateChanges","queueMicrotask","MotionHandoffMarkAsComplete","enteringChildren","options","allowProjection","createMotionComponent","preloadedFeatures","features","loadFeatures","useVisualState","MotionDOMComponent","MeasureLayout","configAndProps","useLayoutId","layoutProjection","combined","ProjectionNode","getProjectionFunctionality","jsxs","displayName","ForwardRefMotionComponent","forwardRef","layoutGroupId","createMotionProxy","Proxy","componentCache","factory","_target","convertBoundingBoxToBox","bottom","min","max","isIdentityScale","hasScale","scaleX","scaleY","has2DTranslate","rotate","rotateX","rotateY","skewX","skewY","is2DTranslate","scalePoint","point","originPoint","applyPointDelta","translate","boxScale","applyAxisDelta","axis","applyBoxDelta","box","TREE_SCALE_SNAP_MIN","TREE_SCALE_SNAP_MAX","translateAxis","distance","transformAxis","axisTranslate","axisScale","axisOrigin","mixNumber","measureViewportBox","transformPoint","topLeft","bottomRight","transformBoxPoints","getBoundingClientRect","createBox","prefersReducedMotion","hasReducedMotionListener","visualElementStore","WeakMap","propEventHandlers","VisualElement","_props","_prevProps","_visualElement","constructor","shouldReduceMotion","KeyframeResolver","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","notify","triggerBuild","renderInstance","renderScheduledAt","scheduleRender","now","time","frame","baseTarget","initialValues","depth","variantChildren","manuallyAnimateOnMount","willChange","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addEventListener","initPrefersReducedMotion","addChild","cancelFrame","remove","clear","feature","add","valueIsTransform","onBindTransform","removeOnChange","on","latestValue","onUpdate","preRender","isTransformDirty","removeSyncCheck","MotionCheckAppearSync","owner","stop","sortNodePosition","other","sortInstanceNodePosition","featureDefinition","Feature","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","setStaticValue","prevPresenceContext","listener","next","prev","nextValue","prevValue","addValue","motionValue","hasValue","existingValue","jump","hasAnimated","removeValue","updateMotionValuesFromProps","handleChildMotionValue","getProps","getVariant","getDefaultTransition","getTransformPagePoint","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","defaultValue","readValue","getBaseTargetFromProps","readValueFromInstance","isNumericalString","isZeroValueString","findValueType","complex","getAnimatableNone","setBaseTarget","getBaseTarget","valueFromInitial","variant","eventName","callback","SubscriptionManager","args","microtask","DOMVisualElement","super","arguments","DOMKeyframesResolver","a","b","compareDocumentPosition","childSubscription","textContent","renderHTML","elementStyle","applyProjectionStyles","setProperty","HTMLVisualElement","isProjecting","defaultTransformValue","readTransformValue","computedStyle","getComputedStyle","getPropertyValue","camelCaseAttributes","SVGVisualElement","defaultType","getDefaultValueType","getAttribute","_styleProp","setAttribute","renderSVG","tagName","createDomVisualElement","resolveVariant","isKeyframesTarget","setMotionValue","setTarget","addValueToWillChange","MotionGlobalConfig","WillChange","newWillChange","getOptimisedAppearId","isNotNull","underDampedSpring","stiffness","damping","restSpeed","keyframesTransition","duration","ease","valueKey","keyframes","Math","sqrt","animateMotionValue","isHandoff","onComplete","valueTransition","getValueTransition","delay","elapsed","secondsToMilliseconds","when","_delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from","isTransitionDefined","shouldSkip","makeAnimationInstant","instantAnimations","skipAnimations","allowFlatten","finalKeyframe","resolvedKeyframes","filter","getFinalKeyframe","isSync","JSAnimation","AsyncMotionValueAnimation","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","animateTarget","targetAndTransition","transitionOverride","animations","animationTypeState","getState","currentValue","isAnimating","MotionHandoffAnimation","appearId","startTime","positionalKeys","Promise","all","then","calcChildStagger","index","sort","numChildren","maxStaggerDuration","animateVariant","getAnimation","resolve","getChildAnimations","forwardDelay","animateChildren","first","last","animateVisualElement","resolvedDefinition","shallowCompare","prevLength","numVariantProps","getVariantContext","reversePriorityOrder","reverse","numAnimationTypes","createAnimationState","animateList","createState","buildResolvedTypeValues","acc","changedActiveType","removedKeys","encounteredKeys","removedVariantIndex","Infinity","typeState","propIsVariant","activeDelta","isActive","isInherited","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","valueHasChanged","willAnimateViaParent","parentVariant","fallbackAnimation","initialTransition","fallbackTarget","shouldAnimate","setActive","setAnimateFunction","makeAnimator","reset","createTypeState","whileInView","whileHover","whileDrag","whileFocus","node","updateAnimationControlsSubscription","unmountControls","prevAnimate","prevIsPresent","exitAnimation","addDomEvent","handler","passive","removeEventListener","extractEventInfo","event","pageX","pageY","addPointerEvent","isPrimaryPointer","addPointerInfo","calcLength","calcAxisDelta","delta","origin","isNaN","calcBoxDelta","calcRelativeAxis","relative","calcRelativeAxisPosition","calcRelativePosition","eachAxis","getContextWindow","ownerDocument","defaultView","abs","PanSession","handlers","contextWindow","dragSnapToOrigin","distanceThreshold","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","distance2D","timestamp","frameData","onStart","onMove","handlePointerMove","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","initialInfo","onSessionStart","removeListeners","pipe","updateHandlers","subtractPoint","lastDevicePoint","startDevicePoint","timeDelta","timestampedPoint","lastPoint","millisecondsToSeconds","currentVelocity","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","elementDragControls","VisualElementDragControls","openDragLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","latestPointerEvent","latestPanInfo","originEvent","snapToCursor","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","setDragLock","resolveConstraints","isAnimationBlocked","getAxisMotionValue","percent","measuredAxis","layoutBox","postRender","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","getAnimationState","play","finalEvent","finalPanInfo","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","measure","prevConstraints","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","rootProjectionNode","viewportBox","scroll","measurePageBox","measuredConstraints","calcViewportConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","startAxisValueAnimation","pause","dragKey","externalMotionValue","scalePositionWithinConstraints","boxProgress","sourceLength","targetLength","progress","clamp","calcOrigin","updateScroll","updateLayout","addListeners","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","read","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","asyncHandler","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","correctBoxShadow","treeScale","projectionDelta","original","shadow","parse","template","createTransformer","xScale","yScale","averageScale","hasTakenAnySnapshot","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","correctors","isCSSVariable","addScaleCorrector","defaultScaleCorrectors","group","didUpdate","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","deregister","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","animateSingleValue","motionValue$1","compareByDepth","FlatTree","isDirty","addUniqueItem","removeItem","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circOut","easeCrossfadeOut","noop","easing","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","round","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","transformAxes","resetDistortingTransform","sharedAnimationValues","cancelTreeOptimisedTransformAnimations","projectionNode","hasCheckedOptimisedAppear","MotionCancelOptimisedAnimation","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","animationCommitId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","notifyListeners","subscriptionManager","hasListeners","isSVGElement","isSVGSVGElement","cancelDelay","innerWidth","resizeUnblockUpdate","newInnerWidth","timeout","checkElapsed","setup","finishAnimation","registerSharedNode","hasRelativeLayoutChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","hasTargetChanged","targetLayout","hasOnlyRelativeTargetChanged","animationOptions","onPlay","setAnimationOrigin","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","frameSteps","process","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","measuredBox","prevLayout","layoutCorrected","phase","needsMeasurement","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","treePath","isSharedTransition","treeLength","display","applyTreeDeltas","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","onStop","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","xLength","yLength","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","rotateZ","resetValues","targetStyle","visibility","pointerEvents","valuesToRender","latestTransform","xTranslate","yTranslate","zTranslate","elementScaleX","elementScaleY","buildProjectionTransform","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","string","navigator","userAgent","roundPoint","maxDistance","DocumentProjectionNode","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","removeGroupControls","controls","dragControls","handleHoverEvent","lifecycle","handlePressEvent","HTMLButtonElement","disabled","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","observeIntersection","rootInteresectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","initIntersectionObserver","observe","unobserve","thresholdNames","motion","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","isIntersecting","onViewportEnter","onViewportLeave","prevViewport","hasViewportOptionChanged","press","_element","endEvent","success","useGlobalTarget","globalTapTarget","onFocus","isFocusVisible","e","onBlur","setVariants","variantLabels","animationControls","subscribers","setValues","isDOMKeyframes","resolveSubjects","subject","scope","selectorCache","resolveElements","NodeList","calculateRepeatDuration","_repeatDelay","calcNextTime","labels","slice","addKeyframes","sequence","endTime","keyframe","at","eraseKeyframes","getEasingForSegment","normalizeTimes","times","compareByTime","getSubjectSequence","sequences","getValueSequence","keyframesAsList","isNumber","isNumberKeyframesArray","every","ObjectVisualElement","object","isObjectKey","createDOMVisualElement","createObjectVisualElement","animateSubject","isSingleValue","subjects","numSubjects","thisSubject","Element","animateSequence","animationDefinitions","defaultTransition","sequenceTransition","generators","defaultDuration","elementCache","timeLabels","prevTime","currentTime","totalDuration","segment","maxDuration","resolveValueSequence","valueKeyframes","valueSequence","elementIndex","valueKeyframesAsList","defaultOffset","remainingTransition","calculatedDelay","numKeyframes","createGenerator","isGenerator","absoluteDelta","springTransition","springEasing","createGeneratorEasing","remainder","fillOffset","unshift","originalKeyframes","originalTimes","originalEase","repeatIndex","keyframeIndex","targetTime","subjectIndex","subjectSequence","valueSequences","valueOffset","valueEasing","createAnimationsFromSequence","spring","subjectOrSequence","optionsOrKeyframes","GroupAnimationWithThen","useAnimation","thresholds","useInView","setInView","elementOrSelector","elements","activeIntersections","observer","newOnEnd","disconnect"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]}