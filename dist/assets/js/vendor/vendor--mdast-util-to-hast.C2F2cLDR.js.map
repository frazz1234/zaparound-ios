{"version":3,"file":"vendor--mdast-util-to-hast.C2F2cLDR.js","sources":["../../../../node_modules/mdast-util-to-hast/lib/revert.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../../../node_modules/mdast-util-to-hast/lib/footer.js","../../../../node_modules/mdast-util-to-hast/lib/state.js","../../../../node_modules/mdast-util-to-hast/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n"],"names":["revert","state","node","subtype","referenceType","suffix","label","identifier","type","value","alt","contents","all","head","unshift","tail","length","push","listItemLoose","spread","children","handlers","blockquote","result","tagName","properties","wrap","patch","applyData","break","code","lang","className","meta","data","delete","emphasis","footnoteReference","clobberPrefix","options","id","String","toUpperCase","safeId","normalizeUri","toLowerCase","index","footnoteOrder","indexOf","counter","reuseCounter","footnoteCounts","get","undefined","set","link","href","dataFootnoteRef","ariaDescribedBy","sup","heading","depth","html","allowDangerousHtml","imageReference","definition","definitionById","src","url","title","image","inlineCode","text","replace","linkReference","listItem","parent","results","loose","listLoose","checked","paragraph","disabled","child","list","start","Array","isArray","includes","ordered","root","strong","table","rows","firstRow","shift","tableContent","body","pointStart","end","pointEnd","position","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","trimLines","thematicBreak","toml","ignore","yaml","footnoteDefinition","defaultFootnoteBackContent","_","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","own","hasOwnProperty","emptyOptions","from","to","hName","hChildren","hProperties","Object","assign","structuredClone","defaultUnknownHandler","call","nodes","trimMarkdownSpaceStart","charCodeAt","slice","toHast","tree","settings","Map","footnoteById","defaultHandlers","values","one","handle","passThrough","shallow","unknownHandler","visit","map","has","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","content","backReferences","counts","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]}