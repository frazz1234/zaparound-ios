{"version":3,"file":"vendor--micromark-core-commonmark.yO25BTZZ.js","sources":["../../../../node_modules/micromark-core-commonmark/lib/attention.js","../../../../node_modules/micromark-core-commonmark/lib/autolink.js","../../../../node_modules/micromark-core-commonmark/lib/blank-line.js","../../../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../../../node_modules/micromark-core-commonmark/lib/code-text.js","../../../../node_modules/micromark-core-commonmark/lib/content.js","../../../../node_modules/micromark-core-commonmark/lib/definition.js","../../../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../../../node_modules/micromark-core-commonmark/lib/html-text.js","../../../../node_modules/micromark-core-commonmark/lib/label-end.js","../../../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../../../node_modules/micromark-core-commonmark/lib/list.js","../../../../node_modules/micromark-core-commonmark/lib/setext-underline.js"],"sourcesContent":["/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}"],"names":["attention","name","resolveAll","events","context","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","index","length","type","_close","_open","sliceSerialize","charCodeAt","end","start","movePoint","push","parser","constructs","insideSpan","null","slice","splice","tokenize","effects","ok","attentionMarkers","this","previous","before","classifyCharacter","marker","code","enter","inside","consume","token","exit","after","includes","close","Boolean","point","column","_bufferIndex","autolink","nok","size","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","next","blankLine","partial","markdownSpace","factorySpace","markdownLineEnding","blockQuote","continuation","self","contBefore","disable","undefined","attempt","state","containerState","_container","characterEscape","asciiPunctuation","characterReference","max","test","numeric","value","asciiHexDigit","asciiDigit","decodeNamedCharacterReference","nonLazyContinuation","lineStart","lazy","now","line","codeFenced","concrete","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","tail","sequenceOpen","beforeSequenceOpen","infoBefore","interrupt","check","atNonLazyBreak","contentType","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","codeIndented","afterPrefix","atBreak","furtherStart","codeText","resolve","tailExitIndex","headEnterIndex","between","data","content","subtokenize","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","flow","definition","identifier","factoryLabel","call","labelAfter","normalizeIdentifier","markerAfter","markdownLineEndingOrSpace","factoryWhitespace","destinationBefore","factoryDestination","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","factoryTitle","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","headingAtx","sequenceFurther","htmlFlow","resolveTo","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","String","fromCharCode","tagName","commentOpenInside","cdataOpenInside","slash","toLowerCase","htmlRawNames","htmlBlockNames","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","newEvents","media","_inactive","_balanced","label","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","labelStartLink","lineEnding","thematicBreak","sequence","list","_closeFlow","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","kind","atMarker","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","setextUnderline","heading","paragraph"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]}