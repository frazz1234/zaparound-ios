{"version":3,"file":"vendor--mdast-util-gfm-footnote.e5vq7Xl8.js","sources":["../../../../node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n"],"names":["enterFootnoteCallString","this","buffer","enterFootnoteCall","token","enter","type","identifier","label","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","children","exitFootnoteCallString","resume","node","stack","length","assert","normalizeIdentifier","sliceSerialize","toLowerCase","exitFootnoteCall","exit","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","footnoteReference","_","state","info","tracker","createTracker","value","move","subexit","safe","associationId","after","before","gfmFootnoteFromMarkdown","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","gfmFootnoteToMarkdown","options","firstLineBlank","handlers","footnoteDefinition","shift","indentLines","containerFlow","current","mapAll","mapExceptFirst","unsafe","character","inConstruct","line","index","blank","peek"],"mappings":"+HAwBA,SAASA,IACPC,KAAKC,QACP,CAMA,SAASC,EAAkBC,GACzBH,KAAKI,MAAM,CAACC,KAAM,oBAAqBC,WAAY,GAAIC,MAAO,IAAKJ,EACrE,CAMA,SAASK,IACPR,KAAKC,QACP,CAMA,SAASQ,EAAwBN,GAC/BH,KAAKI,MACH,CAACC,KAAM,qBAAsBC,WAAY,GAAIC,MAAO,GAAIG,SAAU,IAClEP,EAEJ,CAMA,SAASQ,EAAuBR,GAC9B,MAAMI,EAAQP,KAAKY,SACbC,EAAOb,KAAKc,MAAMd,KAAKc,MAAMC,OAAS,GAC5CC,EAAqB,sBAAdH,EAAKR,MACZQ,EAAKP,WAAaW,EAChBjB,KAAKkB,eAAef,IACpBgB,cACFN,EAAKN,MAAQA,CACf,CAMA,SAASa,EAAiBjB,GACxBH,KAAKqB,KAAKlB,EACZ,CAMA,SAASmB,EAAkCnB,GACzC,MAAMI,EAAQP,KAAKY,SACbC,EAAOb,KAAKc,MAAMd,KAAKc,MAAMC,OAAS,GAC5CC,EAAqB,uBAAdH,EAAKR,MACZQ,EAAKP,WAAaW,EAChBjB,KAAKkB,eAAef,IACpBgB,cACFN,EAAKN,MAAQA,CACf,CAMA,SAASgB,EAAuBpB,GAC9BH,KAAKqB,KAAKlB,EACZ,CAWA,SAASqB,EAAkBX,EAAMY,EAAGC,EAAOC,GACzC,MAAMC,EAAUF,EAAMG,cAAcF,GACpC,IAAIG,EAAQF,EAAQG,KAAK,MACzB,MAAMV,EAAOK,EAAMtB,MAAM,qBACnB4B,EAAUN,EAAMtB,MAAM,aAO5B,OANA0B,GAASF,EAAQG,KACfL,EAAMO,KAAKP,EAAMQ,cAAcrB,GAAO,CAACsB,MAAO,IAAKC,OAAQN,KAE7DE,IACAX,IACAS,GAASF,EAAQG,KAAK,KACfD,CACT,CASO,SAASO,IACd,MAAO,CACLjC,MAAO,CACLkC,sBAAuBvC,EACvBwC,gBAAiBrC,EACjBsC,iCAAkChC,EAClCiC,sBAAuBhC,GAEzBY,KAAM,CACJiB,sBAAuB3B,EACvB4B,gBAAiBnB,EACjBoB,iCAAkClB,EAClCmB,sBAAuBlB,GAG7B,CAWO,SAASmB,EAAsBC,GAEpC,IAAIC,GAAiB,EAMrB,OAJID,GAAWA,EAAQC,iBACrBA,GAAiB,GAGZ,CACLC,SAAU,CAACC,mBASb,SAA4BjC,EAAMY,EAAGC,EAAOC,GAC1C,MAAMC,EAAUF,EAAMG,cAAcF,GACpC,IAAIG,EAAQF,EAAQG,KAAK,MACzB,MAAMV,EAAOK,EAAMtB,MAAM,sBACnB4B,EAAUN,EAAMtB,MAAM,SAC5B0B,GAASF,EAAQG,KACfL,EAAMO,KAAKP,EAAMQ,cAAcrB,GAAO,CAACuB,OAAQN,EAAOK,MAAO,OAE/DH,IAEAF,GAASF,EAAQG,KAAK,MAElBlB,EAAKH,UAAYG,EAAKH,SAASK,OAAS,IAC1Ca,EAAQmB,MAAM,GAEdjB,GAASF,EAAQG,MACda,EAAiB,KAAO,KACvBlB,EAAMsB,YACJtB,EAAMuB,cAAcpC,EAAMe,EAAQsB,WAClCN,EAAiBO,EAASC,KAOlC,OAFA/B,IAEOS,CACX,EApCmCN,qBAE/B6B,OAAQ,CAAC,CAACC,UAAW,IAAKC,YAAa,CAAC,QAAS,WAAY,eAmCjE,CAGA,SAASH,EAAeI,EAAMC,EAAOC,GACnC,OAAiB,IAAVD,EAAcD,EAAOL,EAAOK,EAAMC,EAAOC,EAClD,CAGA,SAASP,EAAOK,EAAMC,EAAOC,GAC3B,OAAQA,EAAQ,GAAK,QAAUF,CACjC,CAjMAhC,EAAkBmC,KAkFlB,WACE,MAAO,GACT","x_google_ignoreList":[0]}