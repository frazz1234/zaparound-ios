{"version":3,"file":"vendor--hast-util-to-jsx-runtime.BOWXXjuU.js","sources":["../../../../node_modules/hast-util-to-jsx-runtime/lib/index.js"],"sourcesContent":["/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they donâ€™t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesnâ€™t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n"],"names":["own","hasOwnProperty","emptyMap","Map","cap","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","options","undefined","Fragment","TypeError","filePath","create","development","jsxDEV","node","type","props","key","isStaticChildren","Array","isArray","children","point","pointStart","columnNumber","column","fileName","lineNumber","line","developmentCreate","jsx","jsxs","_","fn","productionCreate","state","ancestors","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","space","svg","html","stylePropertyNameCase","tableCellAlignToStyle","result","one","parentSchema","tagName","toLowerCase","push","findComponentFromName","alignValue","prop","properties","call","createProperty","value","has","style","createElementProps","createChildren","filter","child","whitespace","addNode","addChildren","pop","element","data","estree","expression","body","assert","evaluateExpression","crashEstree","position","mdxExpression","name","attribute","attributes","objectExpression","property","Object","assign","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","text","length","index","countsByName","count","get","set","info","find","Number","isNaN","commaSeparated","commas","spaces","styleObject","styleToJs","reactCompat","error","cause","message","VFileMessage","ruleId","source","file","url","parseStyle","String","domCasing","cssCasing","from","transformStyleToCssCasing","transformStylesToCssCasing","hastToReact","allowExpression","includes","identifiers","split","isIdentifierName","object","computed","Boolean","optional","test","place","to","replace","toDash","slice","$0"],"mappings":"2jBAsBA,MAAMA,EAAM,CAAA,EAAGC,eAGTC,EAAW,IAAIC,IAEfC,EAAM,SAaNC,EAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAE7DC,EAAmB,IAAID,IAAI,CAAC,KAAM,OAElCE,EAAO,0DAcN,SAASC,EAAaC,EAAMC,GACjC,IAAKA,QAAgCC,IAArBD,EAAQE,SACtB,MAAM,IAAIC,UAAU,kCAGtB,MAAMC,EAAWJ,EAAQI,eAAYH,EAErC,IAAII,EAEJ,GAAIL,EAAQM,YAAa,CACvB,GAA8B,mBAAnBN,EAAQO,OACjB,MAAM,IAAIJ,UACR,yDAIJE,EA8TJ,SAA2BD,EAAUG,GACnC,OAAOF,EAEP,SAASA,EAAOG,EAAMC,EAAMC,EAAOC,GAEjC,MAAMC,EAAmBC,MAAMC,QAAQJ,EAAMK,UACvCC,EAAQC,EAAWT,GACzB,OAAOD,EACLE,EACAC,EACAC,EACAC,EACA,CACEM,aAAcF,EAAQA,EAAMG,OAAS,OAAIlB,EACzCmB,SAAUhB,EACViB,WAAYL,EAAQA,EAAMM,UAAOrB,QAEnCA,EAEN,CACA,CAlVasB,CAAkBnB,EAAUJ,EAAQO,OACjD,KAAS,CACL,GAA2B,mBAAhBP,EAAQwB,IACjB,MAAM,IAAIrB,UAAU,wCAGtB,GAA4B,mBAAjBH,EAAQyB,KACjB,MAAM,IAAItB,UAAU,yCAGtBE,EAiSJ,SAA0BqB,EAAGF,EAAKC,GAChC,OAAOpB,EAEP,SAASA,EAAOqB,EAAGjB,EAAMC,EAAOC,GAE9B,MACMgB,EADmBd,MAAMC,QAAQJ,EAAMK,UACfU,EAAOD,EACrC,OAAOb,EAAMgB,EAAGlB,EAAMC,EAAOC,GAAOgB,EAAGlB,EAAMC,EACjD,CACA,CA1SakB,CAAiBxB,EAAUJ,EAAQwB,IAAKxB,EAAQyB,KAC7D,CAGE,MAAMI,EAAQ,CACZ3B,SAAUF,EAAQE,SAClB4B,UAAW,GACXC,WAAY/B,EAAQ+B,YAAc,CAAE,EACpC1B,SACA2B,yBAA0BhC,EAAQgC,0BAA4B,QAC9DC,UAAWjC,EAAQkC,gBAAkBlC,EAAQkC,uBAAoBjC,EACjEG,WACA+B,mBAAoBnC,EAAQmC,qBAAsB,EAClDC,UAA+B,IAArBpC,EAAQoC,SAClBC,SAAUrC,EAAQqC,WAAY,EAC9BC,OAA0B,QAAlBtC,EAAQuC,MAAkBC,EAAMC,EACxCC,sBAAuB1C,EAAQ0C,uBAAyB,MACxDC,uBAAyD,IAAlC3C,EAAQ2C,uBAG3BC,EAASC,EAAIhB,EAAO9B,OAAME,GAGhC,OAAI2C,GAA4B,iBAAXA,EACZA,EAIFf,EAAMxB,OACXN,EACA8B,EAAM3B,SACN,CAACa,SAAU6B,QAAU3C,QACrBA,EAEJ,CAcA,SAAS4C,EAAIhB,EAAOrB,EAAMG,GACxB,MAAkB,YAAdH,EAAKC,KAqCX,SAAiBoB,EAAOrB,EAAMG,GAC5B,MAAMmC,EAAejB,EAAMS,OAC3B,IAAIA,EAASQ,EAEsB,QAA/BtC,EAAKuC,QAAQC,eAAkD,SAAvBF,EAAaP,QACvDD,EAASE,EACTX,EAAMS,OAASA,GAGjBT,EAAMC,UAAUmB,KAAKzC,GAErB,MAAMC,EAAOyC,EAAsBrB,EAAOrB,EAAKuC,SAAS,GAClDrC,EAkPR,SAA4BmB,EAAOrB,GAEjC,MAAME,EAAQ,CAAA,EAEd,IAAIyC,EAEAC,EAEJ,IAAKA,KAAQ5C,EAAK6C,WAChB,GAAa,aAATD,GAAuB/D,EAAIiE,KAAK9C,EAAK6C,WAAYD,GAAO,CAC1D,MAAMR,EAASW,EAAe1B,EAAOuB,EAAM5C,EAAK6C,WAAWD,IAE3D,GAAIR,EAAQ,CACV,MAAOjC,EAAK6C,GAASZ,EAGnBf,EAAMc,uBACE,UAARhC,GACiB,iBAAV6C,GACP5D,EAAiB6D,IAAIjD,EAAKuC,SAE1BI,EAAaK,EAEb9C,EAAMC,GAAO6C,CAEvB,CACA,CAGE,GAAIL,EAAY,EAEsBzC,EAAMgD,QAAUhD,EAAMgD,MAAQ,CAAA,IAC5B,QAAhC7B,EAAMa,sBAAkC,aAAe,aAC3DS,CACN,CAEE,OAAOzC,CACT,CAvRgBiD,CAAmB9B,EAAOrB,GACxC,IAAIO,EAAW6C,EAAe/B,EAAOrB,GAEjCd,EAAc+D,IAAIjD,EAAKuC,WACzBhC,EAAWA,EAAS8C,QAAO,SAAUC,GACnC,MAAwB,iBAAVA,IAAsBC,EAAWD,EAChD,KAUH,OAPAE,EAAQnC,EAAOnB,EAAOD,EAAMD,GAC5ByD,EAAYvD,EAAOK,GAGnBc,EAAMC,UAAUoC,MAChBrC,EAAMS,OAASQ,EAERjB,EAAMxB,OAAOG,EAAMC,EAAMC,EAAOC,EACzC,CAjEWwD,CAAQtC,EAAOrB,EAAMG,GAGZ,sBAAdH,EAAKC,MAA8C,sBAAdD,EAAKC,KA0EhD,SAAuBoB,EAAOrB,GAC5B,GAAIA,EAAK4D,MAAQ5D,EAAK4D,KAAKC,QAAUxC,EAAMI,UAAW,CACpD,MACMqC,EADU9D,EAAK4D,KAAKC,OACCE,KAAK,GAIhC,OAHAC,EAA2B,wBAApBF,EAAW7D,MAIhBoB,EAAMI,UAAUwC,mBAAmBH,EAAWA,WAEpD,CAEEI,EAAY7C,EAAOrB,EAAKmE,SAC1B,CAtFWC,CAAc/C,EAAOrB,GAGZ,sBAAdA,EAAKC,MAA8C,sBAAdD,EAAKC,KAsHhD,SAAuBoB,EAAOrB,EAAMG,GAClC,MAAMmC,EAAejB,EAAMS,OAC3B,IAAIA,EAASQ,EAEK,QAAdtC,EAAKqE,MAAyC,SAAvB/B,EAAaP,QACtCD,EAASE,EACTX,EAAMS,OAASA,GAGjBT,EAAMC,UAAUmB,KAAKzC,GAErB,MAAMC,EACU,OAAdD,EAAKqE,KACDhD,EAAM3B,SACNgD,EAAsBrB,EAAOrB,EAAKqE,MAAM,GACxCnE,EAuMR,SAA+BmB,EAAOrB,GAEpC,MAAME,EAAQ,CAAA,EAEd,IAAK,MAAMoE,KAAatE,EAAKuE,WAC3B,GAAuB,8BAAnBD,EAAUrE,KACZ,GAAIqE,EAAUV,MAAQU,EAAUV,KAAKC,QAAUxC,EAAMI,UAAW,CAC9D,MACMqC,EADUQ,EAAUV,KAAKC,OACJE,KAAK,GAChCC,EAA2B,wBAApBF,EAAW7D,MAClB,MAAMuE,EAAmBV,EAAWA,WACpCE,EAAiC,qBAA1BQ,EAAiBvE,MACxB,MAAMwE,EAAWD,EAAiB3B,WAAW,GAC7CmB,EAAyB,kBAAlBS,EAASxE,MAEhByE,OAAOC,OACLzE,EACAmB,EAAMI,UAAUwC,mBAAmBQ,EAASG,UAEtD,MACQV,EAAY7C,EAAOrB,EAAKmE,cAErB,CAEL,MAAME,EAAOC,EAAUD,KAEvB,IAAIrB,EAEJ,GAAIsB,EAAUtB,OAAoC,iBAApBsB,EAAUtB,MACtC,GACEsB,EAAUtB,MAAMY,MAChBU,EAAUtB,MAAMY,KAAKC,QACrBxC,EAAMI,UACN,CACA,MACMqC,EADUQ,EAAUtB,MAAMY,KAAKC,OACVE,KAAK,GAChCC,EAA2B,wBAApBF,EAAW7D,MAClB+C,EAAQ3B,EAAMI,UAAUwC,mBAAmBH,EAAWA,WAChE,MACUI,EAAY7C,EAAOrB,EAAKmE,eAG1BnB,EAA4B,OAApBsB,EAAUtB,OAAwBsB,EAAUtB,MAItD9C,EAAMmE,IACZ,CAGE,OAAOnE,CACT,CA1PgB2E,CAAsBxD,EAAOrB,GACrCO,EAAW6C,EAAe/B,EAAOrB,GASvC,OAPAwD,EAAQnC,EAAOnB,EAAOD,EAAMD,GAC5ByD,EAAYvD,EAAOK,GAGnBc,EAAMC,UAAUoC,MAChBrC,EAAMS,OAASQ,EAERjB,EAAMxB,OAAOG,EAAMC,EAAMC,EAAOC,EACzC,CA/IW2E,CAAczD,EAAOrB,EAAMG,GAGlB,aAAdH,EAAKC,KA2FX,SAAgBoB,EAAOrB,GACrB,GAAIA,EAAK4D,MAAQ5D,EAAK4D,KAAKC,QAAUxC,EAAMI,UAEzC,OACEJ,EAAMI,UAAUsD,gBAAgB/E,EAAK4D,KAAKC,QAI9CK,EAAY7C,EAAOrB,EAAKmE,SAC1B,CAnGWa,CAAO3D,EAAOrB,GAGL,SAAdA,EAAKC,KAsJX,SAAcoB,EAAOrB,EAAMG,GAEzB,MAAMD,EAAQ,CAAA,EAId,OAFAuD,EAAYvD,EAAOkD,EAAe/B,EAAOrB,IAElCqB,EAAMxB,OAAOG,EAAMqB,EAAM3B,SAAUQ,EAAOC,EACnD,CA5JW8E,CAAK5D,EAAOrB,EAAMG,GAGT,SAAdH,EAAKC,KAqKX,SAAciB,EAAGlB,GACf,OAAOA,EAAKgD,KACd,CAtKWkC,CAAK7D,EAAOrB,QADrB,CAGF,CAoLA,SAASwD,EAAQnC,EAAOnB,EAAOD,EAAMD,GAEf,iBAATC,GAAqBA,IAASoB,EAAM3B,UAAY2B,EAAMQ,WAC/D3B,EAAMF,KAAOA,EAEjB,CAYA,SAASyD,EAAYvD,EAAOK,GAC1B,GAAIA,EAAS4E,OAAS,EAAG,CACvB,MAAMnC,EAAQzC,EAAS4E,OAAS,EAAI5E,EAAWA,EAAS,GAEpDyC,IACF9C,EAAMK,SAAWyC,EAEvB,CACA,CA+KA,SAASI,EAAe/B,EAAOrB,GAE7B,MAAMO,EAAW,GACjB,IAAI6E,GAAQ,EAIZ,MAAMC,EAAehE,EAAMO,SAAW,IAAI5C,IAAQD,EAElD,OAASqG,EAAQpF,EAAKO,SAAS4E,QAAQ,CACrC,MAAM7B,EAAQtD,EAAKO,SAAS6E,GAE5B,IAAIjF,EAEJ,GAAIkB,EAAMO,SAAU,CAClB,MAAMyC,EACW,YAAff,EAAMrD,KACFqD,EAAMf,QACS,sBAAfe,EAAMrD,MACW,sBAAfqD,EAAMrD,KACNqD,EAAMe,UACN5E,EAER,GAAI4E,EAAM,CACR,MAAMiB,EAAQD,EAAaE,IAAIlB,IAAS,EACxClE,EAAMkE,EAAO,IAAMiB,EACnBD,EAAaG,IAAInB,EAAMiB,EAAQ,EACvC,CACA,CAEI,MAAMlD,EAASC,EAAIhB,EAAOiC,EAAOnD,QAClBV,IAAX2C,GAAsB7B,EAASkC,KAAKL,EAC5C,CAEE,OAAO7B,CACT,CAcA,SAASwC,EAAe1B,EAAOuB,EAAMI,GACnC,MAAMyC,EAAOC,EAAKrE,EAAMS,OAAQc,GAGhC,KACEI,SAEkB,iBAAVA,GAAsB2C,OAAOC,MAAM5C,IAH7C,CAeA,GAPI3C,MAAMC,QAAQ0C,KAGhBA,EAAQyC,EAAKI,eAAiBC,EAAO9C,GAAS+C,EAAO/C,IAIjC,UAAlByC,EAAKhB,SAAsB,CAC7B,IAAIuB,EACe,iBAAVhD,EAAqBA,EA6BlC,SAAoB3B,EAAO2B,GACzB,IACE,OAAOiD,EAAUjD,EAAO,CAACkD,aAAa,GACvC,CAAC,MAAOC,GACP,GAAI9E,EAAMM,mBACR,MAAO,CAAA,EAGT,MAAMyE,EAAK,EACLC,EAAU,IAAIC,EAAa,iCAAkC,CACjEhF,UAAWD,EAAMC,UACjB8E,QACAG,OAAQ,QACRC,OAAQ,6BAKV,MAHAH,EAAQI,KAAOpF,EAAMzB,eAAYH,EACjC4G,EAAQK,IAAMrH,EAAO,gCAEfgH,CACV,CACA,CAjD0CM,CAAWtF,EAAOuF,OAAO5D,IAM/D,MAJoC,QAAhC3B,EAAMa,wBACR8D,EA2IN,SAAoCa,GAElC,MAAMC,EAAY,CAAA,EAElB,IAAIC,EAEJ,IAAKA,KAAQF,EACPhI,EAAIiE,KAAK+D,EAAWE,KACtBD,EAAUE,EAA0BD,IAASF,EAAUE,IAI3D,OAAOD,CACT,CAxJoBG,CAA2BjB,IAGpC,CAAC,QAASA,EACrB,CAEE,MAAO,CAC8B,UAAnC3E,EAAMG,0BAAwCiE,EAAK1D,MAC/CmF,EAAYzB,EAAKhB,WAAagB,EAAKhB,SACnCgB,EAAKnB,UACTtB,EAxBJ,CA0BA,CAgDA,SAASN,EAAsBrB,EAAOgD,EAAM8C,GAE1C,IAAI/E,EAEJ,GAAK+E,EAEE,GAAI9C,EAAK+C,SAAS,KAAM,CAC7B,MAAMC,EAAchD,EAAKiD,MAAM,KAC/B,IAEItH,EAFAoF,GAAQ,EAIZ,OAASA,EAAQiC,EAAYlC,QAAQ,CAEnC,MAAMvC,EAAO2E,EAAiBF,EAAYjC,IACtC,CAACnF,KAAM,aAAcoE,KAAMgD,EAAYjC,IACvC,CAACnF,KAAM,UAAW+C,MAAOqE,EAAYjC,IACzCpF,EAAOA,EACH,CACEC,KAAM,mBACNuH,OAAQxH,EACRyE,SAAU7B,EACV6E,SAAUC,QAAQtC,GAAuB,YAAdxC,EAAK3C,MAChC0H,UAAU,GAEZ/E,CACV,CAGIR,EAASpC,CACb,MACIoC,EACEmF,EAAiBlD,KAAU,SAASuD,KAAKvD,GACrC,CAACpE,KAAM,kBAAcoE,GACrB,CAACpE,KAAM,UAAW+C,MAAOqB,QA7B/BjC,EAAS,CAACnC,KAAM,UAAW+C,MAAOqB,GAkCpC,GAAoB,YAAhBjC,EAAOnC,KAAoB,CAC7B,MAAMoE,EAAuCjC,EAAY,MACzD,OAAOvD,EAAIiE,KAAKzB,EAAME,WAAY8C,GAAQhD,EAAME,WAAW8C,GAAQA,CACvE,CAGE,GAAIhD,EAAMI,UACR,OAAOJ,EAAMI,UAAUwC,mBAAmB7B,GAG5C8B,EAAY7C,EACd,CAOA,SAAS6C,EAAY7C,EAAOwG,GAC1B,MAAMxB,EAAU,IAAIC,EAClB,sDACA,CACEhF,UAAWD,EAAMC,UACjBuG,QACAtB,OAAQ,aACRC,OAAQ,6BAMZ,MAHAH,EAAQI,KAAOpF,EAAMzB,eAAYH,EACjC4G,EAAQK,IAAMrH,EAAO,qDAEfgH,CACR,CA6BA,SAASW,EAA0BD,GACjC,IAAIe,EAAKf,EAAKgB,QAAQ9I,EAAK+I,GAG3B,MADuB,QAAnBF,EAAGG,MAAM,EAAG,KAAcH,EAAK,IAAMA,GAClCA,CACT,CAUA,SAASE,EAAOE,GACd,MAAO,IAAMA,EAAG1F,aAClB","x_google_ignoreList":[0]}