{"version":3,"file":"vendor--micromark-extension-gfm-table.DxDdzEf_.js","sources":["../../../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../../../node_modules/micromark-extension-gfm-table/lib/syntax.js"],"sourcesContent":["/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}"],"names":["EditMap","constructor","this","map","add","index","remove","editMap","at","length","push","addImplementation","consume","events","sort","a","b","vecs","slice","pop","element","gfmTableAlign","inDelimiterRow","align","event","type","alignIndex","gfmTable","flow","null","name","tokenize","tokenizeTable","resolveAll","resolveTable","effects","ok","nok","self","seen","size","sizeB","code","tail","next","bodyRowStart","headRowBefore","parser","lazy","now","line","enter","headRowBreak","headRowStart","markdownLineEnding","interrupt","exit","headDelimiterStart","markdownSpace","factorySpace","headRowData","markdownLineEndingOrSpace","headRowEscape","headDelimiterBefore","constructs","disable","includes","undefined","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","context","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","cell","afterHeadAwaitingFirstBodyRow","lastTableEnd","token","flushTableEnd","start","Object","assign","end","flushCell","_align","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","contentType","table","tableBody","exits","related","side"],"mappings":"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","x_google_ignoreList":[0,1,2]}