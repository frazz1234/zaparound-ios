{"version":3,"file":"vendor--micromark-util-decode-string.BCF2SQ7o.js","sources":["../../../../node_modules/micromark-util-decode-string/index.js"],"sourcesContent":["import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}"],"names":["characterEscapeOrReference","decodeString","value","replace","decode","$0","$1","$2","charCodeAt","head","hex","decodeNumericCharacterReference","slice","decodeNamedCharacterReference"],"mappings":"uKAEA,MAAMA,EAA6B,oEAc5B,SAASC,EAAaC,GAC3B,OAAOA,EAAMC,QAAQH,EAA4BI,EACnD,CAYA,SAASA,EAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KADAC,EAAGC,WAAW,GACV,CACf,MAAMC,EAAOF,EAAGC,WAAW,GACrBE,EAAe,MAATD,GAAyB,KAATA,EAC5B,OAAOE,EAAgCJ,EAAGK,MAAMF,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC7E,CACE,OAAOG,EAA8BN,IAAOF,CAC9C","x_google_ignoreList":[0]}