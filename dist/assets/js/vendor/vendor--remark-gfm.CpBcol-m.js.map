{"version":3,"file":"vendor--remark-gfm.CpBcol-m.js","sources":["../../../../node_modules/remark-gfm/lib/index.js"],"sourcesContent":["/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n"],"names":["emptyOptions","remarkGfm","options","settings","data","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","push","gfm","gfmFromMarkdown","gfmToMarkdown"],"mappings":"kIAYA,MAAMA,EAAe,CAAA,EAWN,SAASC,EAAUC,GAGhC,MACMC,EAAWD,GAAWF,EACtBI,EAFI,KAEQA,OAEZC,EACJD,EAAKC,sBAAwBD,EAAKC,oBAAsB,IACpDC,EACJF,EAAKE,yBAA2BF,EAAKE,uBAAyB,IAC1DC,EACJH,EAAKG,uBAAyBH,EAAKG,qBAAuB,IAE5DF,EAAoBG,KAAKC,EAAIN,IAC7BG,EAAuBE,KAAKE,KAC5BH,EAAqBC,KAAKG,EAAcR,GAC1C","x_google_ignoreList":[0]}