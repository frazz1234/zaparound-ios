{"version":3,"file":"vendor--micromark-extension-gfm-footnote.Di_4tubf.js","sources":["../../../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js"],"sourcesContent":["/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if weâ€™ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We canâ€™t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > ðŸ‘‰ **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}"],"names":["indent","tokenize","effects","ok","nok","self","this","factorySpace","code","tail","events","length","type","sliceSerialize","partial","gfmFootnote","document","name","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","index","defined","parser","gfmFootnotes","labelStart","token","_balanced","id","normalizeIdentifier","start","end","now","codePointAt","includes","slice","enter","consume","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","data","size","callStart","callData","markdownLineEndingOrSpace","callEscape","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","push","whitespaceAfter","check","blankLine","attempt"],"mappings":"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","x_google_ignoreList":[0]}