{"version":3,"file":"hooks-useadminauth.ts.BJ7uhFTt.js","sources":["../../../../src/hooks/useAdminAuth.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/components/ui/use-toast';\nimport { useTranslation } from 'react-i18next';\n\nexport function useAdminAuth(options = { redirectIfNotAdmin: true }) {\n  const navigate = useNavigate();\n  const [profile, setProfile] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [userRole, setUserRole] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { t } = useTranslation('common');\n\n  useEffect(() => {\n    checkUser();\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n      if (event === 'SIGNED_OUT' || !session) {\n        if (options.redirectIfNotAdmin) {\n          navigate('/auth');\n        }\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, [navigate, options.redirectIfNotAdmin]);\n\n  const checkUser = async () => {\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        if (options.redirectIfNotAdmin) {\n          navigate('/auth');\n        }\n        return { isAuthorized: false };\n      }\n      \n      const { data: isAdminData, error: isAdminError } = await supabase.rpc('is_admin');\n      \n      if (isAdminError) {\n        console.error(\"Error checking admin role with RPC:\", isAdminError);\n        setIsAdmin(false);\n        \n        const { data: roleData, error: roleError } = await supabase\n          .from('user_roles')\n          .select('role')\n          .eq('user_id', user.id)\n          .maybeSingle();\n        \n        if (!roleError && roleData) {\n          setUserRole(roleData.role);\n          \n          if (roleData.role === 'nosubs' && options.redirectIfNotAdmin) {\n            navigate('/dashboard');\n            toast({\n              title: t('navigation.subscriptionRequired'),\n              description: t('navigation.upgradeForDashboard'),\n              variant: \"destructive\",\n            });\n            return { isAuthorized: true, userId: user.id };\n          }\n          \n          if (roleData.role === 'tier1' || roleData.role === 'tier2' || roleData.role === 'tier3') {\n            await getProfile(user.id);\n            return { isAuthorized: true, userId: user.id };\n          }\n        }\n        \n        if (options.redirectIfNotAdmin) {\n          navigate('/');\n          toast({\n            title: \"Access denied\",\n            description: \"You don't have permission to access this page.\",\n            variant: \"destructive\",\n          });\n        }\n        return { isAuthorized: false };\n      }\n      \n      const isUserAdmin = !!isAdminData;\n      setIsAdmin(isUserAdmin);\n      \n      if (!isUserAdmin && options.redirectIfNotAdmin) {\n        const { data: roleData, error: roleError } = await supabase\n          .from('user_roles')\n          .select('role')\n          .eq('user_id', user.id)\n          .maybeSingle();\n        \n        if (!roleError && roleData) {\n          setUserRole(roleData.role);\n          \n          if (roleData.role === 'tier1' || roleData.role === 'tier2' || roleData.role === 'tier3') {\n            await getProfile(user.id);\n            return { isAuthorized: true, userId: user.id };\n          }\n        }\n        \n        navigate('/');\n        toast({\n          title: t('navigation.accessDenied'),\n          description: t('navigation.permissionError'),\n          variant: \"destructive\",\n        });\n        return { isAuthorized: false };\n      }\n      \n      await getProfile(user.id);\n      return { isAuthorized: isUserAdmin, userId: user.id };\n    } catch (error) {\n      console.error('Error checking auth status:', error);\n      if (options.redirectIfNotAdmin) {\n        navigate('/auth');\n      }\n      return { isAuthorized: false };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getProfile = async (userId: string) => {\n    try {\n      const { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, full_name, avatar_url`)\n        .eq('id', userId)\n        .single();\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      setProfile(data);\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n    }\n  };\n\n  const checkIsAdmin = async (): Promise<boolean> => {\n    try {\n      const { data: isAdminData, error: isAdminError } = await supabase.rpc('is_admin');\n      \n      if (isAdminError) {\n        console.error(\"Error checking admin status:\", isAdminError);\n        return false;\n      }\n      \n      return !!isAdminData;\n    } catch (error) {\n      console.error(\"Error in checkIsAdmin:\", error);\n      return false;\n    }\n  };\n\n  return { loading, isAdmin, profile, checkIsAdmin, userRole };\n}\n"],"names":["useAdminAuth","options","redirectIfNotAdmin","navigate","useNavigate","profile","setProfile","useState","loading","setLoading","isAdmin","setIsAdmin","userRole","setUserRole","toast","useToast","t","useTranslation","useEffect","checkUser","data","subscription","supabase","auth","onAuthStateChange","event","session","unsubscribe","async","user","getUser","isAuthorized","isAdminData","error","isAdminError","rpc","roleData","roleError","from","select","eq","id","maybeSingle","role","title","description","variant","userId","getProfile","isUserAdmin","status","single","checkIsAdmin"],"mappings":"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"}