{"version":3,"file":"hooks-usetrips.ts.9VTNtQw3.js","sources":["../../../../src/hooks/useTrips.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/components/ui/use-toast';\nimport { tripCache, getOrSetCache, cacheEventManager, CACHE_EVENTS } from '@/utils/cache';\nimport { Trip } from '@/types/trip';\n\nexport function useTrips() {\n  const [trips, setTrips] = useState<Trip[]>([]);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const getTrips = async (userId: string) => {\n    try {\n      setLoading(true);\n      \n      const fetchedTrips = await getOrSetCache(\n        tripCache,\n        `trips-${userId}`,\n        async () => {\n          // First get regular trips\n          const { data: tripData, error: tripError } = await supabase\n            .from('trips')\n            .select('*')\n            .eq('user_id', userId)\n            .order('created_at', { ascending: false });\n\n          if (tripError) {\n            throw tripError;\n          }\n\n          // Then get ZapOut trips\n          const { data: zapOutData, error: zapOutError } = await supabase\n            .from('zapout_data')\n            .select('*')\n            .eq('user_id', userId)\n            .order('created_at', { ascending: false });\n\n          if (zapOutError) {\n            throw zapOutError;\n          }\n          \n          // Then get ZapRoad trips\n          const { data: zapRoadData, error: zapRoadError } = await supabase\n            .from('zaproad_data')\n            .select('*')\n            .eq('user_id', userId)\n            .order('created_at', { ascending: false });\n            \n          if (zapRoadError) {\n            throw zapRoadError;\n          }\n\n          // Transform ZapOut trips to match Trip interface\n          const zapOutTrips = (zapOutData || []).map(trip => ({\n            ...trip,\n            trip_type: 'ZapOut' as const\n          }));\n\n          // Transform ZapRoad trips to match Trip interface\n          const zapRoadTrips = (zapRoadData || []).map(trip => ({\n            ...trip,\n            trip_type: 'ZapRoad' as const\n          }));\n\n          // Regular trips already match the interface\n          const regularTrips = (tripData || []).map(trip => ({\n            ...trip,\n            trip_type: 'ZapTrip' as const\n          }));\n\n          // Combine all trips\n          const allTrips = [...regularTrips, ...zapOutTrips, ...zapRoadTrips];\n          \n          // Sort by created_at\n          allTrips.sort((a, b) => {\n            const dateA = new Date(a.created_at);\n            const dateB = new Date(b.created_at);\n            return dateB.getTime() - dateA.getTime();\n          });\n\n          return allTrips;\n        },\n        { ttl: 1000 * 60 * 5 } // 5 minutes TTL\n      );\n\n      // Set the trips in state after fetching\n      setTrips(fetchedTrips);\n      return fetchedTrips;\n    } catch (error) {\n      console.error(\"Error fetching trips:\", error);\n      setTrips([]);\n      return [];\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const refreshTrips = async (userId: string) => {\n    // Force refresh from server\n    const freshTrips = await getOrSetCache(\n      tripCache,\n      `trips-${userId}`,\n      () => getTrips(userId),\n      { force: true }\n    );\n    setTrips(freshTrips);\n    return freshTrips;\n  };\n\n  const deleteTrip = async (tripId: string) => {\n    try {\n      console.log(\"useTrips: Attempting to delete trip with ID:\", tripId);\n      \n      // First, find the trip in our local state to determine its type\n      const tripToDelete = trips.find(trip => trip.id === tripId);\n      \n      if (!tripToDelete) {\n        console.error(\"Trip not found in local state:\", tripId);\n        throw new Error(\"Trip not found\");\n      }\n      \n      console.log(\"Found trip to delete:\", tripToDelete);\n      console.log(\"Trip type:\", tripToDelete.trip_type);\n      \n      if (tripToDelete.trip_type === 'ZapOut') {\n        console.log(\"Deleting ZapOut trip from zapout_data table\");\n        const { error: zapOutError } = await supabase\n          .from('zapout_data')\n          .delete()\n          .eq('id', tripId);\n          \n        if (zapOutError) {\n          console.error(\"Error deleting ZapOut trip:\", zapOutError);\n          throw zapOutError;\n        }\n      } else if (tripToDelete.trip_type === 'ZapRoad') {\n        console.log(\"Deleting ZapRoad trip from zaproad_data table\");\n        const { error: zapRoadError } = await supabase\n          .from('zaproad_data')\n          .delete()\n          .eq('id', tripId);\n          \n        if (zapRoadError) {\n          console.error(\"Error deleting ZapRoad trip:\", zapRoadError);\n          throw zapRoadError;\n        }\n      } else {\n        console.log(\"Deleting regular trip from trips table\");\n        const { error: tripError } = await supabase\n          .from('trips')\n          .delete()\n          .eq('id', tripId);\n          \n        if (tripError) {\n          console.error(\"Error deleting regular trip:\", tripError);\n          throw tripError;\n        }\n      }\n\n      // Clear the cache for this user's trips\n      const userId = tripToDelete.user_id;\n      tripCache.delete(`trips-${userId}`);\n      \n      // Update local state\n      setTrips(prevTrips => prevTrips.filter(trip => trip.id !== tripId));\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error in deleteTrip:\", error);\n      throw error;\n    }\n  };\n\n  // Listen for cache invalidation events\n  useEffect(() => {\n    const unsubscribeTripCreated = cacheEventManager.subscribe(CACHE_EVENTS.TRIP_CREATED, async () => {\n      console.log('Trip created event received, refreshing trips...');\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          await refreshTrips(user.id);\n        }\n      } catch (error) {\n        console.error('Error refreshing trips after trip creation:', error);\n      }\n    });\n\n    const unsubscribeTripDeleted = cacheEventManager.subscribe(CACHE_EVENTS.TRIP_DELETED, async () => {\n      console.log('Trip deleted event received, refreshing trips...');\n      try {\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          await refreshTrips(user.id);\n        }\n      } catch (error) {\n        console.error('Error refreshing trips after trip deletion:', error);\n      }\n    });\n\n    // Cleanup subscriptions\n    return () => {\n      unsubscribeTripCreated();\n      unsubscribeTripDeleted();\n    };\n  }, []);\n\n  return {\n    trips,\n    loading,\n    getTrips,\n    refreshTrips,\n    deleteTrip\n  };\n}\n"],"names":["useTrips","trips","setTrips","useState","loading","setLoading","useToast","getTrips","async","userId","fetchedTrips","getOrSetCache","tripCache","data","tripData","error","tripError","supabase","from","select","eq","order","ascending","zapOutData","zapOutError","zapRoadData","zapRoadError","zapOutTrips","map","trip","trip_type","zapRoadTrips","allTrips","sort","a","b","dateA","Date","created_at","getTime","ttl","refreshTrips","freshTrips","force","useEffect","unsubscribeTripCreated","cacheEventManager","subscribe","CACHE_EVENTS","TRIP_CREATED","user","auth","getUser","id","unsubscribeTripDeleted","TRIP_DELETED","deleteTrip","tripId","tripToDelete","find","Error","delete","user_id","prevTrips","filter"],"mappings":"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"}