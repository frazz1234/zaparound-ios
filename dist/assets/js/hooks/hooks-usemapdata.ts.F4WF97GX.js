import{r as t}from"../vendor/vendor-react-core.D1hcyiwY.js";import{s as e}from"../components/components-admin.CiIAoamg.js";import{g as r,t as a,c as i,C as o}from"../utils/utils-cache.ts.BtmNadnX.js";import{u as s}from"./hooks-use-toast.ts.Dg8obzHg.js";const c=t=>{if(!t)return null;try{if(Array.isArray(t)&&2===t.length){const[e,r]=t;if("number"==typeof e&&"number"==typeof r)return[e,r]}if("string"==typeof t){try{const e=JSON.parse(t);if(Array.isArray(e)&&2===e.length){const[t,r]=e;if("number"==typeof t&&"number"==typeof r)return[t,r]}}catch{}if(t.includes(",")){const e=t.split(",").map((t=>parseFloat(t.trim())));if(2===e.length&&!isNaN(e[0])&&!isNaN(e[1]))return[e[1],e[0]]}}return null}catch(e){return null}};function n(){const[n,d]=t.useState({trips:[],favorites:[],lastUpdated:0}),[u,_]=t.useState(!1),[l,p]=t.useState(null),{toast:f}=s(),y=t.useRef(null),m=t.useCallback((async(t=!1)=>{try{_(!0),p(null);const{data:{user:i}}=await e.auth.getUser();if(!i)throw new Error("No user found");const o=`map-data-${i.id}`,s=await r(a,o,(async()=>{const[t,r,a,o]=await Promise.all([e.from("zapout_data").select("id, title, description, coordinates, location, created_at, updated_at").eq("user_id",i.id).order("created_at",{ascending:!1}),e.from("zaproad_data").select("id, title, description, starting_city_coordinates, starting_city, end_city, end_city_coordinates, created_at, updated_at").eq("user_id",i.id).order("created_at",{ascending:!1}),e.from("trips").select("id, title, description, coordinates, location, created_at, updated_at").eq("user_id",i.id).order("created_at",{ascending:!1}),e.from("favorites").select("*").eq("user_id",i.id).order("created_at",{ascending:!1})]);if(t.error)throw t.error;if(r.error)throw r.error;if(a.error)throw a.error;if(o.error)throw o.error;return{trips:[...(t.data||[]).map((t=>({...t,type:"zapout",coordinates:c(t.coordinates)}))),...(r.data||[]).map((t=>({...t,type:"zaproad",coordinates:c(t.end_city_coordinates||t.starting_city_coordinates),location:t.end_city||t.starting_city,starting_city:t.starting_city,starting_city_coordinates:t.starting_city_coordinates,end_city:t.end_city,end_city_coordinates:t.end_city_coordinates}))),...(a.data||[]).map((t=>({...t,type:"zaptrip",coordinates:c(t.coordinates)})))],favorites:o.data||[],lastUpdated:Date.now()}}),{ttl:3e5,force:t});return d(s),s}catch(i){return p(i.message||"Failed to fetch map data"),f({title:"Error",description:"Failed to load map data. Please try again.",variant:"destructive"}),n}finally{_(!1)}}),[n,f]),g=t.useCallback((async()=>{try{const{data:{user:t}}=await e.auth.getUser();if(!t)throw new Error("No user found");const r=`map-data-${t.id}`,[i,o,s,u]=await Promise.all([e.from("zapout_data").select("id, title, description, coordinates, location, created_at, updated_at").eq("user_id",t.id).order("created_at",{ascending:!1}),e.from("zaproad_data").select("id, title, description, starting_city_coordinates, starting_city, end_city, end_city_coordinates, created_at, updated_at").eq("user_id",t.id).order("created_at",{ascending:!1}),e.from("trips").select("id, title, description, coordinates, location, created_at, updated_at").eq("user_id",t.id).order("created_at",{ascending:!1}),e.from("favorites").select("*").eq("user_id",t.id).order("created_at",{ascending:!1})]);if(i.error)throw i.error;if(o.error)throw o.error;if(s.error)throw s.error;if(u.error)throw u.error;const _=[...(i.data||[]).map((t=>({...t,type:"zapout",coordinates:c(t.coordinates)}))),...(o.data||[]).map((t=>({...t,type:"zaproad",coordinates:c(t.end_city_coordinates||t.starting_city_coordinates),location:t.end_city||t.starting_city,starting_city:t.starting_city,starting_city_coordinates:t.starting_city_coordinates,end_city:t.end_city,end_city_coordinates:t.end_city_coordinates}))),...(s.data||[]).map((t=>({...t,type:"zaptrip",coordinates:c(t.coordinates)})))],l=[...n.trips],p=[...n.favorites];_.forEach((t=>{const e=l.findIndex((e=>e.id===t.id));e>=0?l[e]=t:l.unshift(t)})),(u.data||[]).forEach((t=>{-1===p.findIndex((e=>e.id===t.id))&&p.unshift(t)}));const f={trips:l,favorites:p,lastUpdated:Date.now()};return a.set(r,f,{ttl:3e5}),d(f),f}catch(t){return m(!0)}}),[n,m]),h=t.useCallback((async()=>{try{const{data:{user:t}}=await e.auth.getUser();if(t){const e=`map-data-${t.id}`;a.delete(e)}}catch(t){}}),[]),b=t.useCallback((t=>{d((e=>({...e,trips:e.trips.filter((e=>e.id!==t))})))}),[]),w=t.useCallback((t=>{d((e=>({...e,favorites:e.favorites.filter((e=>e.id!==t))})))}),[]),E=t.useCallback((()=>{y.current&&clearTimeout(y.current),y.current=setTimeout((()=>{m(!0)}),100)}),[m]);return t.useEffect((()=>{const t=i.subscribe(o.TRIP_CREATED,(()=>{E()})),e=i.subscribe(o.MAP_DATA_INVALIDATED,(()=>{E()})),r=i.subscribe(o.FAVORITES_INVALIDATED,(()=>{E()})),a=i.subscribe(o.FAVORITE_ADDED,(()=>{E()})),s=i.subscribe(o.FAVORITE_REMOVED,(()=>{E()}));return()=>{t(),e(),r(),a(),s(),y.current&&clearTimeout(y.current)}}),[E]),t.useEffect((()=>{m()}),[m]),{mapData:n,loading:u,error:l,fetchMapData:m,fetchIncrementalData:g,invalidateCache:h,removeTripFromCache:b,removeFavoriteFromCache:w,refreshData:()=>m(!0)}}export{n as u};
//# sourceMappingURL=hooks-usemapdata.ts.F4WF97GX.js.map
