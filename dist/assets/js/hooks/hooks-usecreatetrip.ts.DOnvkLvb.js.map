{"version":3,"file":"hooks-usecreatetrip.ts.DOnvkLvb.js","sources":["../../../../src/hooks/useCreateTrip.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { useToast } from \"./use-toast\";\nimport { createStandardTrip } from \"@/utils/tripCreation\";\nimport { createZapOutTrip } from \"@/utils/zapOutCreation\";\nimport { createZapRoadTrip } from \"@/utils/zapRoadCreation\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useTranslation } from 'react-i18next';\nimport { TripFormData } from \"@/types/trip\";\nimport { useNavigate, useLocation, useParams } from \"react-router-dom\";\nimport { invalidateTripCaches, removeHomepageCreateTripCache } from \"@/utils/cache\";\n\nexport { type TripFormData } from \"@/types/trip\";\n\ninterface CreateTripCallbacks {\n  onSuccess?: (tripId?: string) => void;\n  onError?: (error: Error) => void;\n}\n\nexport function useCreateTrip(onSuccess?: (() => void) | CreateTripCallbacks, onError?: (error: Error) => void) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { lang } = useParams();\n\n  // Handle callbacks in different formats\n  const getCallbacks = (): CreateTripCallbacks => {\n    if (typeof onSuccess === 'function') {\n      return { onSuccess, onError };\n    }\n    return onSuccess || {};\n  };\n\n  const createTrip = async (formData: TripFormData) => {\n    try {\n      setIsLoading(true);\n      \n      console.log(\"useCreateTrip - Starting trip creation with data:\", JSON.stringify(formData, null, 2));\n      \n      // Fetch the current user\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        console.error(\"useCreateTrip - No authenticated user found\");\n        throw new Error(\"No authenticated user found\");\n      }\n      \n      console.log(\"useCreateTrip - Found authenticated user:\", JSON.stringify(user, null, 2));\n      console.log(\"useCreateTrip - Creating trip with type:\", formData.tripType);\n      \n      // Fetch the user's profile data\n      const { data: profileData } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('user_id', user.id)\n        .maybeSingle();\n      \n      console.log(\"useCreateTrip - Fetched profile data:\", JSON.stringify(profileData, null, 2));\n      \n      let result;\n      \n      // Ensure tripType is the correct type\n      const tripType = formData.tripType as \"ZapTrip\" | \"ZapOut\" | \"ZapRoad\";\n      \n      // Different creation logic based on trip type\n      if (tripType === 'ZapOut') {\n        // Ensure all required fields are present for ZapOut\n        const zapOutData = {\n          ...formData,\n          tripType: 'ZapOut' as const,\n          activityTimes: formData.activityTimes || [],\n          activityTypes: formData.activityTypes || [],\n          includeLunch: formData.includeLunch || false,\n          includeBudgetPerPerson: formData.includeBudgetPerPerson || false,\n          lunchOption: formData.lunchOption || 'before',\n          budgetPerPerson: formData.budgetPerPerson || '',\n          additionalNeeds: formData.additionalNeeds || ''\n        };\n        \n        console.log(\"useCreateTrip - Creating ZapOut trip with processed data:\", JSON.stringify(zapOutData, null, 2));\n        result = await createZapOutTrip(zapOutData, user, profileData);\n      } else if (tripType === 'ZapRoad') {\n        console.log(\"useCreateTrip - Creating ZapRoad trip with data:\", JSON.stringify(formData, null, 2));\n        const zapRoadData = {\n          ...formData,\n          tripType: 'ZapRoad' as const\n        };\n        result = await createZapRoadTrip(zapRoadData, user, profileData);\n      } else {\n        // Default to standard trip creation (ZapTrip)\n        console.log(\"useCreateTrip - Creating standard trip with data:\", JSON.stringify(formData, null, 2));\n        const standardData = {\n          ...formData,\n          tripType: 'ZapTrip' as const\n        };\n        result = await createStandardTrip(standardData, user, profileData);\n      }\n      \n      console.log(\"useCreateTrip - Trip created successfully:\", JSON.stringify(result, null, 2));\n      \n      // Invalidate all trip-related caches immediately after successful creation\n      await invalidateTripCaches(user.id);\n      \n      // Remove homepage create trip cache after successful trip creation\n      removeHomepageCreateTripCache(user.id);\n      \n      const callbacks = getCallbacks();\n      const tripId = result?.[0]?.id;\n      \n      if (callbacks.onSuccess) {\n        callbacks.onSuccess(tripId);\n      }\n      \n      // Check if user is already on dashboard page\n      const currentLang = lang || 'en';\n      const dashboardPath = `/${currentLang}/dashboard`;\n      \n      // If we are not already on the dashboard, navigate there. When we *are* on\n      // the dashboard the \"TRIP_CREATED\" cache-invalidation event emitted above\n      // makes `useTrips` refetch, so a hard reload isnâ€™t necessary and would\n      // actually break the dialog cleanup.\n      if (location.pathname !== dashboardPath) {\n        navigate(dashboardPath);\n      }\n       \n      return result;\n    } catch (error: any) {\n      console.error(\"useCreateTrip - Error creating trip:\", error);\n      toast({\n        title: t('trip.creation.error'),\n        description: t('trip.creation.errorMessage'),\n        variant: \"destructive\",\n      });\n      \n      const callbacks = getCallbacks();\n      if (callbacks.onError) {\n        callbacks.onError(error);\n      }\n      \n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    isLoading,\n    createTrip,\n  };\n}\n"],"names":["useCreateTrip","onSuccess","onError","isLoading","setIsLoading","useState","toast","useToast","t","useTranslation","navigate","useNavigate","location","useLocation","lang","useParams","createTrip","async","formData","data","user","supabase","auth","getUser","Error","profileData","from","select","eq","id","maybeSingle","result","tripType","zapOutData","activityTimes","activityTypes","includeLunch","includeBudgetPerPerson","lunchOption","budgetPerPerson","additionalNeeds","createZapOutTrip","zapRoadData","createZapRoadTrip","standardData","createStandardTrip","invalidateTripCaches","removeHomepageCreateTripCache","callbacks","tripId","dashboardPath","pathname","error","title","description","variant"],"mappings":"yjBAkBgB,SAAAA,EAAcC,EAAgDC,GAC5E,MAAOC,EAAWC,GAAgBC,EAAAA,UAAS,IACrCC,MAAEA,GAAUC,KACZC,EAAEA,GAAMC,IACRC,EAAWC,IACXC,EAAWC,KACXC,KAAEA,GAASC,IA0HV,MAAA,CACLZ,YACAa,WAlHiBC,MAAOC,IACpB,IACFd,GAAa,GAKP,MAAEe,MAAMC,KAAEA,UAAiBC,EAASC,KAAKC,UAE/C,IAAKH,EAEG,MAAA,IAAII,MAAM,+BAOlB,MAAQL,KAAMM,SAAsBJ,EACjCK,KAAK,YACLC,OAAO,KACPC,GAAG,UAAWR,EAAKS,IACnBC,cAIC,IAAAC,EAGJ,MAAMC,EAAWd,EAASc,SAG1B,GAAiB,WAAbA,EAAuB,CAEzB,MAAMC,EAAa,IACdf,EACHc,SAAU,SACVE,cAAehB,EAASgB,eAAiB,GACzCC,cAAejB,EAASiB,eAAiB,GACzCC,aAAclB,EAASkB,eAAgB,EACvCC,uBAAwBnB,EAASmB,yBAA0B,EAC3DC,YAAapB,EAASoB,aAAe,SACrCC,gBAAiBrB,EAASqB,iBAAmB,GAC7CC,gBAAiBtB,EAASsB,iBAAmB,IAI/CT,QAAeU,EAAiBR,EAAYb,EAAMK,EAAW,MAC/D,GAAwB,YAAbO,EAAwB,CAEjC,MAAMU,EAAc,IACfxB,EACHc,SAAU,WAEZD,QAAeY,EAAkBD,EAAatB,EAAMK,EAAW,KAC1D,CAGL,MAAMmB,EAAe,IAChB1B,EACHc,SAAU,WAEZD,QAAec,EAAmBD,EAAcxB,EAAMK,EAAW,OAM7DqB,EAAqB1B,EAAKS,IAGhCkB,EAA8B3B,EAAKS,IAEnC,MAAMmB,EA5EY,CAAC,EA6EbC,EAASlB,IAAS,IAAIF,GAExBmB,EAAU/C,WACZ+C,EAAU/C,UAAUgD,GAItB,MACMC,EAAgB,IADFpC,GAAQ,iBAWrB,OAJHF,EAASuC,WAAaD,GACxBxC,EAASwC,GAGJnB,QACAqB,GAED9C,EAAA,CACJ+C,MAAO7C,EAAE,uBACT8C,YAAa9C,EAAE,8BACf+C,QAAS,gBAGX,MAAMP,EAxGY,CAAC,EA6Gb,MAJFA,EAAU9C,SACZ8C,EAAU9C,QAAQkD,GAGdA,CAAA,CACN,QACAhD,GAAa,EAAK,GAQxB"}