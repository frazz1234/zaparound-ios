{"version":3,"file":"hooks-usestripepayment.ts.CZ5-QRGe.js","sources":["../../../../src/hooks/useStripePayment.ts"],"sourcesContent":["\nimport { useState } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useToast } from '@/components/ui/use-toast';\nimport { useTranslation } from 'react-i18next';\n\nexport function useStripePayment() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n  const { t } = useTranslation('common');\n\n  const initiateCheckout = async (plan: string, isYearly: boolean) => {\n    try {\n      setIsLoading(true);\n      \n      // Get the current user\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        // Redirect to auth if not logged in\n        toast({\n          title: t('common.error'),\n          description: t('common.signInRequired'),\n          variant: \"destructive\",\n        });\n        return { success: false, url: '/auth' };\n      }\n      \n      console.log(`Initiating checkout for plan: ${plan}, user: ${user.id}, yearly: ${isYearly}`);\n      \n      // Call our edge function to create a Stripe checkout session\n      const { data, error } = await supabase.functions.invoke('stripe-payment', {\n        body: {\n          plan,\n          userId: user.id,\n          email: user.email,\n          isYearly\n        }\n      });\n      \n      if (error) {\n        console.error('Error creating checkout session:', error);\n        toast({\n          title: t('common.error'),\n          description: error.message || t('common.paymentError'),\n          variant: \"destructive\",\n        });\n        return { success: false };\n      }\n      \n      console.log('Checkout session created:', data.sessionId);\n      \n      // Return the checkout URL\n      return { \n        success: true, \n        url: data.url,\n        sessionId: data.sessionId\n      };\n    } catch (error: any) {\n      console.error('Error in initiateCheckout:', error);\n      toast({\n        title: t('common.error'),\n        description: error.message || t('common.paymentError'),\n        variant: \"destructive\",\n      });\n      return { success: false };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Add a function to check payment status\n  const checkPaymentStatus = async (sessionId: string) => {\n    try {\n      console.log(`Checking payment status for session: ${sessionId}`);\n      \n      // Get current user to verify role is updated\n      const { data: { user } } = await supabase.auth.getUser();\n      \n      if (!user) {\n        console.error('No authenticated user found');\n        return { success: false, error: 'User not authenticated' };\n      }\n      \n      // Call the edge function to check payment status\n      const { data, error } = await supabase.functions.invoke('check-payment-status', {\n        body: { \n          sessionId,\n          userId: user.id \n        }\n      });\n      \n      if (error) {\n        console.error('Error checking payment status:', error);\n        return { success: false, error: error.message };\n      }\n      \n      console.log('Payment status response:', data);\n      \n      // Check if payment was not successful\n      if (data.status !== 'paid') {\n        console.log('Payment was not successful, ensuring user has nosubs role');\n        \n        // Ensure user has nosubs role for failed payments\n        const { error: updateError } = await supabase\n          .from('user_roles')\n          .update({ role: 'nosubs', updated_at: new Date().toISOString() })\n          .eq('user_id', user.id);\n          \n        if (updateError) {\n          console.error('Error updating user role to nosubs:', updateError);\n        }\n      }\n      \n      // Also check user_roles table directly to verify role\n      if (user) {\n        const { data: roleData, error: roleError } = await supabase\n          .from('user_roles')\n          .select('role')\n          .eq('user_id', user.id)\n          .single();\n        \n        if (roleError) {\n          console.error('Error getting user role from database:', roleError);\n        } else {\n          console.log(`User role from database: ${roleData.role}`);\n          // If data.role from the edge function doesn't match roleData.role, use the one from the database\n          if (data.role && data.role !== roleData.role) {\n            console.warn(`Role mismatch: API returned ${data.role} but database has ${roleData.role}`);\n            data.role = roleData.role;\n          }\n        }\n      }\n      \n      // For subscription details, check additional subscription status issues\n      if (data.subscriptionDetails) {\n        const { status } = data.subscriptionDetails;\n        if (['canceled', 'unpaid', 'incomplete_expired'].includes(status)) {\n          console.log(`Subscription status is ${status}, should have nosubs role`);\n          \n          // Double-check that user has nosubs role for problematic subscription statuses\n          const { data: currentRole } = await supabase\n            .from('user_roles')\n            .select('role')\n            .eq('user_id', user.id)\n            .single();\n            \n          if (currentRole && currentRole.role !== 'nosubs') {\n            console.log(`User should have nosubs role but has ${currentRole.role}, updating...`);\n            \n            const { error: updateError } = await supabase\n              .from('user_roles')\n              .update({ role: 'nosubs', updated_at: new Date().toISOString() })\n              .eq('user_id', user.id);\n              \n            if (updateError) {\n              console.error('Error updating user role to nosubs:', updateError);\n            } else {\n              data.role = 'nosubs';\n            }\n          }\n        }\n      }\n      \n      return { \n        success: true, \n        status: data.status, \n        role: data.role,\n        subscription: data.subscription,\n        subscriptionDetails: data.subscriptionDetails\n      };\n    } catch (error: any) {\n      console.error('Error checking payment status:', error);\n      return { success: false, error: error.message };\n    }\n  };\n\n  return {\n    initiateCheckout,\n    checkPaymentStatus,\n    isLoading\n  };\n}\n"],"names":["useStripePayment","isLoading","setIsLoading","useState","toast","useToast","t","useTranslation","initiateCheckout","async","plan","isYearly","data","user","supabase","auth","getUser","title","description","variant","success","url","error","functions","invoke","body","userId","id","email","message","sessionId","checkPaymentStatus","status","updateError","from","update","role","updated_at","Date","toISOString","eq","roleData","roleError","select","single","subscriptionDetails","includes","currentRole","subscription"],"mappings":"2OAMO,SAASA,IACd,MAAOC,EAAWC,GAAgBC,EAAAA,UAAS,IACrCC,MAAEA,GAAUC,KACZC,EAAEA,GAAMC,EAAe,UAwKtB,MAAA,CACLC,iBAvKuBC,MAAOC,EAAcC,KACxC,IACFT,GAAa,GAGP,MAAEU,MAAMC,KAAEA,UAAiBC,EAASC,KAAKC,UAE/C,IAAKH,EAOH,OALMT,EAAA,CACJa,MAAOX,EAAE,gBACTY,YAAaZ,EAAE,yBACfa,QAAS,gBAEJ,CAAEC,SAAS,EAAOC,IAAK,SAM1B,MAAAT,KAAEA,QAAMU,SAAgBR,EAASS,UAAUC,OAAO,iBAAkB,CACxEC,KAAM,CACJf,OACAgB,OAAQb,EAAKc,GACbC,MAAOf,EAAKe,MACZjB,cAIJ,OAAIW,GAEIlB,EAAA,CACJa,MAAOX,EAAE,gBACTY,YAAaI,EAAMO,SAAWvB,EAAE,uBAChCa,QAAS,gBAEJ,CAAEC,SAAS,IAMb,CACLA,SAAS,EACTC,IAAKT,EAAKS,IACVS,UAAWlB,EAAKkB,iBAEXR,GAOA,OALDlB,EAAA,CACJa,MAAOX,EAAE,gBACTY,YAAaI,EAAMO,SAAWvB,EAAE,uBAChCa,QAAS,gBAEJ,CAAEC,SAAS,EAAM,CACxB,QACAlB,GAAa,EAAK,GAgHpB6B,mBA3GyBtB,MAAOqB,IAC5B,IAII,MAAElB,MAAMC,KAAEA,UAAiBC,EAASC,KAAKC,UAE/C,IAAKH,EAEH,MAAO,CAAEO,SAAS,EAAOE,MAAO,0BAI5B,MAAAV,KAAEA,QAAMU,SAAgBR,EAASS,UAAUC,OAAO,uBAAwB,CAC9EC,KAAM,CACJK,YACAJ,OAAQb,EAAKc,MAIjB,GAAIL,EAEF,MAAO,CAAEF,SAAS,EAAOE,MAAOA,EAAMO,SAMpC,GAAgB,SAAhBjB,EAAKoB,OAAmB,CAIpB,MAAEV,MAAOW,SAAsBnB,EAClCoB,KAAK,cACLC,OAAO,CAAEC,KAAM,SAAUC,YAAY,IAAIC,MAAOC,gBAChDC,GAAG,UAAW3B,EAAKc,GAItB,CAIF,GAAId,EAAM,CACR,MAAQD,KAAM6B,EAAUnB,MAAOoB,SAAoB5B,EAChDoB,KAAK,cACLS,OAAO,QACPH,GAAG,UAAW3B,EAAKc,IACnBiB,SAECF,GAKE9B,EAAKwB,MAAQxB,EAAKwB,OAASK,EAASL,OAEtCxB,EAAKwB,KAAOK,EAASL,KAEzB,CAIF,GAAIxB,EAAKiC,oBAAqB,CACtB,MAAAb,OAAEA,GAAWpB,EAAKiC,oBACxB,GAAI,CAAC,WAAY,SAAU,sBAAsBC,SAASd,GAAS,CAIjE,MAAQpB,KAAMmC,SAAsBjC,EACjCoB,KAAK,cACLS,OAAO,QACPH,GAAG,UAAW3B,EAAKc,IACnBiB,SAEC,GAAAG,GAAoC,WAArBA,EAAYX,KAAmB,CAG1C,MAAEd,MAAOW,SAAsBnB,EAClCoB,KAAK,cACLC,OAAO,CAAEC,KAAM,SAAUC,YAAY,IAAIC,MAAOC,gBAChDC,GAAG,UAAW3B,EAAKc,IAElBM,IAGFrB,EAAKwB,KAAO,SACd,CACF,CACF,CAGK,MAAA,CACLhB,SAAS,EACTY,OAAQpB,EAAKoB,OACbI,KAAMxB,EAAKwB,KACXY,aAAcpC,EAAKoC,aACnBH,oBAAqBjC,EAAKiC,2BAErBvB,GAEP,MAAO,CAAEF,SAAS,EAAOE,MAAOA,EAAMO,QAAQ,GAOhD5B,YAEJ"}