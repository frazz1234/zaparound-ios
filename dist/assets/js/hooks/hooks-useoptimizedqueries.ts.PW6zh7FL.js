import{u as t,a as e,b as a}from"../vendor/vendor-query-main.DFU6mXji.js";import{s as r}from"../components/components-admin.CiIAoamg.js";const o=()=>{const o=t(),n=async({tripId:t,data:e})=>{try{const{error:a}=await r.from("zapout_data").update(e).eq("id",t);if(a)throw a;return!0}catch(a){throw a}};return{useZapOutData:(t,a={})=>e({queryKey:["zapout",t],queryFn:()=>(async t=>{const{data:{session:e}}=await r.auth.getSession();if(!e)throw new Error("Not authenticated");try{const{data:a,error:o}=await r.from("zapout_data").select("*").eq("trip_id",t).single();if(o)throw o;if(!a)throw new Error("No data found");if(a.user_id!==e.user.id)throw new Error("Unauthorized");return a}catch(a){throw a}})(t),staleTime:3e5,gcTime:18e5,retry:2,enabled:!!t&&!1!==a.enabled,...a}),useUpdateZapOut:()=>a({mutationFn:n,onSuccess:(t,e)=>{o.invalidateQueries({queryKey:["zapout",e.tripId]})}}),usePaginatedTrips:(t={})=>e({queryKey:["trips","paginated"],queryFn:()=>(async({pageParam:t=0,limit:e=10})=>{const{data:{session:a}}=await r.auth.getSession();if(!a)throw new Error("Not authenticated");const{data:o,error:n,count:i}=await r.from("trips").select("id, title, description, location, start_date, end_date, trip_type",{count:"exact"}).eq("user_id",a.user.id).range(t*e,(t+1)*e-1).order("created_at",{ascending:!1});if(n)throw n;return{data:o||[],nextPage:o?.length===e?t+1:void 0,totalCount:i||0}})({}),staleTime:3e5,gcTime:18e5,retry:2,enabled:!1!==t.enabled,...t})}};export{o as u};
//# sourceMappingURL=hooks-useoptimizedqueries.ts.PW6zh7FL.js.map
