{"version":3,"file":"hooks-usepois.ts.lA82ceWk.js","sources":["../../../../src/hooks/usePOIs.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport interface POI {\n  id: string;\n  name: string;\n  url?: string;\n  description?: string;\n  address: string;\n  lat: number;\n  lng: number;\n  categories: string[];\n  poi_category_id?: string;\n  created_at: string;\n  updated_at: string;\n  // Joined data\n  category_name?: string;\n  category_image_url?: string;\n  average_rating?: number;\n  review_count?: number;\n  rating_type?: 'out_of_10' | 'out_of_5' | 'percentage';\n}\n\nexport interface POIReview {\n  id: string;\n  poi_id: string;\n  user_id: string;\n  rating: number;\n  rating_type: 'out_of_10' | 'out_of_5' | 'percentage';\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport const usePOIs = () => {\n  const [pois, setPOIs] = useState<POI[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchPOIs = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch POIs with category information and average ratings\n      const { data, error: fetchError } = await supabase\n        .from('pois')\n        .select(`\n          *,\n          poi_categories!poi_category_id (\n            name,\n            image_url\n          ),\n          poi_reviews (\n            rating,\n            rating_type\n          )\n        `)\n        .order('created_at', { ascending: false });\n\n      if (fetchError) {\n        throw fetchError;\n      }\n\n      // Process the data to calculate average ratings and format categories\n      const processedPOIs: POI[] = (data || []).map((poi: any) => {\n        console.log('Processing POI:', poi.name, 'Category:', poi.poi_categories, 'Image URL:', poi.poi_categories?.image_url);\n        \n        // Calculate average rating and determine rating type\n        let averageRating = 0;\n        let reviewCount = 0;\n        let ratingType: 'out_of_10' | 'out_of_5' | 'percentage' | undefined;\n        \n        if (poi.poi_reviews && poi.poi_reviews.length > 0) {\n          // Count rating types to determine the most common one\n          const ratingTypeCounts = {\n            out_of_10: 0,\n            out_of_5: 0,\n            percentage: 0\n          };\n          \n          poi.poi_reviews.forEach((review: any) => {\n            ratingTypeCounts[review.rating_type]++;\n          });\n          \n          // Determine the most common rating type\n          const maxCount = Math.max(ratingTypeCounts.out_of_10, ratingTypeCounts.out_of_5, ratingTypeCounts.percentage);\n          if (ratingTypeCounts.out_of_10 === maxCount) {\n            ratingType = 'out_of_10';\n          } else if (ratingTypeCounts.out_of_5 === maxCount) {\n            ratingType = 'out_of_5';\n          } else {\n            ratingType = 'percentage';\n          }\n          \n          // Calculate average in the most common rating type\n          const reviewsInMainType = poi.poi_reviews.filter((review: any) => review.rating_type === ratingType);\n          if (reviewsInMainType.length > 0) {\n            const totalRating = reviewsInMainType.reduce((sum: number, review: any) => sum + review.rating, 0);\n            averageRating = totalRating / reviewsInMainType.length;\n          }\n          \n          reviewCount = poi.poi_reviews.length;\n        }\n\n        return {\n          id: poi.id,\n          name: poi.name,\n          url: poi.url,\n          description: poi.description,\n          address: poi.address,\n          lat: poi.lat,\n          lng: poi.lng,\n          categories: poi.categories || [],\n          poi_category_id: poi.poi_category_id,\n          created_at: poi.created_at,\n          updated_at: poi.updated_at,\n          category_name: poi.poi_categories?.name,\n          category_image_url: poi.poi_categories?.image_url,\n          average_rating: averageRating,\n          review_count: reviewCount,\n          rating_type: ratingType,\n        };\n      });\n\n      setPOIs(processedPOIs);\n    } catch (err) {\n      console.error('Error fetching POIs:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch POIs');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPOIReviews = async (poiId: string): Promise<POIReview[]> => {\n    try {\n      const { data, error } = await supabase\n        .from('poi_reviews')\n        .select('*')\n        .eq('poi_id', poiId)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (err) {\n      console.error('Error fetching POI reviews:', err);\n      return [];\n    }\n  };\n\n  const addPOIReview = async (poiId: string, rating: number, notes?: string) => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n\n      const { error } = await supabase\n        .from('poi_reviews')\n        .upsert({\n          poi_id: poiId,\n          user_id: user.id,\n          rating,\n          rating_type: 'out_of_10',\n          notes,\n        });\n\n      if (error) throw error;\n\n      // Refresh POIs to update average rating\n      await fetchPOIs();\n      \n      return true;\n    } catch (err) {\n      console.error('Error adding POI review:', err);\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    fetchPOIs();\n  }, []);\n\n  return {\n    pois,\n    loading,\n    error,\n    fetchPOIs,\n    fetchPOIReviews,\n    addPOIReview,\n  };\n}; "],"names":["usePOIs","pois","setPOIs","useState","loading","setLoading","error","setError","fetchPOIs","async","data","fetchError","supabase","from","select","order","ascending","processedPOIs","map","poi","ratingType","averageRating","reviewCount","poi_reviews","length","ratingTypeCounts","out_of_10","out_of_5","percentage","forEach","review","rating_type","maxCount","Math","max","reviewsInMainType","filter","reduce","sum","rating","id","name","url","description","address","lat","lng","categories","poi_category_id","created_at","updated_at","category_name","poi_categories","category_image_url","image_url","average_rating","review_count","err","Error","message","useEffect","fetchPOIReviews","poiId","eq","addPOIReview","notes","user","auth","getUser","upsert","poi_id","user_id"],"mappings":"2HAkCO,MAAMA,EAAU,KACrB,MAAOC,EAAMC,GAAWC,EAAAA,SAAgB,KACjCC,EAASC,GAAcF,EAAAA,UAAS,IAChCG,EAAOC,GAAYJ,EAAAA,SAAwB,MAE5CK,EAAYC,UACZ,IACFJ,GAAW,GACXE,EAAS,MAGH,MAAAG,KAAEA,EAAMJ,MAAOK,SAAqBC,EACvCC,KAAK,QACLC,OAAO,oNAWPC,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIL,EACI,MAAAA,EAIR,MAAMM,GAAwBP,GAAQ,IAAIQ,KAAKC,IAI7C,IAEIC,EAFAC,EAAgB,EAChBC,EAAc,EAGlB,GAAIH,EAAII,aAAeJ,EAAII,YAAYC,OAAS,EAAG,CAEjD,MAAMC,EAAmB,CACvBC,UAAW,EACXC,SAAU,EACVC,WAAY,GAGVT,EAAAI,YAAYM,SAASC,IACvBL,EAAiBK,EAAOC,cAAW,IAI/B,MAAAC,EAAWC,KAAKC,IAAIT,EAAiBC,UAAWD,EAAiBE,SAAUF,EAAiBG,YAEnFR,EADXK,EAAiBC,YAAcM,EACpB,YACJP,EAAiBE,WAAaK,EAC1B,WAEA,aAIT,MAAAG,EAAoBhB,EAAII,YAAYa,QAAQN,GAAgBA,EAAOC,cAAgBX,IACrF,GAAAe,EAAkBX,OAAS,EAAG,CAEhCH,EADoBc,EAAkBE,QAAO,CAACC,EAAaR,IAAgBQ,EAAMR,EAAOS,QAAQ,GAClEJ,EAAkBX,MAAA,CAGlDF,EAAcH,EAAII,YAAYC,MAAA,CAGzB,MAAA,CACLgB,GAAIrB,EAAIqB,GACRC,KAAMtB,EAAIsB,KACVC,IAAKvB,EAAIuB,IACTC,YAAaxB,EAAIwB,YACjBC,QAASzB,EAAIyB,QACbC,IAAK1B,EAAI0B,IACTC,IAAK3B,EAAI2B,IACTC,WAAY5B,EAAI4B,YAAc,GAC9BC,gBAAiB7B,EAAI6B,gBACrBC,WAAY9B,EAAI8B,WAChBC,WAAY/B,EAAI+B,WAChBC,cAAehC,EAAIiC,gBAAgBX,KACnCY,mBAAoBlC,EAAIiC,gBAAgBE,UACxCC,eAAgBlC,EAChBmC,aAAclC,EACdS,YAAaX,EACf,IAGFlB,EAAQe,SACDwC,GAEPlD,EAASkD,aAAeC,MAAQD,EAAIE,QAAU,uBAAsB,CACpE,QACAtD,GAAW,EAAK,GAmDb,OAJPuD,EAAAA,WAAU,KACEpD,GAAA,GACT,IAEI,CACLP,OACAG,UACAE,QACAE,YACAqD,gBApDsBpD,MAAOqD,IACzB,IACI,MAAApD,KAAEA,EAAMJ,MAAAA,SAAgBM,EAC3BC,KAAK,eACLC,OAAO,KACPiD,GAAG,SAAUD,GACb/C,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIV,EAAaA,MAAAA,EACjB,OAAOI,GAAQ,SACR+C,GAEP,MAAO,EAAC,GAyCVO,aArCmBvD,MAAOqD,EAAevB,EAAgB0B,KACrD,IACI,MAAEvD,MAAMwD,KAAEA,UAAiBtD,EAASuD,KAAKC,UAC/C,IAAKF,EAAY,MAAA,IAAIR,MAAM,0BAErB,MAAEpD,MAAAA,SAAgBM,EACrBC,KAAK,eACLwD,OAAO,CACNC,OAAQR,EACRS,QAASL,EAAK1B,GACdD,SACAR,YAAa,YACbkC,UAGJ,GAAI3D,EAAaA,MAAAA,EAKV,aAFDE,KAEC,QACAiD,GAED,MAAAA,CAAA,GAeV"}