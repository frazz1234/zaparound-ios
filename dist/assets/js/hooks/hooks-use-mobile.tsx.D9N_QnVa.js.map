{"version":3,"file":"hooks-use-mobile.tsx.D9N_QnVa.js","sources":["../../../../src/hooks/use-mobile.tsx"],"sourcesContent":["import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    // Use the MediaQueryListEvent's `matches` property to avoid explicit layout reads (e.g. window.innerWidth),\n    // which can trigger forced reflows. This keeps the hook purely event-driven and more performant.\n    const onChange = (event: MediaQueryListEvent) => {\n      setIsMobile(event.matches)\n    }\n\n    mql.addEventListener(\"change\", onChange)\n    // Initialize state without forcing a synchronous reflow.\n    setIsMobile(mql.matches)\n\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"],"names":["useIsMobile","isMobile","setIsMobile","React.useState","React.useEffect","mql","window","matchMedia","onChange","event","matches","addEventListener","removeEventListener"],"mappings":"4DAIO,SAASA,IACd,MAAOC,EAAUC,GAAeC,EAAAA,cAAoC,GAiBpE,OAfAC,EAAAA,WAAgB,KACd,MAAMC,EAAMC,OAAOC,WAAW,sBAGxBC,EAAYC,IAChBP,EAAYO,EAAMC,QAAO,EAO3B,OAJIL,EAAAM,iBAAiB,SAAUH,GAE/BN,EAAYG,EAAIK,SAET,IAAML,EAAIO,oBAAoB,SAAUJ,EAAQ,GACtD,MAEMP,CACX"}