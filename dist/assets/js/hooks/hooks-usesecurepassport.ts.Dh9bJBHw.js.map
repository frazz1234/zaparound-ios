{"version":3,"file":"hooks-usesecurepassport.ts.Dh9bJBHw.js","sources":["../../../../src/hooks/useSecurePassport.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\ninterface SecurePassportData {\n  passport_number: string | null;\n  passport_country: string | null;\n  passport_expiry_date: string | null;\n}\n\ninterface UseSecurePassportReturn {\n  passportData: SecurePassportData | null;\n  loading: boolean;\n  error: string | null;\n  storePassportData: (data: SecurePassportData) => Promise<boolean>;\n  retrievePassportData: () => Promise<boolean>;\n  deletePassportData: () => Promise<boolean>;\n  clearError: () => void;\n}\n\nexport function useSecurePassport(): UseSecurePassportReturn {\n  const [passportData, setPassportData] = useState<SecurePassportData | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Generate a unique encryption key for this session\n  const generateEncryptionKey = (): string => {\n    // Use a combination of user session and timestamp for uniqueness\n    const timestamp = Date.now().toString();\n    const random = Math.random().toString(36).substring(2);\n    return `passport_${timestamp}_${random}`;\n  };\n\n  const clearError = () => setError(null);\n\n  const storePassportData = async (data: SecurePassportData): Promise<boolean> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const encryptionKey = generateEncryptionKey();\n\n      const { data: result, error } = await supabase.functions.invoke('secure-passport', {\n        body: {\n          action: 'store',\n          passportData: data,\n          encryptionKey\n        },\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to store passport data');\n      }\n\n      // Store the encryption key in session storage (temporary, will be cleared on logout)\n      sessionStorage.setItem('passport_encryption_key', encryptionKey);\n      \n      setPassportData(data);\n      \n      toast({\n        title: \"Passport Data Stored\",\n        description: \"Your passport information has been stored securely.\",\n      });\n\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to store passport data';\n      setError(errorMessage);\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const retrievePassportData = async (): Promise<boolean> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      // Get the encryption key from session storage\n      const encryptionKey = sessionStorage.getItem('passport_encryption_key');\n      if (!encryptionKey) {\n        throw new Error('No encryption key found. Please store passport data first.');\n      }\n\n      const { data: result, error } = await supabase.functions.invoke('secure-passport', {\n        body: {\n          action: 'retrieve',\n          encryptionKey\n        },\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to retrieve passport data');\n      }\n\n      if (result.passport_data) {\n        setPassportData(result.passport_data);\n      } else {\n        setPassportData(null);\n      }\n\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to retrieve passport data';\n      setError(errorMessage);\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deletePassportData = async (): Promise<boolean> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error('No active session');\n      }\n\n      const { data: result, error } = await supabase.functions.invoke('secure-passport', {\n        body: {\n          action: 'delete'\n        },\n        headers: {\n          'Authorization': `Bearer ${session.access_token}`\n        }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to delete passport data');\n      }\n\n      // Clear the encryption key from session storage\n      sessionStorage.removeItem('passport_encryption_key');\n      \n      setPassportData(null);\n      \n      toast({\n        title: \"Passport Data Deleted\",\n        description: \"Your passport information has been deleted securely.\",\n      });\n\n      return true;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to delete passport data';\n      setError(errorMessage);\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear encryption key on logout\n  useEffect(() => {\n    const { data: { authListener } } = supabase.auth.onAuthStateChange((event) => {\n      if (event === 'SIGNED_OUT') {\n        sessionStorage.removeItem('passport_encryption_key');\n        setPassportData(null);\n        setError(null);\n      }\n    });\n\n    return () => {\n      authListener?.subscription.unsubscribe();\n    };\n  }, []);\n\n  return {\n    passportData,\n    loading,\n    error,\n    storePassportData,\n    retrievePassportData,\n    deletePassportData,\n    clearError\n  };\n} "],"names":["useSecurePassport","passportData","setPassportData","useState","loading","setLoading","error","setError","toast","useToast","useEffect","data","authListener","supabase","auth","onAuthStateChange","event","sessionStorage","removeItem","subscription","unsubscribe","storePassportData","async","session","getSession","Error","encryptionKey","Date","now","toString","Math","random","substring","result","functions","invoke","body","action","headers","Authorization","access_token","message","success","setItem","title","description","err","errorMessage","variant","retrievePassportData","getItem","passport_data","deletePassportData","clearError"],"mappings":"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"}