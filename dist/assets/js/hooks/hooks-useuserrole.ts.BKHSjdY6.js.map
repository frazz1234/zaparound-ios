{"version":3,"file":"hooks-useuserrole.ts.BKHSjdY6.js","sources":["../../../../src/hooks/useUserRole.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '@/integrations/supabase/client';\n\ntype UserRole = 'admin' | 'nosubs' | 'tier1' | 'tier2' | 'tier3' | 'tier4' | 'enterprise' | null;\n\n/**\n * Custom hook to efficiently manage and cache user role information\n * Reduces excessive database queries by caching role data in localStorage\n */\nexport function useUserRole() {\n  const [userRole, setUserRole] = useState<UserRole>(null);\n  const [isAdmin, setIsAdmin] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n\n  // Function to fetch and update user role\n  const fetchUserRole = async () => {\n    let isMounted = true;\n    \n    try {\n      setLoading(true);\n      \n      // Get current user\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user || !isMounted) {\n        if (isMounted) {\n          setUserRole(null);\n          setIsAdmin(false);\n          setLoading(false);\n        }\n        return;\n      }\n      \n      // Make a direct RPC call to check admin status\n      const { data: isAdmin, error: adminError } = await supabase.rpc('is_admin');\n      \n      if (!isMounted) return;\n      \n      if (adminError) {\n        console.error(\"Error checking admin role:\", adminError);\n        setIsAdmin(false);\n      } else {\n        setIsAdmin(!!isAdmin);\n        \n        if (isAdmin) {\n          setUserRole('admin');\n          // Update cache\n          try {\n            localStorage.setItem('userRole', 'admin');\n            localStorage.setItem('isAdmin', 'true');\n            localStorage.setItem('userRoleTimestamp', Date.now().toString());\n          } catch (err) {\n            console.error(\"Error updating localStorage:\", err);\n          }\n          if (isMounted) {\n            setLoading(false);\n          }\n          return;\n        }\n      }\n      \n      // If not admin, get role from user_roles table\n      try {\n        const { data, error } = await supabase.from('user_roles')\n          .select('role')\n          .eq('user_id', user.id)\n          .maybeSingle();\n        \n        if (!isMounted) return;\n        \n        if (error) {\n          console.error(\"Error fetching user role:\", error);\n          setUserRole('nosubs'); // Default to basic role if error\n        } else {\n          const role = data?.role || 'nosubs';\n          setUserRole(role as UserRole);\n          \n          // Update cache\n          try {\n            localStorage.setItem('userRole', role);\n            localStorage.setItem('isAdmin', 'false');\n            localStorage.setItem('userRoleTimestamp', Date.now().toString());\n          } catch (err) {\n            console.error(\"Error updating localStorage:\", err);\n          }\n        }\n      } catch (error) {\n        if (isMounted) {\n          console.error(\"Error in getUserRole query:\", error);\n          setUserRole('nosubs'); // Default to basic role if error\n        }\n      }\n    } catch (error) {\n      if (isMounted) {\n        console.error(\"Error in getUserRole:\", error);\n        setUserRole('nosubs'); // Default to basic role if error\n      }\n    } finally {\n      if (isMounted) {\n        setLoading(false);\n      }\n    }\n    \n    // Return cleanup function to prevent state updates after unmount\n    return () => {\n      isMounted = false;\n    };\n  };\n\n  useEffect(() => {\n    async function getUserRole() {\n      try {\n        setLoading(true);\n        \n        // Get current user\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) {\n          setUserRole(null);\n          setIsAdmin(false);\n          return;\n        }\n        \n        // Check cache first (with 10-minute expiry)\n        const cachedRole = localStorage.getItem('userRole');\n        const cachedTimestamp = localStorage.getItem('userRoleTimestamp');\n        const isAdminCached = localStorage.getItem('isAdmin') === 'true';\n        \n        const now = Date.now();\n        const CACHE_EXPIRY = 10 * 60 * 1000; // 10 minutes\n        \n        if (cachedRole && cachedTimestamp && (now - parseInt(cachedTimestamp)) < CACHE_EXPIRY) {\n          setUserRole(cachedRole as UserRole);\n          setIsAdmin(isAdminCached);\n          setLoading(false);\n          return;\n        }\n        \n        // If cache expired or not available, fetch fresh data\n        await fetchUserRole();\n      } catch (error) {\n        console.error(\"Error in getUserRole:\", error);\n        setUserRole('nosubs'); // Default to basic role if error\n        setLoading(false);\n      }\n    }\n    \n    getUserRole();\n    \n    // Setup auth state change listener for sign in, sign out, and other auth events\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((event) => {\n      console.log(\"Auth state change event:\", event);\n      \n      if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED' || event === 'USER_UPDATED') {\n        // Force refresh role immediately when user signs in\n        console.log(\"Auth event detected, refreshing role data\");\n        fetchUserRole();\n      } else if (event === 'SIGNED_OUT') {\n        localStorage.removeItem('userRole');\n        localStorage.removeItem('isAdmin');\n        localStorage.removeItem('userRoleTimestamp');\n        setUserRole(null);\n        setIsAdmin(false);\n      }\n    });\n    \n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n  \n  return { userRole, isAdmin, loading, refreshRole: fetchUserRole };\n}\n"],"names":["useUserRole","userRole","setUserRole","useState","isAdmin","setIsAdmin","loading","setLoading","fetchUserRole","async","isMounted","data","user","supabase","auth","getUser","error","adminError","rpc","localStorage","setItem","Date","now","toString","err","from","select","eq","id","maybeSingle","role","useEffect","cachedRole","getItem","cachedTimestamp","isAdminCached","CACHE_EXPIRY","parseInt","getUserRole","subscription","onAuthStateChange","event","removeItem","unsubscribe","refreshRole"],"mappings":"2HASO,SAASA,IACd,MAAOC,EAAUC,GAAeC,EAAAA,SAAmB,OAC5CC,EAASC,GAAcF,EAAAA,UAAkB,IACzCG,EAASC,GAAcJ,EAAAA,UAAkB,GAG1CK,EAAgBC,UACpB,IAAIC,GAAY,EAEZ,IACFH,GAAW,GAGL,MAAEI,MAAMC,KAAEA,UAAiBC,EAASC,KAAKC,UAC3C,IAACH,IAASF,EAMZ,YALIA,IACFR,EAAY,MACZG,GAAW,GACXE,GAAW,KAMT,MAAEI,KAAMP,EAASY,MAAOC,SAAqBJ,EAASK,IAAI,YAEhE,IAAKR,EAAW,OAEhB,GAAIO,EAEFZ,GAAW,QAIX,GAFWA,IAAED,GAETA,EAAS,CACXF,EAAY,SAER,IACWiB,aAAAC,QAAQ,WAAY,SACpBD,aAAAC,QAAQ,UAAW,QAChCD,aAAaC,QAAQ,oBAAqBC,KAAKC,MAAMC,kBAC9CC,GAC0C,CAKnD,YAHId,GACFH,GAAW,GAEb,CAKA,IACF,MAAMI,KAAEA,EAAMK,MAAAA,SAAgBH,EAASY,KAAK,cACzCC,OAAO,QACPC,GAAG,UAAWf,EAAKgB,IACnBC,cAEH,IAAKnB,EAAW,OAEhB,GAAIM,EAEFd,EAAY,cACP,CACC,MAAA4B,EAAOnB,GAAMmB,MAAQ,SAC3B5B,EAAY4B,GAGR,IACWX,aAAAC,QAAQ,WAAYU,GACpBX,aAAAC,QAAQ,UAAW,SAChCD,aAAaC,QAAQ,oBAAqBC,KAAKC,MAAMC,kBAC9CC,GAC0C,CACnD,QAEKR,GACHN,GAEFR,EAAY,SACd,QAEKc,GACHN,GAEFR,EAAY,SACd,CACA,QACIQ,GACFH,GAAW,EACb,CAIF,MAAO,KACOG,GAAA,CAAA,CACd,EAgEF,OA7DAqB,EAAAA,WAAU,MACRtB,iBACM,IACFF,GAAW,GAGL,MAAEI,MAAMC,KAAEA,UAAiBC,EAASC,KAAKC,UAC/C,IAAKH,EAGH,OAFAV,EAAY,WACZG,GAAW,GAKP,MAAA2B,EAAab,aAAac,QAAQ,YAClCC,EAAkBf,aAAac,QAAQ,qBACvCE,EAAoD,SAApChB,aAAac,QAAQ,WAErCX,EAAMD,KAAKC,MACXc,EAAe,IAErB,GAAIJ,GAAcE,GAAoBZ,EAAMe,SAASH,GAAoBE,EAIvE,OAHAlC,EAAY8B,GACZ3B,EAAW8B,QACX5B,GAAW,SAKPC,UACCQ,GAEPd,EAAY,UACZK,GAAW,EAAK,CAClB,CAGU+B,GAGN,MAAE3B,MAAM4B,aAAEA,IAAmB1B,EAASC,KAAK0B,mBAAmBC,IAGpD,cAAVA,GAAmC,oBAAVA,GAAyC,iBAAVA,EAG5CjC,IACK,eAAViC,IACTtB,aAAauB,WAAW,YACxBvB,aAAauB,WAAW,WACxBvB,aAAauB,WAAW,qBACxBxC,EAAY,MACZG,GAAW,GAAK,IAIpB,MAAO,KACLkC,EAAaI,aAAY,CAC3B,GACC,IAEI,CAAE1C,WAAUG,UAASE,UAASsC,YAAapC,EACpD"}