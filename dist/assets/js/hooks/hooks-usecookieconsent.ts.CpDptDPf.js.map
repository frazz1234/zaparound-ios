{"version":3,"file":"hooks-usecookieconsent.ts.CpDptDPf.js","sources":["../../../../src/services/analytics.ts","../../../../src/hooks/useCookieConsent.ts"],"sourcesContent":["// Google Analytics service\n\n/**\n * Analytics service for Google Analytics 4\n */\nclass AnalyticsService {\n  private measurementId = 'G-NK9ZZDPQ7K';\n  private isInitialized = false;\n\n  constructor() {\n    // Check if analytics exists\n    this.isInitialized = typeof window !== 'undefined' && !!window.gtag;\n  }\n\n  /**\n   * Initialize analytics with consent state\n   */\n  init(consentState?: { analytics: boolean; marketing: boolean }) {\n    if (!this.isInitialized) return;\n    \n    // Always enable GA4 but respect marketing consent\n    window.gtag('consent', 'update', {\n      analytics_storage: 'granted', // Always enable GA4\n      ad_storage: consentState?.marketing ? 'granted' : 'denied',\n    });\n  }\n\n  /**\n   * Update consent settings\n   */\n  updateConsent(consentState: { analytics: boolean; marketing: boolean }) {\n    if (!this.isInitialized) return;\n\n    // Always keep GA4 enabled but respect marketing consent\n    window.gtag('consent', 'update', {\n      analytics_storage: 'granted', // Always enable GA4\n      ad_storage: consentState.marketing ? 'granted' : 'denied',\n    });\n  }\n\n  /**\n   * Track page view\n   */\n  pageView(path: string, title?: string) {\n    if (!this.isInitialized) return;\n\n    window.gtag('event', 'page_view', {\n      page_path: path,\n      page_title: title || document.title,\n      page_location: window.location.href,\n    });\n  }\n\n  /**\n   * Track event\n   */\n  event(name: string, params: Record<string, any> = {}) {\n    if (!this.isInitialized) return;\n\n    window.gtag('event', name, params);\n  }\n\n  /**\n   * Track user property\n   */\n  setUserProperty(name: string, value: string) {\n    if (!this.isInitialized) return;\n\n    window.gtag('set', 'user_properties', { [name]: value });\n  }\n\n  /**\n   * Set user ID for cross-device tracking (should be used with caution and proper consent)\n   */\n  setUserId(id: string | null) {\n    if (!this.isInitialized) return;\n\n    if (id) {\n      window.gtag('config', this.measurementId, {\n        user_id: id\n      });\n    }\n  }\n}\n\n// Export as singleton\nexport const analytics = new AnalyticsService();\n\n// For convenience in JSX contexts\nexport function trackEvent(name: string, params: Record<string, any> = {}) {\n  analytics.event(name, params);\n}\n\n// For convenience in JSX contexts\nexport function trackPageView(path: string, title?: string) {\n  analytics.pageView(path, title);\n} ","import { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getCookie, setCookie } from '@/utils/cookieManager';\nimport { analytics } from '@/services/analytics';\n\n// Define cookie consent categories\nexport type ConsentCategory = 'necessary' | 'functional' | 'analytics' | 'marketing';\n\nexport interface CookieConsentState {\n  necessary: boolean; // Always true, can't be disabled\n  functional: boolean;\n  analytics: boolean;\n  marketing: boolean;\n  hasInteracted: boolean; // Whether the user has made a choice\n}\n\n// Default consent state (only necessary cookies allowed)\nconst defaultConsentState: CookieConsentState = {\n  necessary: true, // Always true, cannot be disabled\n  functional: false,\n  analytics: false,\n  marketing: false,\n  hasInteracted: false\n};\n\n// Cookie name for storing consent\nconst CONSENT_COOKIE_NAME = 'cookie_consent';\n\n// Cookie options\nconst CONSENT_COOKIE_OPTIONS = {\n  expires: 365, // 1 year\n  path: '/',\n  sameSite: 'strict' as const,\n  secure: true\n};\n\nexport function useCookieConsent() {\n  const { t } = useTranslation();\n  const [consentState, setConsentState] = useState<CookieConsentState>(defaultConsentState);\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Load consent state from cookie on mount\n  useEffect(() => {\n    const savedConsent = getCookie(CONSENT_COOKIE_NAME);\n    \n    if (savedConsent) {\n      try {\n        const parsedConsent = JSON.parse(savedConsent) as CookieConsentState;\n        setConsentState(parsedConsent);\n        \n        // Apply the loaded consent settings\n        applyConsentSettings(parsedConsent);\n      } catch (e) {\n        console.error('Error parsing consent cookie:', e);\n        setIsOpen(true);\n      }\n    } else {\n      // No consent has been saved, show the banner\n      setIsOpen(true);\n    }\n  }, []);\n\n  // Save consent state to cookie whenever it changes\n  useEffect(() => {\n    if (consentState.hasInteracted) {\n      setCookie(\n        CONSENT_COOKIE_NAME, \n        JSON.stringify(consentState), \n        CONSENT_COOKIE_OPTIONS\n      );\n      \n      // Apply the consent settings\n      applyConsentSettings(consentState);\n    }\n  }, [consentState]);\n\n  // Function to apply consent settings to actual cookies/tracking systems\n  const applyConsentSettings = (settings: CookieConsentState) => {\n    // Set a data attribute on the document for easy access in other scripts\n    document.documentElement.setAttribute('data-cookie-consent', JSON.stringify(settings));\n    \n    // Update Google Analytics consent using our service\n    analytics.updateConsent({\n      analytics: settings.analytics,\n      marketing: settings.marketing\n    });\n  };\n\n  // Accept all cookies\n  const acceptAll = () => {\n    setConsentState({\n      necessary: true,\n      functional: true,\n      analytics: true,\n      marketing: true,\n      hasInteracted: true\n    });\n    setIsOpen(false);\n  };\n\n  // Accept only necessary cookies\n  const acceptNecessary = () => {\n    setConsentState({\n      ...defaultConsentState,\n      hasInteracted: true\n    });\n    setIsOpen(false);\n  };\n\n  // Update a specific category\n  const updateCategoryConsent = (category: ConsentCategory, value: boolean) => {\n    setConsentState(prev => ({\n      ...prev,\n      [category]: category === 'necessary' ? true : value, // Necessary cookies can't be disabled\n    }));\n  };\n\n  // Save custom preferences\n  const savePreferences = () => {\n    setConsentState(prev => ({\n      ...prev,\n      hasInteracted: true\n    }));\n    setIsOpen(false);\n  };\n\n  // Open the cookie settings modal/banner\n  const openSettings = () => {\n    // Set isOpen first to ensure the dialog appears\n    setIsOpen(true);\n    \n    // If there's no saved consent state, initialize with default\n    if (!consentState.hasInteracted) {\n      setConsentState({\n        ...defaultConsentState,\n        necessary: true // Always keep necessary cookies enabled\n      });\n    }\n  };\n\n  return {\n    consentState,\n    isOpen,\n    setIsOpen,\n    acceptAll,\n    acceptNecessary,\n    updateCategoryConsent,\n    savePreferences,\n    openSettings,\n  };\n}\n\n// Add TypeScript global declaration for gtag\ndeclare global {\n  interface Window {\n    gtag?: (command: string, action: string, config: any) => void;\n  }\n} "],"names":["analytics","measurementId","isInitialized","constructor","this","window","gtag","init","consentState","analytics_storage","ad_storage","marketing","updateConsent","pageView","path","title","page_path","page_title","document","page_location","location","href","event","name","params","setUserProperty","value","setUserId","id","user_id","defaultConsentState","necessary","functional","hasInteracted","CONSENT_COOKIE_NAME","CONSENT_COOKIE_OPTIONS","expires","sameSite","secure","useCookieConsent","t","useTranslation","setConsentState","useState","isOpen","setIsOpen","useEffect","savedConsent","getCookie","parsedConsent","JSON","parse","applyConsentSettings","e","setCookie","stringify","settings","documentElement","setAttribute","acceptAll","acceptNecessary","updateCategoryConsent","category","prev","savePreferences","openSettings"],"mappings":"mMAsFa,MAAAA,EAAY,IAjFzB,MACUC,cAAgB,eAChBC,eAAgB,EAExB,WAAAC,GAEEC,KAAKF,cAAkC,oBAAXG,UAA4BA,OAAOC,IAAA,CAMjE,IAAAC,CAAKC,GACEJ,KAAKF,eAGHG,OAAAC,KAAK,UAAW,SAAU,CAC/BG,kBAAmB,UACnBC,WAAYF,GAAcG,UAAY,UAAY,UACnD,CAMH,aAAAC,CAAcJ,GACPJ,KAAKF,eAGHG,OAAAC,KAAK,UAAW,SAAU,CAC/BG,kBAAmB,UACnBC,WAAYF,EAAaG,UAAY,UAAY,UAClD,CAMH,QAAAE,CAASC,EAAcC,GAChBX,KAAKF,eAEHG,OAAAC,KAAK,QAAS,YAAa,CAChCU,UAAWF,EACXG,WAAYF,GAASG,SAASH,MAC9BI,cAAed,OAAOe,SAASC,MAChC,CAMH,KAAAC,CAAMC,EAAcC,EAA8B,IAC3CpB,KAAKF,eAEHG,OAAAC,KAAK,QAASiB,EAAMC,EAAM,CAMnC,eAAAC,CAAgBF,EAAcG,GACvBtB,KAAKF,eAEHG,OAAAC,KAAK,MAAO,kBAAmB,CAAEiB,CAACA,GAAOG,GAAO,CAMzD,SAAAC,CAAUC,GACHxB,KAAKF,eAEN0B,GACKvB,OAAAC,KAAK,SAAUF,KAAKH,cAAe,CACxC4B,QAASD,GAEb,GChEEE,EAA0C,CAC9CC,WAAW,EACXC,YAAY,EACZhC,WAAW,EACXW,WAAW,EACXsB,eAAe,GAIXC,EAAsB,iBAGtBC,EAAyB,CAC7BC,QAAS,IACTtB,KAAM,IACNuB,SAAU,SACVC,QAAQ,GAGH,SAASC,IACR,MAAAC,EAAEA,GAAMC,KACPjC,EAAckC,GAAmBC,EAAAA,SAA6Bb,IAC9Dc,EAAQC,GAAaF,EAAAA,UAAS,GAGrCG,EAAAA,WAAU,KACF,MAAAC,EAAeC,EAAUd,GAE/B,GAAIa,EACE,IACI,MAAAE,EAAgBC,KAAKC,MAAMJ,GACjCL,EAAgBO,GAGhBG,EAAqBH,SACdI,GAEPR,GAAU,EAAI,MAIhBA,GAAU,EAAI,GAEf,IAGHC,EAAAA,WAAU,KACJtC,EAAayB,gBACfqB,EACEpB,EACAgB,KAAKK,UAAU/C,GACf2B,GAIFiB,EAAqB5C,GAAY,GAElC,CAACA,IAGE,MAAA4C,EAAwBI,IAE5BtC,SAASuC,gBAAgBC,aAAa,sBAAuBR,KAAKK,UAAUC,IAG5ExD,EAAUY,cAAc,CACtBZ,UAAWwD,EAASxD,UACpBW,UAAW6C,EAAS7C,WACrB,EAuDI,MAAA,CACLH,eACAoC,SACAC,YACAc,UAvDgB,KACAjB,EAAA,CACdX,WAAW,EACXC,YAAY,EACZhC,WAAW,EACXW,WAAW,EACXsB,eAAe,IAEjBY,GAAU,EAAK,EAgDfe,gBA5CsB,KACNlB,EAAA,IACXZ,EACHG,eAAe,IAEjBY,GAAU,EAAK,EAwCfgB,sBApC4B,CAACC,EAA2BpC,KACxDgB,GAAyBqB,IAAA,IACpBA,EACHD,CAACA,GAAwB,cAAbA,GAAkCpC,KAC9C,EAiCFsC,gBA7BsB,KACtBtB,GAAyBqB,IAAA,IACpBA,EACH9B,eAAe,MAEjBY,GAAU,EAAK,EAyBfoB,aArBmB,KAEnBpB,GAAU,GAGLrC,EAAayB,eACAS,EAAA,IACXZ,EACHC,WAAW,GACZ,EAcP"}