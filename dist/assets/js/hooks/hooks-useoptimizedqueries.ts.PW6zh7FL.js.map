{"version":3,"file":"hooks-useoptimizedqueries.ts.PW6zh7FL.js","sources":["../../../../src/hooks/useOptimizedQueries.ts"],"sourcesContent":["import { useQuery, useMutation, useQueryClient, UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';\nimport { supabase } from '@/integrations/supabase/client';\n\n// Types\ntype QueryOptions<TData> = Omit<UseQueryOptions<TData, Error, TData, string[]>, 'queryKey' | 'queryFn'>;\n\ninterface ZapOutData {\n  id: string;\n  title: string;\n  description?: string;\n  activity_times?: string[];\n  activity_types?: string[];\n  location?: string;\n  coordinates?: string;\n  additional_needs?: string;\n  budget_per_person?: string;\n  requested_activities?: string[];\n  group_composition?: string;\n  special_requirements?: string;\n  accessibility_needs?: string;\n  adults?: number;\n  kids?: number;\n  date?: string;\n  user_id: string;\n}\n\ninterface PaginatedTripsResponse {\n  data: Array<{\n    id: string;\n    title: string;\n    description: string;\n    location: string;\n    start_date: string;\n    end_date: string;\n    trip_type: string;\n  }>;\n  nextPage?: number;\n  totalCount: number;\n}\n\nexport const useOptimizedQueries = () => {\n  const queryClient = useQueryClient();\n\n  const fetchZapOutData = async (tripId: string): Promise<ZapOutData> => {\n    console.log('Fetching ZapOut data for tripId:', tripId);\n    \n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session) {\n      console.error('No session found');\n      throw new Error('Not authenticated');\n    }\n\n    try {\n      const { data, error } = await supabase\n        .from('zapout_data')\n        .select('*')\n        .eq('trip_id', tripId)\n        .single();\n\n      if (error) {\n        console.error('Supabase error fetching ZapOut data:', error);\n        throw error;\n      }\n      \n      if (!data) {\n        console.error('No data found for tripId:', tripId);\n        throw new Error('No data found');\n      }\n      \n      if (data.user_id !== session.user.id) {\n        console.error('Unauthorized access attempt');\n        throw new Error('Unauthorized');\n      }\n\n      console.log('Successfully fetched ZapOut data:', data);\n      return data;\n    } catch (error) {\n      console.error('Error in fetchZapOutData:', error);\n      throw error;\n    }\n  };\n\n  const useZapOutData = (tripId: string | undefined, options: QueryOptions<ZapOutData> = {}) => {\n    return useQuery<ZapOutData, Error>({\n      queryKey: ['zapout', tripId],\n      queryFn: () => fetchZapOutData(tripId!),\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 30 * 60 * 1000, // 30 minutes\n      retry: 2,\n      enabled: !!tripId && options.enabled !== false,\n      ...options\n    });\n  };\n\n  const updateZapOutData = async ({ tripId, data }: { tripId: string; data: Partial<ZapOutData> }) => {\n    console.log('Updating ZapOut data for tripId:', tripId, 'with data:', data);\n    \n    try {\n      const { error } = await supabase\n        .from('zapout_data')\n        .update(data)\n        .eq('id', tripId);\n\n      if (error) {\n        console.error('Error updating ZapOut data:', error);\n        throw error;\n      }\n      \n      console.log('Successfully updated ZapOut data');\n      return true;\n    } catch (error) {\n      console.error('Error in updateZapOutData:', error);\n      throw error;\n    }\n  };\n\n  const useUpdateZapOut = () => {\n    return useMutation({\n      mutationFn: updateZapOutData,\n      onSuccess: (_, variables) => {\n        queryClient.invalidateQueries({ queryKey: ['zapout', variables.tripId] });\n      }\n    });\n  };\n\n  const fetchPaginatedTrips = async ({ pageParam = 0, limit = 10 }): Promise<PaginatedTripsResponse> => {\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session) throw new Error('Not authenticated');\n\n    const { data, error, count } = await supabase\n      .from('trips')\n      .select('id, title, description, location, start_date, end_date, trip_type', { count: 'exact' })\n      .eq('user_id', session.user.id)\n      .range(pageParam * limit, (pageParam + 1) * limit - 1)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return {\n      data: data || [],\n      nextPage: data?.length === limit ? pageParam + 1 : undefined,\n      totalCount: count || 0\n    };\n  };\n\n  const usePaginatedTrips = (options: QueryOptions<PaginatedTripsResponse> = {}) => {\n    return useQuery<PaginatedTripsResponse, Error>({\n      queryKey: ['trips', 'paginated'],\n      queryFn: () => fetchPaginatedTrips({}),\n      staleTime: 5 * 60 * 1000,\n      gcTime: 30 * 60 * 1000,\n      retry: 2,\n      enabled: options.enabled !== false,\n      ...options\n    });\n  };\n\n  return {\n    useZapOutData,\n    useUpdateZapOut,\n    usePaginatedTrips\n  };\n}; "],"names":["useOptimizedQueries","queryClient","useQueryClient","updateZapOutData","async","tripId","data","error","supabase","from","update","eq","useZapOutData","options","useQuery","queryKey","queryFn","session","auth","getSession","Error","select","single","user_id","user","id","fetchZapOutData","staleTime","gcTime","retry","enabled","useUpdateZapOut","useMutation","mutationFn","onSuccess","_","variables","invalidateQueries","usePaginatedTrips","pageParam","limit","count","range","order","ascending","nextPage","length","totalCount","fetchPaginatedTrips"],"mappings":"yIAwCO,MAAMA,EAAsB,KACjC,MAAMC,EAAcC,IAqDdC,EAAmBC,OAASC,SAAQC,WAGpC,IACF,MAAMC,MAAEA,SAAgBC,EACrBC,KAAK,eACLC,OAAOJ,GACPK,GAAG,KAAMN,GAEZ,GAAIE,EAEI,MAAAA,EAID,OAAA,QACAA,GAED,MAAAA,CAAA,GA4CH,MAAA,CACLK,cA3EoB,CAACP,EAA4BQ,EAAoC,CAAA,IAC9EC,EAA4B,CACjCC,SAAU,CAAC,SAAUV,GACrBW,QAAS,IA1CWZ,OAAOC,IAGvB,MAAEC,MAAMW,QAAEA,UAAoBT,EAASU,KAAKC,aAClD,IAAKF,EAEG,MAAA,IAAIG,MAAM,qBAGd,IACF,MAAMd,KAAEA,EAAMC,MAAAA,SAAgBC,EAC3BC,KAAK,eACLY,OAAO,KACPV,GAAG,UAAWN,GACdiB,SAEH,GAAIf,EAEI,MAAAA,EAGR,IAAKD,EAEG,MAAA,IAAIc,MAAM,iBAGlB,GAAId,EAAKiB,UAAYN,EAAQO,KAAKC,GAE1B,MAAA,IAAIL,MAAM,gBAIX,OAAAd,QACAC,GAED,MAAAA,CAAA,GAOSmB,CAAgBrB,GAC/BsB,UAAW,IACXC,OAAQ,KACRC,MAAO,EACPC,UAAWzB,IAA8B,IAApBQ,EAAQiB,WAC1BjB,IAoELkB,gBA1CsB,IACfC,EAAY,CACjBC,WAAY9B,EACZ+B,UAAW,CAACC,EAAGC,KACDnC,EAAAoC,kBAAkB,CAAEtB,SAAU,CAAC,SAAUqB,EAAU/B,SAAS,IAuC5EiC,kBAfwB,CAACzB,EAAgD,KAClEC,EAAwC,CAC7CC,SAAU,CAAC,QAAS,aACpBC,QAAS,IAtBeZ,QAASmC,YAAY,EAAGC,QAAQ,OACpD,MAAElC,MAAMW,QAAEA,UAAoBT,EAASU,KAAKC,aAClD,IAAKF,EAAe,MAAA,IAAIG,MAAM,qBAE9B,MAAMd,KAAEA,EAAMC,MAAAA,EAAAkC,MAAOA,SAAgBjC,EAClCC,KAAK,SACLY,OAAO,oEAAqE,CAAEoB,MAAO,UACrF9B,GAAG,UAAWM,EAAQO,KAAKC,IAC3BiB,MAAMH,EAAYC,GAAQD,EAAY,GAAKC,EAAQ,GACnDG,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAIrC,EAAa,MAAAA,EACV,MAAA,CACLD,KAAMA,GAAQ,GACduC,SAAUvC,GAAMwC,SAAWN,EAAQD,EAAY,OAAI,EACnDQ,WAAYN,GAAS,EACvB,EAMiBO,CAAoB,IACnCrB,UAAW,IACXC,OAAQ,KACRC,MAAO,EACPC,SAA6B,IAApBjB,EAAQiB,WACdjB,IAQP"}