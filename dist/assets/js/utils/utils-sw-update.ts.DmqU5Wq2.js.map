{"version":3,"file":"utils-sw-update.ts.DmqU5Wq2.js","sources":["../../../../src/utils/sw-update.ts"],"sourcesContent":["// src/utils/sw-update.ts\n// Utility to bridge vite-plugin-pwa update events ➜ our existing \"appUpdateAvailable\" custom event.\n// Keeps the historical contract used by UpdateNotification and other components.\n// This file intentionally contains **no** React code so it can be imported from anywhere.\n\n/**\n * Starts listening to service-worker lifecycle so we can dispatch\n * the historical `appUpdateAvailable` event when a fresh SW is ready.\n *\n * Must be called **once** on application bootstrap (e.g. from main.tsx).\n */\nexport function initSWUpdateListener() {\n  // Service workers are only available in secure contexts (https) & supported browsers\n  if (!('serviceWorker' in navigator)) return;\n\n  const notify = () => {\n    window.dispatchEvent(new CustomEvent('appUpdateAvailable'));\n  };\n\n  // Wait until the first SW is ready – this also guarantees we have a registration\n  navigator.serviceWorker.ready\n    .then((registration) => {\n      // 1. If a new SW is already waiting when the page loads (e.g. user opened a stale tab)\n      if (registration.waiting) {\n        notify();\n      }\n\n      // 2. Listen for future updates discovered by workbox (autoUpdate strategy)\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        if (!newWorker) return;\n\n        newWorker.addEventListener('statechange', () => {\n          // Once the new SW is installed *and* there is already a controlling SW –\n          // meaning this is an update, not the very first install.\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            notify();\n          }\n        });\n      });\n    })\n    .catch((err) => {\n      // Shouldn’t happen often, but log for diagnostic purposes only – no user impact\n      console.error('Failed to obtain service-worker registration:', err);\n    });\n} "],"names":["initSWUpdateListener","navigator","notify","window","dispatchEvent","CustomEvent","serviceWorker","ready","then","registration","waiting","addEventListener","newWorker","installing","state","controller","catch","err"],"mappings":"AAWO,SAASA,IAEV,KAAE,kBAAmBC,WAAY,OAErC,MAAMC,EAAS,KACbC,OAAOC,cAAc,IAAIC,YAAY,sBAAqB,EAI5DJ,UAAUK,cAAcC,MACrBC,MAAMC,IAEDA,EAAaC,SACRR,IAIIO,EAAAE,iBAAiB,eAAe,KAC3C,MAAMC,EAAYH,EAAaI,WAC1BD,GAEKA,EAAAD,iBAAiB,eAAe,KAGhB,cAApBC,EAAUE,OAAyBb,UAAUK,cAAcS,YACtDb,GAAA,GAEV,GACF,IAEFc,OAAOC,IAE4D,GAExE"}