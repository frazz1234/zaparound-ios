{"version":3,"file":"utils-polyfills.ts.CUBbx1GO.js","sources":["../../../../src/utils/polyfills.ts"],"sourcesContent":["// Type definitions for requestIdleCallback\ninterface RequestIdleCallbackOptions {\n  timeout?: number;\n}\n\ninterface RequestIdleCallbackDeadline {\n  didTimeout: boolean;\n  timeRemaining: () => number;\n}\n\ntype RequestIdleCallbackHandle = number;\ntype RequestIdleCallbackCallback = (deadline: RequestIdleCallbackDeadline) => void;\n\n// Polyfill for requestIdleCallback and cancelIdleCallback\nif (typeof window !== 'undefined') {\n  if (!('requestIdleCallback' in window)) {\n    (window as any).requestIdleCallback = function(\n      callback: RequestIdleCallbackCallback,\n      options?: RequestIdleCallbackOptions\n    ): RequestIdleCallbackHandle {\n      const start = Date.now();\n      return setTimeout(() => {\n        callback({\n          didTimeout: false,\n          timeRemaining: () => Math.max(0, 50 - (Date.now() - start))\n        });\n      }, options?.timeout || 1) as unknown as RequestIdleCallbackHandle;\n    };\n  }\n\n  if (!('cancelIdleCallback' in window)) {\n    (window as any).cancelIdleCallback = function(id: RequestIdleCallbackHandle): void {\n      clearTimeout(id);\n    };\n  }\n}\n\nexport {}; "],"names":["window","requestIdleCallback","callback","options","start","Date","now","setTimeout","didTimeout","timeRemaining","Math","max","timeout","cancelIdleCallback","id","clearTimeout"],"mappings":"AAcsB,oBAAXA,SACH,wBAAyBA,SAC5BA,OAAeC,oBAAsB,SACpCC,EACAC,GAEM,MAAAC,EAAQC,KAAKC,MACnB,OAAOC,YAAW,KACPL,EAAA,CACPM,YAAY,EACZC,cAAe,IAAMC,KAAKC,IAAI,EAAG,IAAMN,KAAKC,MAAQF,KACrD,GACAD,GAASS,SAAW,EACzB,GAGI,uBAAwBZ,SAC3BA,OAAea,mBAAqB,SAASC,GAC5CC,aAAaD,EACf"}