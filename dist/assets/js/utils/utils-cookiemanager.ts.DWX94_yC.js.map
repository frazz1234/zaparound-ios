{"version":3,"file":"utils-cookiemanager.ts.DWX94_yC.js","sources":["../../../../src/utils/cookieManager.ts"],"sourcesContent":["import { CookieConsentState } from '@/hooks/useCookieConsent';\nimport { cookieMonitor } from './cookieMonitor';\n\ninterface CookieOptions {\n  expires?: Date | number;\n  path?: string;\n  domain?: string;\n  secure?: boolean;\n  sameSite?: 'strict' | 'lax' | 'none';\n}\n\n/**\n * Set a cookie with the given name, value, and options\n */\nexport function setCookie(name: string, value: string, options: CookieOptions = {}) {\n  const cookieConsent = getConsentState();\n  \n  // Check if we have consent to set this cookie based on its name\n  if (!shouldSetCookie(name, cookieConsent)) {\n    console.warn(`Cookie \"${name}\" not set due to user consent preferences`);\n    return;\n  }\n  \n  let cookieString = `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n  \n  if (options.expires) {\n    if (typeof options.expires === 'number') {\n      const days = options.expires;\n      const date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      options.expires = date;\n    }\n    \n    cookieString += `; expires=${options.expires.toUTCString()}`;\n  }\n  \n  if (options.path) {\n    cookieString += `; path=${options.path}`;\n  } else {\n    cookieString += '; path=/'; // Default to root path\n  }\n  \n  if (options.domain) {\n    cookieString += `; domain=${options.domain}`;\n  }\n  \n  if (options.secure) {\n    cookieString += '; secure';\n  }\n  \n  if (options.sameSite) {\n    cookieString += `; samesite=${options.sameSite}`;\n  } else {\n    cookieString += '; samesite=lax'; // Default to lax\n  }\n\n  // Check cookie size before setting\n  const cookieSize = new Blob([cookieString]).size;\n  if (cookieSize > 4096) { // 4KB limit per cookie\n    console.error(`Cookie \"${name}\" exceeds size limit (${cookieSize} bytes)`);\n    return;\n  }\n  \n  document.cookie = cookieString;\n  \n  // Update cookie inventory after setting\n  cookieMonitor.updateCookieAccess(name);\n}\n\n/**\n * Get a cookie by name\n */\nexport function getCookie(name: string): string | null {\n  const cookieConsent = getConsentState();\n  \n  // Check if we have consent to read this cookie based on its name\n  if (!shouldSetCookie(name, cookieConsent)) {\n    console.warn(`Cookie \"${name}\" not read due to user consent preferences`);\n    return null;\n  }\n  \n  const cookies = document.cookie.split(';');\n  const encodedName = encodeURIComponent(name);\n  \n  for (let i = 0; i < cookies.length; i++) {\n    const cookie = cookies[i].trim();\n    \n    if (cookie.indexOf(encodedName + '=') === 0) {\n      // Update access time in inventory\n      cookieMonitor.updateCookieAccess(name);\n      return decodeURIComponent(cookie.substring(encodedName.length + 1));\n    }\n  }\n  \n  return null;\n}\n\n/**\n * Delete a cookie by name\n */\nexport function deleteCookie(name: string, options: Omit<CookieOptions, 'expires'> = {}) {\n  // Set expiration to a past date to delete the cookie\n  setCookie(name, '', { ...options, expires: new Date(0) });\n}\n\n/**\n * Get the current consent state from the document\n */\nfunction getConsentState(): CookieConsentState {\n  try {\n    const consentAttr = document.documentElement.getAttribute('data-cookie-consent');\n    if (consentAttr) {\n      return JSON.parse(consentAttr) as CookieConsentState;\n    }\n  } catch (error) {\n    console.error('Error parsing cookie consent state:', error);\n  }\n  \n  // Default to only necessary cookies if consent state is not available\n  return {\n    necessary: true,\n    functional: false,\n    analytics: false,\n    marketing: false,\n    hasInteracted: false\n  };\n}\n\n/**\n * Determine if a cookie should be set based on its name and the consent state\n */\nfunction shouldSetCookie(name: string, consentState: CookieConsentState): boolean {\n  // Always allow necessary cookies\n  if (isNecessaryCookie(name)) {\n    return true;\n  }\n  \n  // Always allow GA4 cookies specifically\n  if (isGoogleAnalyticsCookie(name)) {\n    return true;\n  }\n  \n  // Check other analytics cookies (non-GA4)\n  if (isAnalyticsCookie(name) && !consentState.analytics) {\n    return false;\n  }\n  \n  // Check other categories\n  if (isFunctionalCookie(name) && !consentState.functional) {\n    return false;\n  }\n  \n  if (isMarketingCookie(name) && !consentState.marketing) {\n    return false;\n  }\n  \n  // Default to allowing if not categorized (though this should be avoided)\n  return true;\n}\n\n/**\n * Check if a cookie is a necessary cookie\n */\nfunction isNecessaryCookie(name: string): boolean {\n  const necessaryCookies = [\n    'zaparound-cookie-consent',\n    'session',\n    'csrf',\n    'auth',\n    'sb-',  // Supabase cookies\n  ];\n  \n  return necessaryCookies.some(prefix => name.startsWith(prefix));\n}\n\n/**\n * Check if a cookie is specifically from Google Analytics\n */\nfunction isGoogleAnalyticsCookie(name: string): boolean {\n  return name.startsWith('_ga'); // This covers _ga, _gid, _gat\n}\n\n/**\n * Check if a cookie is an analytics cookie\n */\nfunction isAnalyticsCookie(name: string): boolean {\n  const analyticsCookies = [\n    'plausible_',\n    'amplitude_',\n    'mixpanel_',\n  ];\n  \n  return analyticsCookies.some(prefix => name.startsWith(prefix)) || isGoogleAnalyticsCookie(name);\n}\n\n/**\n * Check if a cookie is a functional cookie\n */\nfunction isFunctionalCookie(name: string): boolean {\n  const functionalCookies = [\n    'theme',\n    'language',\n    'app-language',\n    'preferences',\n    'ui-',\n  ];\n  \n  return functionalCookies.some(prefix => name.startsWith(prefix));\n}\n\n/**\n * Check if a cookie is a marketing cookie\n */\nfunction isMarketingCookie(name: string): boolean {\n  const marketingCookies = [\n    '_fbp',\n    '_gcl',\n    'ads_',\n    'marketing_',\n  ];\n  \n  return marketingCookies.some(prefix => name.startsWith(prefix));\n} "],"names":["setCookie","name","value","options","shouldSetCookie","getConsentState","cookieString","encodeURIComponent","expires","days","date","Date","setTime","getTime","toUTCString","path","domain","secure","sameSite","Blob","size","document","cookie","cookieMonitor","updateCookieAccess","getCookie","cookies","split","encodedName","i","length","trim","indexOf","decodeURIComponent","substring","deleteCookie","consentAttr","documentElement","getAttribute","JSON","parse","error","necessary","functional","analytics","marketing","hasInteracted","consentState","some","prefix","startsWith","isNecessaryCookie","isGoogleAnalyticsCookie","isAnalyticsCookie","isFunctionalCookie","isMarketingCookie"],"mappings":"yDAcO,SAASA,EAAUC,EAAcC,EAAeC,EAAyB,CAAA,GAI9E,IAAKC,EAAgBH,EAHCI,KAKpB,OAGE,IAAAC,EAAe,GAAGC,mBAAmBN,MAASM,mBAAmBL,KAErE,GAAIC,EAAQK,QAAS,CACf,GAA2B,iBAApBL,EAAQK,QAAsB,CACvC,MAAMC,EAAON,EAAQK,QACfE,MAAWC,KACZD,EAAAE,QAAQF,EAAKG,UAAmB,GAAPJ,EAAY,GAAK,GAAK,KACpDN,EAAQK,QAAUE,CAAA,CAGpBJ,GAAgB,aAAaH,EAAQK,QAAQM,eAAa,CAGxDX,EAAQY,KACMT,GAAA,UAAUH,EAAQY,OAElBT,GAAA,WAGdH,EAAQa,SACMV,GAAA,YAAYH,EAAQa,UAGlCb,EAAQc,SACMX,GAAA,YAGdH,EAAQe,SACMZ,GAAA,cAAcH,EAAQe,WAEtBZ,GAAA,iBAIC,IAAIa,KAAK,CAACb,IAAec,KAC3B,OAKjBC,SAASC,OAAShB,EAGlBiB,EAAcC,mBAAmBvB,GACnC,CAKO,SAASwB,EAAUxB,GAIxB,IAAKG,EAAgBH,EAHCI,KAKb,OAAA,KAGT,MAAMqB,EAAUL,SAASC,OAAOK,MAAM,KAChCC,EAAcrB,mBAAmBN,GAEvC,IAAA,IAAS4B,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAAK,CACvC,MAAMP,EAASI,EAAQG,GAAGE,OAE1B,GAA0C,IAAtCT,EAAOU,QAAQJ,EAAc,KAG/B,OADAL,EAAcC,mBAAmBvB,GAC1BgC,mBAAmBX,EAAOY,UAAUN,EAAYE,OAAS,GAClE,CAGK,OAAA,IACT,CAKO,SAASK,EAAalC,EAAcE,EAA0C,IAEzEH,EAAAC,EAAM,GAAI,IAAKE,EAASK,QAAa,IAAAG,KAAK,IACtD,CAKA,SAASN,IACH,IACF,MAAM+B,EAAcf,SAASgB,gBAAgBC,aAAa,uBAC1D,GAAIF,EACK,OAAAG,KAAKC,MAAMJ,SAEbK,GACmD,CAIrD,MAAA,CACLC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,WAAW,EACXC,eAAe,EAEnB,CAKA,SAAS1C,EAAgBH,EAAc8C,GAEjC,QA8BN,SAA2B9C,GASzB,MARyB,CACvB,2BACA,UACA,OACA,OACA,OAGsB+C,MAAKC,GAAUhD,EAAKiD,WAAWD,IACzD,CAxCME,CAAkBlD,OAKlBmD,EAAwBnD,MA+C9B,SAA2BA,GAOlB,MANkB,CACvB,aACA,aACA,aAGsB+C,MAAeC,GAAAhD,EAAKiD,WAAWD,MAAYG,EAAwBnD,EAC7F,CAlDMoD,CAAkBpD,KAAU8C,EAAaH,eAuD/C,SAA4B3C,GAS1B,MAR0B,CACxB,QACA,WACA,eACA,cACA,OAGuB+C,MAAKC,GAAUhD,EAAKiD,WAAWD,IAC1D,CA5DMK,CAAmBrD,KAAU8C,EAAaJ,eAiEhD,SAA2B1C,GAQzB,MAPyB,CACvB,OACA,OACA,OACA,cAGsB+C,MAAKC,GAAUhD,EAAKiD,WAAWD,IACzD,CAtEMM,CAAkBtD,KAAU8C,EAAaF,YAM/C,CAoBA,SAASO,EAAwBnD,GACxB,OAAAA,EAAKiD,WAAW,MACzB"}