{"version":3,"file":"utils-tripcreation.ts.VnA1EOFJ.js","sources":["../../../../src/utils/tripCreation.ts"],"sourcesContent":["/**\n * Utility functions for creating standard trips\n */\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { sendTripToWebhook, prepareTripWebhookPayload } from \"./webhook\";\nimport { TripFormData } from \"@/types/trip\";\n\n/**\n * Create a standard trip in the database\n */\nexport async function createStandardTrip(\n  formData: TripFormData, \n  user: any, \n  profileData: any\n) {\n  // Ensure we have complete profile data\n  let completeProfileData = profileData;\n  \n  // If profile data is missing or incomplete, fetch it from the database\n  if (!profileData || Object.keys(profileData).length === 0) {\n    try {\n      const { data: userData, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n      \n      if (!error && userData) {\n        completeProfileData = userData;\n      }\n    } catch (error) {\n      console.error(\"Error fetching complete profile data:\", error);\n    }\n  }\n  \n  // Add email to profile data\n  completeProfileData = {\n    ...completeProfileData,\n    email: user.email\n  };\n  \n  // Format the data for the database\n  const tripData = {\n    user_id: user.id,\n    title: formData.title,\n    description: formData.description,\n    location: formData.location,\n    coordinates: JSON.stringify(formData.coordinates),\n    start_date: formData.startDate?.toISOString(),\n    end_date: formData.endDate?.toISOString(),\n    category: formData.category,\n    budget: parseFloat(formData.budget),\n    currency: formData.currency || 'USD',\n    transportation_details: {\n      mode: formData.transportationMode,\n      details: formData.transportationDetails,\n    },\n    accommodation_details: {\n      type: formData.accommodationType,\n      details: formData.accommodationDetails,\n    },\n    notes: formData.notes || '',\n    adults: formData.adults,\n    kids: formData.kids,\n    trip_type: formData.tripType,\n    profile_data: completeProfileData,\n    // Add ZapTrip specific fields\n    interests: formData.interests || [],\n    has_pets: formData.hasPets || false,\n    departure_location: formData.departureLocation || '',\n    departure_coordinates: formData.departureCoordinates ? JSON.stringify(formData.departureCoordinates) : null\n  };\n\n  console.log(\"Trip data to be inserted:\", tripData);\n\n  // Insert into the database\n  const { data: tripResult, error } = await supabase.from(\"trips\").insert(tripData).select();\n\n  if (error) {\n    console.error(\"Error creating trip:\", error);\n    throw error;\n  }\n\n  console.log(\"Trip created successfully:\", tripResult);\n\n  // Send data to Make webhook\n  if (tripResult && tripResult.length > 0) {\n \n    const webhookPayload = prepareTripWebhookPayload({\n      ...tripResult[0],\n      email: user.email, // Add email here for webhook but it won't be stored in DB\n      trip_type: 'zaptrip' // Ensure trip type is explicitly set\n    });\n\n    const webhookResult = await sendTripToWebhook(webhookPayload);\n  \n  }\n\n  return tripResult;\n}\n"],"names":["async","createStandardTrip","formData","user","profileData","completeProfileData","Object","keys","length","data","userData","error","supabase","from","select","eq","id","single","email","tripData","user_id","title","description","location","coordinates","JSON","stringify","start_date","startDate","toISOString","end_date","endDate","category","budget","parseFloat","currency","transportation_details","mode","transportationMode","details","transportationDetails","accommodation_details","type","accommodationType","accommodationDetails","notes","adults","kids","trip_type","tripType","profile_data","interests","has_pets","hasPets","departure_location","departureLocation","departure_coordinates","departureCoordinates","tripResult","insert","webhookPayload","prepareTripWebhookPayload","sendTripToWebhook"],"mappings":"yHAUsBA,eAAAC,EACpBC,EACAC,EACAC,GAGA,IAAIC,EAAsBD,EAG1B,IAAKA,GAAmD,IAApCE,OAAOC,KAAKH,GAAaI,OACvC,IACF,MAAQC,KAAMC,EAAUC,MAAAA,SAAgBC,EACrCC,KAAK,YACLC,OAAO,KACPC,GAAG,KAAMZ,EAAKa,IACdC,UAEEN,GAASD,IACUL,EAAAK,SAEjBC,GACqD,CAK1CN,EAAA,IACjBA,EACHa,MAAOf,EAAKe,OAId,MAAMC,EAAW,CACfC,QAASjB,EAAKa,GACdK,MAAOnB,EAASmB,MAChBC,YAAapB,EAASoB,YACtBC,SAAUrB,EAASqB,SACnBC,YAAaC,KAAKC,UAAUxB,EAASsB,aACrCG,WAAYzB,EAAS0B,WAAWC,cAChCC,SAAU5B,EAAS6B,SAASF,cAC5BG,SAAU9B,EAAS8B,SACnBC,OAAQC,WAAWhC,EAAS+B,QAC5BE,SAAUjC,EAASiC,UAAY,MAC/BC,uBAAwB,CACtBC,KAAMnC,EAASoC,mBACfC,QAASrC,EAASsC,uBAEpBC,sBAAuB,CACrBC,KAAMxC,EAASyC,kBACfJ,QAASrC,EAAS0C,sBAEpBC,MAAO3C,EAAS2C,OAAS,GACzBC,OAAQ5C,EAAS4C,OACjBC,KAAM7C,EAAS6C,KACfC,UAAW9C,EAAS+C,SACpBC,aAAc7C,EAEd8C,UAAWjD,EAASiD,WAAa,GACjCC,SAAUlD,EAASmD,UAAW,EAC9BC,mBAAoBpD,EAASqD,mBAAqB,GAClDC,sBAAuBtD,EAASuD,qBAAuBhC,KAAKC,UAAUxB,EAASuD,sBAAwB,OAMjGhD,KAAMiD,EAAY/C,MAAAA,SAAgBC,EAASC,KAAK,SAAS8C,OAAOxC,GAAUL,SAElF,GAAIH,EAEI,MAAAA,EAMJ,GAAA+C,GAAcA,EAAWlD,OAAS,EAAG,CAEvC,MAAMoD,EAAiBC,EAA0B,IAC5CH,EAAW,GACdxC,MAAOf,EAAKe,MACZ8B,UAAW,kBAGec,EAAkBF,EAAc,CAIvD,OAAAF,CACT"}