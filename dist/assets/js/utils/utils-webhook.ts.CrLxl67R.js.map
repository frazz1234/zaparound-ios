{"version":3,"file":"utils-webhook.ts.CrLxl67R.js","sources":["../../../../src/utils/webhook.ts"],"sourcesContent":["/**\n * Utility functions for sending data to webhooks\n */\nimport { supabase } from \"@/integrations/supabase/client\";\n\n/**\n * Send trip data to the Make.com webhook via Supabase Edge Function\n */\nexport async function sendTripToWebhook(tripData: any) {\n  try {\n    console.log('🔍 Trip data received in webhook:', {\n      trip_type: tripData.trip_type,\n      id: tripData.id,\n      title: tripData.title\n    });\n\n    // Get user email from the database if it's not already provided\n    \n    // Make sure we have at least a basic profile data object\n\n\n    // Determine the webhook type based on trip type\n    const webhookType = tripData.trip_type?.toLowerCase() || 'zaptrip';\n    \n    console.log(`📤 Sending webhook payload to make-webhook/${webhookType}`);\n    console.log(\"📦 Webhook payload:\", JSON.stringify(tripData, null, 2));\n    \n    // Call the Supabase Edge Function\n    const { data, error } = await supabase.functions.invoke(`make-webhook/${webhookType}`, {\n      body: tripData\n    });\n\n    if (error) {\n      console.error(\"❌ Failed to send data to webhook:\", error);\n      return false;\n    } else {\n      console.log(\"✅ Successfully sent trip data to webhook\");\n      return true;\n    }\n  } catch (webhookError) {\n    console.error(\"Error sending data to webhook:\", webhookError);\n    return false;\n  }\n}\n\n/**\n * Prepare webhook payload for a standard trip\n */\nexport function prepareTripWebhookPayload(tripResult: any) {\n  console.log(\"Preparing standard trip webhook payload from result:\", JSON.stringify(tripResult, null, 2));\n  \n  // Get auth user email if available in trip result\n  let userEmail = '';\n  if (tripResult.email) {\n    userEmail = tripResult.email;\n  } else if (tripResult.profile_data?.email) {\n    userEmail = tripResult.profile_data.email;\n  }\n  \n  // Ensure we have complete profile data\n  const profileData = tripResult.profile_data || {};\n  \n  // Make sure the email is included in profile data\n  if (userEmail && profileData && !profileData.email) {\n    profileData.email = userEmail;\n  }\n  \n  // Parse transportation and accommodation details if they exist\n  let transportationMode = tripResult.transportation_mode || '';\n  let transportationDetails = '';\n  if (tripResult.transportation_details) {\n    if (typeof tripResult.transportation_details === 'string') {\n      try {\n        const parsedDetails = JSON.parse(tripResult.transportation_details);\n        transportationMode = parsedDetails.mode || transportationMode;\n        transportationDetails = parsedDetails.details || '';\n      } catch (e) {\n        console.error(\"Error parsing transportation details:\", e);\n      }\n    } else {\n      transportationMode = tripResult.transportation_details.mode || transportationMode;\n      transportationDetails = tripResult.transportation_details.details || '';\n    }\n  }\n  \n  let accommodationType = tripResult.accommodation_type || '';\n  let accommodationDetails = '';\n  if (tripResult.accommodation_details) {\n    if (typeof tripResult.accommodation_details === 'string') {\n      try {\n        const parsedDetails = JSON.parse(tripResult.accommodation_details);\n        accommodationType = parsedDetails.type || accommodationType;\n        accommodationDetails = parsedDetails.details || '';\n      } catch (e) {\n        console.error(\"Error parsing accommodation details:\", e);\n      }\n    } else {\n      accommodationType = tripResult.accommodation_details.type || accommodationType;\n      accommodationDetails = tripResult.accommodation_details.details || '';\n    }\n  }\n\n  // Parse coordinates if they exist\n  let coordinates = null;\n  if (tripResult.coordinates) {\n    try {\n      coordinates = typeof tripResult.coordinates === 'string' \n        ? JSON.parse(tripResult.coordinates)\n        : tripResult.coordinates;\n    } catch (e) {\n      console.error(\"Error parsing coordinates:\", e);\n    }\n  }\n\n  // Parse departure coordinates if they exist\n  let departureCoordinates = null;\n  if (tripResult.departure_coordinates) {\n    try {\n      departureCoordinates = typeof tripResult.departure_coordinates === 'string' \n        ? JSON.parse(tripResult.departure_coordinates)\n        : tripResult.departure_coordinates;\n    } catch (e) {\n      console.error(\"Error parsing departure coordinates:\", e);\n    }\n  }\n  \n  const payload = {\n    trip_id: tripResult.id,\n    title: tripResult.title,\n    description: tripResult.description,\n    location: tripResult.location,\n    coordinates: coordinates,\n    start_date: tripResult.start_date,\n    end_date: tripResult.end_date,\n    category: tripResult.category,\n    budget: parseFloat(tripResult.budget || '0'),\n    currency: tripResult.currency || 'USD',\n    transportation_mode: transportationMode,\n    transportation_details: transportationDetails,\n    accommodation_type: accommodationType,\n    accommodation_details: accommodationDetails,\n    adults: tripResult.adults,\n    kids: tripResult.kids,\n    trip_type: tripResult.trip_type,\n    user_id: tripResult.user_id,\n    user_email: userEmail,\n    // Include notes if available\n    notes: tripResult.notes || '',\n    // Add complete profile information\n    profile: profileData,\n    // Add ZapTrip specific information\n    departure_location: tripResult.departure_location || '',\n    departure_coordinates: departureCoordinates,\n    interests: Array.isArray(tripResult.interests) ? tripResult.interests : [],\n    has_pets: tripResult.has_pets || false\n  };\n  \n  console.log(\"Final standard trip webhook payload:\", JSON.stringify(payload, null, 2));\n  return payload;\n}\n\n/**\n * Prepare webhook payload for a ZapOut trip\n */\nexport function prepareZapOutWebhookPayload(zapOutResult: any) {\n  console.log(\"Preparing ZapOut webhook payload from result:\", JSON.stringify(zapOutResult, null, 2));\n  \n  // Get auth user email if available in trip result\n  let userEmail = '';\n  if (zapOutResult.email) {\n    userEmail = zapOutResult.email;\n  } else if (zapOutResult.profile_data?.email) {\n    userEmail = zapOutResult.profile_data.email;\n  }\n  \n  // Ensure we have complete profile data\n  const profileData = zapOutResult.profile_data || {};\n  \n  // Make sure the email is included in profile data\n  if (userEmail && profileData && !profileData.email) {\n    profileData.email = userEmail;\n  }\n  \n  // Ensure arrays are defined and properly formatted\n  const activityTimes = Array.isArray(zapOutResult.activity_times) ? zapOutResult.activity_times : [];\n  const activityTypes = Array.isArray(zapOutResult.activity_types) ? zapOutResult.activity_types : [];\n  const requestedActivities = Array.isArray(zapOutResult.requested_activities) ? zapOutResult.requested_activities : [];\n  \n  // Parse coordinates if they exist\n  let coordinates = null;\n  if (zapOutResult.coordinates) {\n    try {\n      coordinates = typeof zapOutResult.coordinates === 'string' \n        ? JSON.parse(zapOutResult.coordinates)\n        : zapOutResult.coordinates;\n    } catch (e) {\n      console.error(\"Error parsing coordinates:\", e);\n    }\n  }\n\n  // Ensure date is properly formatted\n  let formattedDate = null;\n  if (zapOutResult.date) {\n    try {\n      formattedDate = new Date(zapOutResult.date).toISOString();\n    } catch (e) {\n      console.error(\"Error formatting date:\", e);\n    }\n  }\n  \n  // Format the payload with explicit values\n  const payload = {\n    zapout_id: zapOutResult.id || '',\n    trip_id: zapOutResult.trip_id || '',\n    title: zapOutResult.title || '',\n    description: zapOutResult.description || '',\n    location: zapOutResult.location || '',\n    coordinates: coordinates,\n    date: formattedDate,// Add end_date for consistency (same as date for single-day events)\n    user_id: zapOutResult.user_id || '',\n    user_email: userEmail,\n    trip_type: 'ZapOut',\n    // Complete profile information \n    profile: profileData,\n    // Include notes if available\n    notes: zapOutResult.notes || '',\n    // ZapOut specific data with explicit values\n    activity_times: activityTimes,\n    activity_types: activityTypes,\n    requested_activities: requestedActivities,\n    budget_per_person: zapOutResult.budget_per_person || '',\n    min_budget: parseFloat(zapOutResult.min_budget || '0'),\n    max_budget: parseFloat(zapOutResult.max_budget || '500'),\n    currency: zapOutResult.currency || 'USD',\n    currency_symbol: zapOutResult.currency_symbol || '$',\n    additional_needs: zapOutResult.additional_needs || '',\n    accessibility_needs: zapOutResult.accessibility_needs || '',\n    adults: zapOutResult.adults || 1,\n    kids: zapOutResult.kids || 0,\n  };\n  \n  console.log(\"Final ZapOut webhook payload:\", JSON.stringify(payload, null, 2));\n  return payload;\n}\n\n/**\n * Prepare webhook payload for a ZapRoad trip\n */\nexport function prepareZapRoadWebhookPayload(zapRoadResult: any) {\n  // Get auth user email if available in trip result\n  let userEmail = '';\n  if (zapRoadResult.email) {\n    userEmail = zapRoadResult.email;\n  } else if (zapRoadResult.profile_data?.email) {\n    userEmail = zapRoadResult.profile_data.email;\n  }\n  \n  // Parse the stopover cities if it's a string and extract just the names for Make.com\n  let stopoverCitiesString = '';\n  if (zapRoadResult.stopover_cities) {\n    try {\n      // Parse the outer array first\n      const parsedCities = typeof zapRoadResult.stopover_cities === 'string' \n        ? JSON.parse(zapRoadResult.stopover_cities) \n        : zapRoadResult.stopover_cities;\n      \n      // Extract just the city names and join them with commas\n      stopoverCitiesString = parsedCities.map((city: any) => city.name).join(' ; ');\n      \n      console.log('Stopover cities string for Make:', stopoverCitiesString);\n    } catch (e) {\n      console.error(\"Error parsing stopover cities:\", e);\n    }\n  }\n\n  const payload = {\n    zaproad_id: zapRoadResult.id,\n    trip_id: zapRoadResult.trip_id || '',\n    title: zapRoadResult.title || '',\n    description: zapRoadResult.description || '',\n    location: zapRoadResult.location || '',\n    starting_city: zapRoadResult.starting_city || '',\n    end_city: zapRoadResult.end_city || '',\n    start_date: zapRoadResult.start_date || null,\n    end_date: zapRoadResult.end_date || null,\n    user_id: zapRoadResult.user_id,\n    user_email: userEmail,\n    trip_type: 'ZapRoad',\n    // Only include profile, not profile_data\n    profile: zapRoadResult.profile_data || {},\n    // ZapRoad specific data\n    starting_city_coordinates: zapRoadResult.starting_city_coordinates,\n    stopover_cities: stopoverCitiesString, // Now just a comma-separated string\n    end_city_coordinates: zapRoadResult.end_city_coordinates,\n    number_of_people: zapRoadResult.number_of_people,\n    adults: zapRoadResult.adults || 1,\n    kids: zapRoadResult.kids || 0,\n    has_electric_car: zapRoadResult.has_electric_car,\n    car_type: zapRoadResult.car_type || '',\n    interests: Array.isArray(zapRoadResult.interests) ? zapRoadResult.interests : [],\n    has_pets: zapRoadResult.has_pets === true,\n    special_requirements: zapRoadResult.special_requirements || '',\n    // Include budget and currency information\n    budget: typeof zapRoadResult.budget === 'number' ? zapRoadResult.budget : parseFloat(zapRoadResult.budget || '0'),\n    currency: zapRoadResult.currency || 'USD',\n    currency_symbol: zapRoadResult.currency_symbol || '$',\n    category: zapRoadResult.category || '',\n    // Include notes if available\n    notes: zapRoadResult.notes || ''\n  };\n  \n  return payload;\n}\n"],"names":["async","sendTripToWebhook","tripData","webhookType","trip_type","toLowerCase","data","error","supabase","functions","invoke","body","webhookError","prepareTripWebhookPayload","tripResult","userEmail","email","profile_data","profileData","transportationMode","transportation_mode","transportationDetails","transportation_details","parsedDetails","JSON","parse","mode","details","e","accommodationType","accommodation_type","accommodationDetails","accommodation_details","type","coordinates","departureCoordinates","departure_coordinates","trip_id","id","title","description","location","start_date","end_date","category","budget","parseFloat","currency","adults","kids","user_id","user_email","notes","profile","departure_location","interests","Array","isArray","has_pets","prepareZapOutWebhookPayload","zapOutResult","activityTimes","activity_times","activityTypes","activity_types","requestedActivities","requested_activities","formattedDate","date","Date","toISOString","zapout_id","budget_per_person","min_budget","max_budget","currency_symbol","additional_needs","accessibility_needs","prepareZapRoadWebhookPayload","zapRoadResult","stopoverCitiesString","stopover_cities","map","city","name","join","zaproad_id","starting_city","end_city","starting_city_coordinates","end_city_coordinates","number_of_people","has_electric_car","car_type","special_requirements"],"mappings":"+DAQAA,eAAsBC,EAAkBC,GAClC,IAaF,MAAMC,EAAcD,EAASE,WAAWC,eAAiB,WAMnDC,KAAEA,EAAMC,MAAAA,SAAgBC,EAASC,UAAUC,OAAO,gBAAgBP,IAAe,CACrFQ,KAAMT,IAGR,OAAIK,QAOGK,GAEA,OAAA,CAAA,CAEX,CAKO,SAASC,EAA0BC,GAIxC,IAAIC,EAAY,GACZD,EAAWE,MACbD,EAAYD,EAAWE,MACdF,EAAWG,cAAcD,QAClCD,EAAYD,EAAWG,aAAaD,OAIhC,MAAAE,EAAcJ,EAAWG,cAAgB,CAAC,EAG5CF,GAAaG,IAAgBA,EAAYF,QAC3CE,EAAYF,MAAQD,GAIlB,IAAAI,EAAqBL,EAAWM,qBAAuB,GACvDC,EAAwB,GAC5B,GAAIP,EAAWQ,uBACT,GAA6C,iBAAtCR,EAAWQ,uBAChB,IACF,MAAMC,EAAgBC,KAAKC,MAAMX,EAAWQ,wBAC5CH,EAAqBI,EAAcG,MAAQP,EAC3CE,EAAwBE,EAAcI,SAAW,SAC1CC,GACiD,MAGrCT,EAAAL,EAAWQ,uBAAuBI,MAAQP,EACvCE,EAAAP,EAAWQ,uBAAuBK,SAAW,GAIrE,IAAAE,EAAoBf,EAAWgB,oBAAsB,GACrDC,EAAuB,GAC3B,GAAIjB,EAAWkB,sBACT,GAA4C,iBAArClB,EAAWkB,sBAChB,IACF,MAAMT,EAAgBC,KAAKC,MAAMX,EAAWkB,uBAC5CH,EAAoBN,EAAcU,MAAQJ,EAC1CE,EAAuBR,EAAcI,SAAW,SACzCC,GACgD,MAGrCC,EAAAf,EAAWkB,sBAAsBC,MAAQJ,EACtCE,EAAAjB,EAAWkB,sBAAsBL,SAAW,GAKvE,IAAIO,EAAc,KAClB,GAAIpB,EAAWoB,YACT,IACYA,EAAkC,iBAA3BpB,EAAWoB,YAC5BV,KAAKC,MAAMX,EAAWoB,aACtBpB,EAAWoB,kBACRN,GACsC,CAKjD,IAAIO,EAAuB,KAC3B,GAAIrB,EAAWsB,sBACT,IACqBD,EAA4C,iBAArCrB,EAAWsB,sBACrCZ,KAAKC,MAAMX,EAAWsB,uBACtBtB,EAAWsB,4BACRR,GACgD,CAoCpD,MAhCS,CACdS,QAASvB,EAAWwB,GACpBC,MAAOzB,EAAWyB,MAClBC,YAAa1B,EAAW0B,YACxBC,SAAU3B,EAAW2B,SACrBP,cACAQ,WAAY5B,EAAW4B,WACvBC,SAAU7B,EAAW6B,SACrBC,SAAU9B,EAAW8B,SACrBC,OAAQC,WAAWhC,EAAW+B,QAAU,KACxCE,SAAUjC,EAAWiC,UAAY,MACjC3B,oBAAqBD,EACrBG,uBAAwBD,EACxBS,mBAAoBD,EACpBG,sBAAuBD,EACvBiB,OAAQlC,EAAWkC,OACnBC,KAAMnC,EAAWmC,KACjB7C,UAAWU,EAAWV,UACtB8C,QAASpC,EAAWoC,QACpBC,WAAYpC,EAEZqC,MAAOtC,EAAWsC,OAAS,GAE3BC,QAASnC,EAEToC,mBAAoBxC,EAAWwC,oBAAsB,GACrDlB,sBAAuBD,EACvBoB,UAAWC,MAAMC,QAAQ3C,EAAWyC,WAAazC,EAAWyC,UAAY,GACxEG,SAAU5C,EAAW4C,WAAY,EAKrC,CAKO,SAASC,EAA4BC,GAI1C,IAAI7C,EAAY,GACZ6C,EAAa5C,MACfD,EAAY6C,EAAa5C,MAChB4C,EAAa3C,cAAcD,QACpCD,EAAY6C,EAAa3C,aAAaD,OAIlC,MAAAE,EAAc0C,EAAa3C,cAAgB,CAAC,EAG9CF,GAAaG,IAAgBA,EAAYF,QAC3CE,EAAYF,MAAQD,GAIhB,MAAA8C,EAAgBL,MAAMC,QAAQG,EAAaE,gBAAkBF,EAAaE,eAAiB,GAC3FC,EAAgBP,MAAMC,QAAQG,EAAaI,gBAAkBJ,EAAaI,eAAiB,GAC3FC,EAAsBT,MAAMC,QAAQG,EAAaM,sBAAwBN,EAAaM,qBAAuB,GAGnH,IAAIhC,EAAc,KAClB,GAAI0B,EAAa1B,YACX,IACYA,EAAoC,iBAA7B0B,EAAa1B,YAC9BV,KAAKC,MAAMmC,EAAa1B,aACxB0B,EAAa1B,kBACVN,GACsC,CAKjD,IAAIuC,EAAgB,KACpB,GAAIP,EAAaQ,KACX,IACFD,EAAgB,IAAIE,KAAKT,EAAaQ,MAAME,oBACrC1C,GACkC,CAoCtC,MA/BS,CACd2C,UAAWX,EAAatB,IAAM,GAC9BD,QAASuB,EAAavB,SAAW,GACjCE,MAAOqB,EAAarB,OAAS,GAC7BC,YAAaoB,EAAapB,aAAe,GACzCC,SAAUmB,EAAanB,UAAY,GACnCP,cACAkC,KAAMD,EACNjB,QAASU,EAAaV,SAAW,GACjCC,WAAYpC,EACZX,UAAW,SAEXiD,QAASnC,EAETkC,MAAOQ,EAAaR,OAAS,GAE7BU,eAAgBD,EAChBG,eAAgBD,EAChBG,qBAAsBD,EACtBO,kBAAmBZ,EAAaY,mBAAqB,GACrDC,WAAY3B,WAAWc,EAAaa,YAAc,KAClDC,WAAY5B,WAAWc,EAAac,YAAc,OAClD3B,SAAUa,EAAab,UAAY,MACnC4B,gBAAiBf,EAAae,iBAAmB,IACjDC,iBAAkBhB,EAAagB,kBAAoB,GACnDC,oBAAqBjB,EAAaiB,qBAAuB,GACzD7B,OAAQY,EAAaZ,QAAU,EAC/BC,KAAMW,EAAaX,MAAQ,EAK/B,CAKO,SAAS6B,EAA6BC,GAE3C,IAAIhE,EAAY,GACZgE,EAAc/D,MAChBD,EAAYgE,EAAc/D,MACjB+D,EAAc9D,cAAcD,QACrCD,EAAYgE,EAAc9D,aAAaD,OAIzC,IAAIgE,EAAuB,GAC3B,GAAID,EAAcE,gBACZ,IAOqBD,GALuC,iBAAlCD,EAAcE,gBACtCzD,KAAKC,MAAMsD,EAAcE,iBACzBF,EAAcE,iBAGkBC,KAAKC,GAAcA,EAAKC,OAAMC,KAAK,aAGhEzD,GAC0C,CAwC9C,MApCS,CACd0D,WAAYP,EAAczC,GAC1BD,QAAS0C,EAAc1C,SAAW,GAClCE,MAAOwC,EAAcxC,OAAS,GAC9BC,YAAauC,EAAcvC,aAAe,GAC1CC,SAAUsC,EAActC,UAAY,GACpC8C,cAAeR,EAAcQ,eAAiB,GAC9CC,SAAUT,EAAcS,UAAY,GACpC9C,WAAYqC,EAAcrC,YAAc,KACxCC,SAAUoC,EAAcpC,UAAY,KACpCO,QAAS6B,EAAc7B,QACvBC,WAAYpC,EACZX,UAAW,UAEXiD,QAAS0B,EAAc9D,cAAgB,CAAC,EAExCwE,0BAA2BV,EAAcU,0BACzCR,gBAAiBD,EACjBU,qBAAsBX,EAAcW,qBACpCC,iBAAkBZ,EAAcY,iBAChC3C,OAAQ+B,EAAc/B,QAAU,EAChCC,KAAM8B,EAAc9B,MAAQ,EAC5B2C,iBAAkBb,EAAca,iBAChCC,SAAUd,EAAcc,UAAY,GACpCtC,UAAWC,MAAMC,QAAQsB,EAAcxB,WAAawB,EAAcxB,UAAY,GAC9EG,UAAqC,IAA3BqB,EAAcrB,SACxBoC,qBAAsBf,EAAce,sBAAwB,GAE5DjD,OAAwC,iBAAzBkC,EAAclC,OAAsBkC,EAAclC,OAASC,WAAWiC,EAAclC,QAAU,KAC7GE,SAAUgC,EAAchC,UAAY,MACpC4B,gBAAiBI,EAAcJ,iBAAmB,IAClD/B,SAAUmC,EAAcnC,UAAY,GAEpCQ,MAAO2B,EAAc3B,OAAS,GAIlC"}