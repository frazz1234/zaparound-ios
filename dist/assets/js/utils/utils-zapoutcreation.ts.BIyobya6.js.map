{"version":3,"file":"utils-zapoutcreation.ts.BIyobya6.js","sources":["../../../../src/utils/zapOutCreation.ts"],"sourcesContent":["/**\n * Utility functions for creating ZapOut trips\n */\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { sendTripToWebhook, prepareZapOutWebhookPayload } from \"./webhook\";\nimport { TripFormData } from \"@/types/trip\";\n\n/**\n * Create a ZapOut trip in the database\n */\nexport async function createZapOutTrip(\n  formData: TripFormData, \n  user: any, \n  profileData: any\n) {\n  // For ZapOut trips, generate a UUID to use as trip_id\n  const tripId = crypto.randomUUID();\n  \n  console.log(\"createZapOutTrip - Starting with raw form data:\", JSON.stringify(formData, null, 2));\n  console.log(\"createZapOutTrip - User data:\", JSON.stringify(user, null, 2));\n  console.log(\"createZapOutTrip - Profile data:\", JSON.stringify(profileData, null, 2));\n  \n  // Ensure we have complete profile data\n  let completeProfileData = profileData;\n  \n  // If profile data is missing or incomplete, fetch it from the database\n  if (!profileData || Object.keys(profileData).length === 0) {\n    try {\n      const { data: userData, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n      \n      if (!error && userData) {\n        completeProfileData = userData;\n      }\n    } catch (error) {\n      console.error(\"Error fetching complete profile data:\", error);\n    }\n  }\n  \n  // Ensure all arrays are defined and properly formatted\n  const activityTimes = Array.isArray(formData.activityTimes) ? formData.activityTimes : [];\n  const activityTypes = Array.isArray(formData.activityTypes) ? formData.activityTypes : [];\n  const requestedActivities = Array.isArray(formData.requestedActivities) ? formData.requestedActivities : [];\n  \n  // Ensure booleans are properly defined\n  const includeLunch = formData.includeLunch === true;\n  const includeBudgetPerPerson = formData.includeBudgetPerPerson === true;\n  \n  // Format the date as ISO string if it exists\n  const date = formData.startDate \n    ? new Date(formData.startDate).toISOString() \n    : null;\n  \n  // Format complete profile data to ensure all fields are properly formatted\n  const formattedProfileData = {\n    language: completeProfileData?.language || '',\n    disabilities: Array.isArray(completeProfileData?.disabilities) ? completeProfileData.disabilities : [],\n    medical_conditions: Array.isArray(completeProfileData?.medical_conditions) ? completeProfileData.medical_conditions : [],\n    allergies: Array.isArray(completeProfileData?.allergies) ? completeProfileData.allergies : [],\n    lgbtq_status: Array.isArray(completeProfileData?.lgbtq_status) ? completeProfileData.lgbtq_status : [],\n    dietary_preferences: Array.isArray(completeProfileData?.dietary_preferences) ? completeProfileData.dietary_preferences : [],\n    email: user.email,\n    first_name: completeProfileData?.first_name || '',\n    last_name: completeProfileData?.last_name || '',\n    birth_date: completeProfileData?.birth_date || null,\n    residence_location: completeProfileData?.residence_location || ''\n  };\n  \n  console.log(\"createZapOutTrip - Processed form data:\", { \n    includeLunch, \n    includeBudgetPerPerson,\n    activityTimes,\n    activityTypes,\n    requestedActivities,\n    lunchOption: formData.lunchOption,\n    budgetPerPerson: formData.budgetPerPerson,\n    additionalNeeds: formData.additionalNeeds,\n    date,\n    formattedProfileData\n  });\n  \n  // Create a base zapOutData object with all fields explicitly defined\n  const zapOutData = {\n    id: tripId,\n    user_id: user.id,\n    trip_id: tripId,\n    title: formData.title || \"\",\n    description: formData.description || \"\",\n    location: formData.location || \"\",\n    coordinates: formData.coordinates ? JSON.stringify(formData.coordinates) : null,\n    adults: formData.adults || 1,\n    kids: formData.kids || 0,\n    profile_data: formattedProfileData,\n    trip_type: 'ZapOut',\n    // ZapOut specific fields with explicit values\n    activity_times: activityTimes,\n    activity_types: activityTypes,\n    requested_activities: requestedActivities,\n    additional_needs: formData.additionalNeeds || null,\n    date: date,\n    min_budget: formData.minBudget || \"0\",\n    max_budget: formData.maxBudget || \"500\",\n    currency: formData.currency || \"USD\",\n    // Add optional fields only if they exist\n    ...(includeBudgetPerPerson && { budget_per_person: formData.budgetPerPerson || '' }),\n    // Add category if it exists\n    ...(formData.category && { category: formData.category }),\n    // Add budget if it exists\n    ...(formData.budget && { budget: formData.budget }),\n    // Add transportation details if they exist\n    ...(formData.transportationMode && { transportation_mode: formData.transportationMode }),\n    ...(formData.transportationDetails && { transportation_details: formData.transportationDetails }),\n    // Add accommodation details if they exist\n    ...(formData.accommodationType && { accommodation_type: formData.accommodationType }),\n    ...(formData.accommodationDetails && { accommodation_details: formData.accommodationDetails })\n  };\n\n  console.log(\"createZapOutTrip - Final data for Supabase insertion:\", JSON.stringify(zapOutData, null, 2));\n  \n  try {\n    console.log(\"createZapOutTrip - Attempting to insert data into Supabase...\");\n    const { data: zapOutResult, error: zapOutError } = await supabase\n      .from('zapout_data')\n      .insert(zapOutData)\n      .select();\n      \n    if (zapOutError) {\n      console.error(\"createZapOutTrip - Supabase insertion error:\", zapOutError);\n      throw zapOutError;\n    }\n\n    console.log(\"createZapOutTrip - Supabase insertion successful:\", JSON.stringify(zapOutResult, null, 2));\n\n    // Add a small delay to ensure Supabase has processed the insertion\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Send data to Make webhook for ZapOut trips\n    if (zapOutResult && zapOutResult.length > 0) {\n      const webhookPayload = prepareZapOutWebhookPayload({\n        ...zapOutResult[0],\n        email: user.email, // Add email here for webhook but it won't be stored in DB\n        trip_type: 'zapout' // Ensure trip type is explicitly set\n      });\n      const webhookResult = await sendTripToWebhook(webhookPayload);\n     \n    }\n\n    return zapOutResult;\n  } catch (error) {\n    console.error(\"createZapOutTrip - Exception:\", error);\n    throw error;\n  }\n}\n"],"names":["async","createZapOutTrip","formData","user","profileData","tripId","crypto","randomUUID","completeProfileData","Object","keys","length","data","userData","error","supabase","from","select","eq","id","single","activityTimes","Array","isArray","activityTypes","requestedActivities","includeBudgetPerPerson","includeLunch","date","startDate","Date","toISOString","formattedProfileData","language","disabilities","medical_conditions","allergies","lgbtq_status","dietary_preferences","email","first_name","last_name","birth_date","residence_location","zapOutData","user_id","trip_id","title","description","location","coordinates","JSON","stringify","adults","kids","profile_data","trip_type","activity_times","activity_types","requested_activities","additional_needs","additionalNeeds","min_budget","minBudget","max_budget","maxBudget","currency","budget_per_person","budgetPerPerson","category","budget","transportationMode","transportation_mode","transportationDetails","transportation_details","accommodationType","accommodation_type","accommodationDetails","accommodation_details","zapOutResult","zapOutError","insert","Promise","resolve","setTimeout","webhookPayload","prepareZapOutWebhookPayload","sendTripToWebhook"],"mappings":"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"}