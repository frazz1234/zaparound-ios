{"version":3,"file":"utils-zaproadcreation.ts.Sn3TFOx8.js","sources":["../../../../src/utils/zapRoadCreation.ts"],"sourcesContent":["/**\n * Utility functions for creating ZapRoad trips\n */\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { sendTripToWebhook, prepareZapRoadWebhookPayload } from \"./webhook\";\nimport { TripFormData } from \"@/types/trip\";\n\n/**\n * Create a ZapRoad trip in the database\n */\nexport async function createZapRoadTrip(\n  formData: TripFormData, \n  user: any, \n  profileData: any\n) {\n  // For ZapRoad trips, generate a UUID to use as trip_id\n  const tripId = crypto.randomUUID();\n  \n  console.log(\"Creating ZapRoad with form data:\", JSON.stringify(formData, null, 2));\n  \n  // Ensure we have complete profile data\n  let completeProfileData = profileData;\n  \n  // If profile data is missing or incomplete, fetch it from the database\n  if (!profileData || Object.keys(profileData).length === 0) {\n    try {\n      const { data: userData, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n      \n      if (!error && userData) {\n        completeProfileData = userData;\n      }\n    } catch (error) {\n      console.error(\"Error fetching complete profile data:\", error);\n    }\n  }\n  \n  // Parse stopover cities data from the form\n  const stopoverCitiesData = formData.stopoverCities || [];\n  \n  // Format complete profile data to ensure all fields are properly formatted\n  const formattedProfileData = {\n    language: completeProfileData?.language || '',\n    disabilities: Array.isArray(completeProfileData?.disabilities) ? completeProfileData.disabilities : [],\n    medical_conditions: Array.isArray(completeProfileData?.medical_conditions) ? completeProfileData.medical_conditions : [],\n    allergies: Array.isArray(completeProfileData?.allergies) ? completeProfileData.allergies : [],\n    lgbtq_status: Array.isArray(completeProfileData?.lgbtq_status) ? completeProfileData.lgbtq_status : [],\n    dietary_preferences: Array.isArray(completeProfileData?.dietary_preferences) ? completeProfileData.dietary_preferences : [],\n    email: user.email,\n    first_name: completeProfileData?.first_name || '',\n    last_name: completeProfileData?.last_name || '',\n    birth_date: completeProfileData?.birth_date || null,\n    residence_location: completeProfileData?.residence_location || ''\n  };\n  \n  // Create a zapRoadData object for insertion\n  const zapRoadData = {\n    id: tripId, // Use the same UUID for both id and trip_id\n    user_id: user.id,\n    trip_id: tripId,\n    title: formData.title || \"\",\n    description: formData.description || \"\",\n    location: formData.startingCity || formData.location || \"\",\n    coordinates: formData.startingCityCoordinates ? JSON.stringify(formData.startingCityCoordinates) : null,\n    profile_data: formattedProfileData,\n    trip_type: 'ZapRoad',\n    // ZapRoad specific fields\n    starting_city: formData.startingCity || \"\",\n    starting_city_coordinates: formData.startingCityCoordinates ? JSON.stringify(formData.startingCityCoordinates) : null,\n    // Format stopover cities with stringified coordinates but keep the array as is\n    stopover_cities: stopoverCitiesData.length > 0 ? JSON.stringify(stopoverCitiesData.map(city => ({\n      name: city.name,\n      coordinates: JSON.stringify(city.coordinates)\n    }))) : '[]',\n    end_city: formData.endCity || \"\",\n    end_city_coordinates: formData.endCityCoordinates ? JSON.stringify(formData.endCityCoordinates) : null,\n    number_of_people: formData.numberOfPeople || 1,\n    adults: formData.adults || 1,\n    kids: formData.kids || 0,\n    has_electric_car: formData.hasElectricCar === true || formData['has_electric_car'] === true,\n    car_type: formData.carType || formData['car_type'] || '',\n    interests: Array.isArray(formData.interests) ? formData.interests : [],\n    has_pets: formData.hasPets === true || formData['has_pets'] === true,\n    // Add notes field\n    notes: formData.notes || '',\n    // Convert Date objects to ISO strings for database compatibility\n    start_date: formData.startDate ? formData.startDate.toISOString() : null,\n    end_date: formData.endDate ? formData.endDate.toISOString() : null,\n    special_requirements: formData.specialRequirements || \"\",\n    // Add budget and currency\n    budget: formData.budget ? parseFloat(formData.budget) : 0,\n    currency: formData.currency || 'CAD',\n    category: formData.category || '',\n  };\n\n  console.log(\"Final ZapRoad data for insertion:\", JSON.stringify(zapRoadData, null, 2));\n  \n  try {\n    const { data: zapRoadResult, error: zapRoadError } = await supabase\n      .from('zaproad_data')\n      .insert(zapRoadData)\n      .select();\n      \n    if (zapRoadError) {\n      console.error(\"Error creating ZapRoad trip:\", zapRoadError);\n      throw zapRoadError;\n    }\n\n    console.log(\"ZapRoad trip created successfully:\", zapRoadResult);\n\n    // Add a small delay to ensure Supabase has processed the insertion\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Send data to Make webhook for ZapRoad trips\n    if (zapRoadResult && zapRoadResult.length > 0) {\n      const webhookPayload = prepareZapRoadWebhookPayload({\n        ...zapRoadResult[0],\n        email: user.email, // Add email here for webhook but it won't be stored in DB\n        trip_type: 'zaproad' // Ensure trip type is explicitly set\n      });\n      const webhookResult = await sendTripToWebhook(webhookPayload);\n    }\n\n    return zapRoadResult;\n  } catch (error) {\n    console.error(\"Exception in createZapRoadTrip:\", error);\n    throw error;\n  }\n}\n"],"names":["async","createZapRoadTrip","formData","user","profileData","tripId","crypto","randomUUID","completeProfileData","Object","keys","length","data","userData","error","supabase","from","select","eq","id","single","stopoverCitiesData","stopoverCities","formattedProfileData","language","disabilities","Array","isArray","medical_conditions","allergies","lgbtq_status","dietary_preferences","email","first_name","last_name","birth_date","residence_location","zapRoadData","user_id","trip_id","title","description","location","startingCity","coordinates","startingCityCoordinates","JSON","stringify","profile_data","trip_type","starting_city","starting_city_coordinates","stopover_cities","map","city","name","end_city","endCity","end_city_coordinates","endCityCoordinates","number_of_people","numberOfPeople","adults","kids","has_electric_car","hasElectricCar","car_type","carType","interests","has_pets","hasPets","notes","start_date","startDate","toISOString","end_date","endDate","special_requirements","specialRequirements","budget","parseFloat","currency","category","zapRoadResult","zapRoadError","insert","Promise","resolve","setTimeout","webhookPayload","prepareZapRoadWebhookPayload","sendTripToWebhook"],"mappings":"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"}