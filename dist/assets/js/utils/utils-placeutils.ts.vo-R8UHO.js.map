{"version":3,"file":"utils-placeutils.ts.vo-R8UHO.js","sources":["../../../../src/utils/placeUtils.ts"],"sourcesContent":["// Utility functions for places\n\n// Create a URL-friendly slug from a place name\nexport const createPlaceSlug = (placeName: string): string => {\n  return placeName\n    .toLowerCase()\n    .replace(/[^a-z0-9]+/g, '-')\n    .replace(/(^-|-$)/g, '');\n};\n\n// Create a full place URL with slug (without placeId in URL)\nexport const createPlaceUrl = (placeId: string, placeName: string, language: string = 'en'): string => {\n  const slug = createPlaceSlug(placeName);\n  return `/${language}/zap-places/${slug}`;\n};\n\n// Extract place ID from URL (for backward compatibility)\nexport const extractPlaceIdFromUrl = (url: string): string | null => {\n  // Match format: /zap-places/slug\n  const match = url.match(/\\/zap-places\\/([^\\/]+)/);\n  return match ? match[1] : null;\n};\n\n// Create a URL with placeId for internal use (when we need to pass placeId)\nexport const createPlaceUrlWithId = (placeId: string, placeName: string, language: string = 'en'): string => {\n  const slug = createPlaceSlug(placeName);\n  return `/${language}/zap-places/${placeId}/${slug}`;\n};\n\n// Validate if a string looks like a Google Place ID\nexport const isValidPlaceId = (id: string): boolean => {\n  // Google Place IDs typically start with 'ChIJ' and are 27 characters long\n  return /^ChIJ[A-Za-z0-9_-]{23}$/.test(id);\n};\n"],"names":["createPlaceSlug","placeName","toLowerCase","replace","createPlaceUrl","placeId","language"],"mappings":"AAGa,MAAAA,EAAmBC,GACvBA,EACJC,cACAC,QAAQ,cAAe,KACvBA,QAAQ,WAAY,IAIZC,EAAiB,CAACC,EAAiBJ,EAAmBK,EAAmB,OAE7E,IAAIA,gBADEN,EAAgBC"}